how many steals has kobe bryant had	( call SW.listValue ( call SW.getProperty ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_steals ) ) )
which player did not play in 2004 or 2010	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string season ) ( string = ) ( call SW.concat ( date 2004 -1 -1 ) ( date 2010 -1 -1 ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )
what team has kobe bryant played point guard for	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string position ) ( string = ) en.position.point_guard ) ( string team ) ) )
when kobe bryant had 3 allseason assists how many rebounds did he have	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_assists ) ( string = ) ( number 3 assist ) ) ( string num_rebounds ) ) )
find those players with turnover amounts in a given season equalling at most 3	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string num_turnovers ) ) ( string <= ) ( call SW.ensureNumericEntity ( number 3 turnover ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )
which player had at least three points during the season	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string num_points ) ) ( string >= ) ( call SW.ensureNumericEntity ( number 3 point ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )
when kobe bryant had 3 assists in a season what was his position	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_assists ) ( string = ) ( number 3 assist ) ) ( string position ) ) )
for the period of time in which kobe bryant was point guard name the amount of rebounds he had in that season	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string position ) ( string = ) en.position.point_guard ) ( string num_rebounds ) ) )
number of points over a season of player kobe bryant who is at point guard	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string position ) ( string = ) en.position.point_guard ) ( string num_points ) ) )
what position did kobe bryant play when he had three blocks	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_blocks ) ( string = ) ( number 3 block ) ) ( string position ) ) )
what player had the fewest turnovers this season	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.superlative ( var s ) ( string min ) ( call SW.ensureNumericProperty ( string num_turnovers ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )
player who has not played more games than player kobe bryantover a season	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string num_games_played ) ) ( string <= ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_games_played ) ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )
what seasons did kobe bryant play in	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string season ) ( string = ) ( call SW.getProperty ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string season ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )
how many steals did kobe bryant have when he had 3 turnovers	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_turnovers ) ( string = ) ( number 3 turnover ) ) ( string num_steals ) ) )
how many steals did kobe have from point guards from any team	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string position ) ( string = ) en.position.point_guard ) ( string num_steals ) ) )
player that has the least fouls over all seasons	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.superlative ( var s ) ( string min ) ( call SW.ensureNumericProperty ( string num_fouls ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )
what team did kobe bryant have 3 fouls for	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_fouls ) ( string = ) ( number 3 foul ) ) ( string team ) ) )
what is the position of kob bryant in the season he played 3 games	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_games_played ) ( string = ) ( number 3 game ) ) ( string position ) ) )
how many blocks did kobe have during his three point total game	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_points ) ( string = ) ( number 3 point ) ) ( string num_blocks ) ) )
which player makes less than 3 rebounds per career average season	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string num_rebounds ) ) ( string < ) ( call SW.ensureNumericEntity ( number 3 rebound ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )
how many fouls did kobe bryant commit during the same season in which his total number of assists was 3	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_assists ) ( string = ) ( number 3 assist ) ) ( string num_fouls ) ) )
how many assists did kobe bryant make in the season in which he scored three points	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_points ) ( string = ) ( number 3 point ) ) ( string num_assists ) ) )
how many three point assists does kobe bryant have in a season	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_points ) ( string = ) ( number 3 point ) ) ( string num_assists ) ) )
how many fouls did kobe bryant have in the season in which he played point guard	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string position ) ( string = ) en.position.point_guard ) ( string num_fouls ) ) )
how many games did kobe bryant have 3 steals in	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_steals ) ( string = ) ( number 3 steal ) ) ( string num_games_played ) ) )
players who played 2004 to 2010	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string season ) ( string = ) ( call SW.concat ( date 2004 -1 -1 ) ( date 2010 -1 -1 ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )
number of turnovers over a season of player kobe bryant from team los angeles lakers	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string team ) ( string = ) en.team.lakers ) ( string num_turnovers ) ) )
which player has scored less than three points	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string num_points ) ) ( string < ) ( call SW.ensureNumericEntity ( number 3 point ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )
players with more than 2 rebounds	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string num_rebounds ) ) ( string >= ) ( call SW.ensureNumericEntity ( number 3 rebound ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )
name those players who have a total number of fouls in any one season equal to or more than that of kobe bryant	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string num_fouls ) ) ( string >= ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_fouls ) ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )
player kobe bryant has given 3 fouls over this season	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_fouls ) ( string = ) ( number 3 foul ) ) ( string num_steals ) ) )
how many rebounds did kobe bryant make in seasons where he made 3 fouls	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_fouls ) ( string = ) ( number 3 foul ) ) ( string num_rebounds ) ) )
when kobe bryant has given up 3 turnovers in a season how many fouls has he typically given	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_turnovers ) ( string = ) ( number 3 turnover ) ) ( string num_fouls ) ) )
how many blocks has kobe bryant had as an la laker	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string team ) ( string = ) en.team.lakers ) ( string num_blocks ) ) )
player with most number of blocks over a season	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.superlative ( var s ) ( string max ) ( call SW.ensureNumericProperty ( string num_blocks ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )
what player had the same or less blocks as kobe bryant	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string num_blocks ) ) ( string <= ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_blocks ) ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )
players with less than three fould per game over the season players with the fewers	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string num_fouls ) ) ( string < ) ( call SW.ensureNumericEntity ( number 3 foul ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )
what player plays the same position as kobe bryant	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string position ) ( string = ) ( call SW.getProperty ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string position ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )
what player had the same amount of assists as kobe bryant	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string num_assists ) ( string = ) ( call SW.getProperty ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_assists ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )
how many fouls does kobe bryant average when hes played at least 3 games in a season	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_games_played ) ( string = ) ( number 3 game ) ) ( string num_fouls ) ) )
which players arent point guards	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string position ) ( string ! = ) en.position.point_guard ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )
how many fouls does kobe bryant have at point guard	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string position ) ( string = ) en.position.point_guard ) ( string num_fouls ) ) )
what position did kobe bryant play when his all season points equaled 3	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_points ) ( string = ) ( number 3 point ) ) ( string position ) ) )
how many total points did kobe bryant have in the 2004 season	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string season ) ( string = ) ( date 2004 -1 -1 ) ) ( string num_points ) ) )
which player has played the most positions	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.countSuperlative ( var s ) ( string max ) ( string position ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )
who has had the same or more steals as kobe bryant	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string num_steals ) ) ( string >= ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_steals ) ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )
what position did kobe bryant play in 2004	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string season ) ( string = ) ( date 2004 -1 -1 ) ) ( string position ) ) )
number of fouls of kobe bryant who has 3 blocks	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_blocks ) ( string = ) ( number 3 block ) ) ( string num_fouls ) ) )
which player tied kobe bryants highest seasonal point score in a single season	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string num_points ) ) ( string <= ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_points ) ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )
how many games did kobe bryant have three turnovers over the season	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_turnovers ) ( string = ) ( number 3 turnover ) ) ( string num_games_played ) ) )
player whose number of assists over a season is same as that of player kobe bryant over a season	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string num_assists ) ( string = ) ( call SW.getProperty ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_assists ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )
what player has no more than three allseason blocks	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string num_blocks ) ) ( string <= ) ( call SW.ensureNumericEntity ( number 3 block ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )
what position does kobe bryant who has three steals play	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_steals ) ( string = ) ( number 3 steal ) ) ( string position ) ) )
number of blocks over a season of player kobe bryant who has 3 fouls over a season	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_fouls ) ( string = ) ( number 3 foul ) ) ( string num_blocks ) ) )
what player had 3 or less turnovers	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string num_turnovers ) ) ( string <= ) ( call SW.ensureNumericEntity ( number 3 turnover ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )
which player has more points per season than kobe bryant	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string num_points ) ) ( string > ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_points ) ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )
how many assists did kobe bryant of the lakers have	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string team ) ( string = ) en.team.lakers ) ( string num_assists ) ) )
what player had equal or fewer assists than kobe bryant	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string num_assists ) ) ( string <= ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_assists ) ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )
what is the number of the position	( call SW.listValue ( call .size ( call SW.getProperty ( call SW.singleton en.position ) ( string ! type ) ) ) )
how many steals did kobe bryant have during the season when averaging three assists	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_assists ) ( string = ) ( number 3 assist ) ) ( string num_steals ) ) )
name the other players in kobe bryants team	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string team ) ( string = ) ( call SW.getProperty ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string team ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )
which player averages more turnovers each season than kobe bryant	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string num_turnovers ) ) ( string > ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_turnovers ) ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )
how many assists can kobe bryant make in seasons with only 3 games played	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_games_played ) ( string = ) ( number 3 game ) ) ( string num_assists ) ) )
what player didnt play 3 games	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string num_games_played ) ( string ! = ) ( number 3 game ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )
what players made more steals than kob bryant made over a season	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string num_blocks ) ) ( string > ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_blocks ) ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )
who has had more than 3 assists	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string num_assists ) ) ( string > ) ( call SW.ensureNumericEntity ( number 3 assist ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )
who has had the same or more assists than kobe bryant	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string num_assists ) ) ( string >= ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_assists ) ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )
which player has the minimum number of steals	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.superlative ( var s ) ( string min ) ( call SW.ensureNumericProperty ( string num_steals ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )
how many rebounds and assists does kobe bryant have over a season	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_assists ) ( string = ) ( number 3 assist ) ) ( string num_rebounds ) ) )
what players scored as many points as kobe bryant over all seasons	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string num_points ) ( string = ) ( call SW.getProperty ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_points ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )
how many points does kobe bryant have on average by game 3 in a season	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_games_played ) ( string = ) ( number 3 game ) ) ( string num_points ) ) )
how many steals did kobe bryant make over the season	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_games_played ) ( string = ) ( number 3 game ) ) ( string num_steals ) ) )
during the season in which his point tally was 3 how many games was kobe bryant in	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_points ) ( string = ) ( number 3 point ) ) ( string num_games_played ) ) )
what player had more blocks than kobe bryant whose number of blocks is 3	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_blocks ) ( string = ) ( number 3 block ) ) ( string season ) ) )
player with less than 3 turnovers over a season	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string num_turnovers ) ) ( string < ) ( call SW.ensureNumericEntity ( number 3 turnover ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )
name a player who assists over a single season is at least the same as kobe bryants	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string num_assists ) ) ( string <= ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_assists ) ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )
what player had more blocks all season than kobe bryant	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string num_blocks ) ) ( string > ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_blocks ) ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )
what is the number of the team	( call SW.listValue ( call .size ( call SW.getProperty ( call SW.singleton en.team ) ( string ! type ) ) ) )
rebounds by kobe bryant over all seasons as point guard	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string position ) ( string = ) en.position.point_guard ) ( string num_rebounds ) ) )
how many steals kob bryant made in the season in which he played in los angeles lakers team	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string team ) ( string = ) en.team.lakers ) ( string num_steals ) ) )
when did kobe bryant play	( call SW.listValue ( call SW.getProperty ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string season ) ) )
are there players whose point scores in any one season are less than the total point scores of kobe bryant	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string num_points ) ) ( string < ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_points ) ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )
what players made more rebounds than kob bryant over a season	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string num_rebounds ) ) ( string > ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_rebounds ) ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )
which player has more points than kobe bryant	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string num_points ) ) ( string > ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_points ) ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )
which team did kobe bryant have 3 steals for	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_steals ) ( string = ) ( number 3 steal ) ) ( string team ) ) )
player with smallest number of assists over a season	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.superlative ( var s ) ( string min ) ( call SW.ensureNumericProperty ( string num_assists ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )
how many points does kobe bryant average over a season	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string num_points ) ( string ! = ) ( number 3 point ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )
how many points kob bryant made in the season he made 3 turnovers	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_turnovers ) ( string = ) ( number 3 turnover ) ) ( string num_points ) ) )
how many fouls did kobe bryant have as point guard	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string position ) ( string = ) en.position.point_guard ) ( string num_fouls ) ) )
how many allseason rebounds did kobe bryant have as a los angeles laker	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string team ) ( string = ) en.team.lakers ) ( string num_rebounds ) ) )
what position does kobe bryant play	( call SW.listValue ( call SW.getProperty ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string position ) ) )
what seasons did kobe bryant play for the la lakers	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string team ) ( string = ) en.team.lakers ) ( string season ) ) )
for the season in which he was responsible for 3 blocks how many fouls did kobe bryant commit	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_blocks ) ( string = ) ( number 3 block ) ) ( string num_fouls ) ) )
which player plays the position of point guard or forward	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string position ) ( string = ) ( call SW.concat en.position.point_guard en.position.forward ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )
which player has the most assists over a season other than kobe bryant	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string num_assists ) ) ( string > ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_assists ) ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )
what players had less than 3 games played over all seasons	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string num_games_played ) ) ( string < ) ( call SW.ensureNumericEntity ( number 3 game ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )
what is the number of assists by player kobe bryant over the season	( call SW.listValue ( call SW.getProperty ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_assists ) ) )
in which team did kobe bryant play in season 2004	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string season ) ( string = ) ( date 2004 -1 -1 ) ) ( string team ) ) )
how many turnovers has kobe bryant had	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string position ) ( string = ) en.position.point_guard ) ( string num_turnovers ) ) )
who has played fewer than 3 games so far this season	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string num_games_played ) ( string ! = ) ( number 3 game ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )
which players have been on less than two teams	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.countComparative ( var s ) ( string team ) ( string < ) ( number 2 ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )
how many blocks has kobe bryant achieved in seasons with at least 3 games played	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_games_played ) ( string = ) ( number 3 game ) ) ( string num_blocks ) ) )
what is the number of games played by kobe bryant whose team is los angeles lakers over the season	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string team ) ( string = ) en.team.lakers ) ( string num_games_played ) ) )
players with a total amount of blocks in a season equal to the most blocks in a season for kobe bryant	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string num_blocks ) ) ( string <= ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_blocks ) ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )
what team does kobe bryant play for	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string position ) ( string = ) en.position.point_guard ) ( string team ) ) )
how many points did kobe score while playing for the lakers	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string team ) ( string = ) en.team.lakers ) ( string num_points ) ) )
what player plays either point guard or forward	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string position ) ( string = ) ( call SW.concat en.position.point_guard en.position.forward ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )
what team is kobe bryant on	( call SW.listValue ( call SW.getProperty ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string team ) ) )
which player has the minimum number of blocks of kobebryant	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string num_blocks ) ) ( string >= ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_blocks ) ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )
who has the most points	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.superlative ( var s ) ( string max ) ( call SW.ensureNumericProperty ( string num_points ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )
note the players whose total number of rebounds in any one given season is more than 3	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string num_rebounds ) ) ( string > ) ( call SW.ensureNumericEntity ( number 3 rebound ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )
which player has played for the fewest teams	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.countSuperlative ( var s ) ( string min ) ( string team ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )
how many all season rebounds did kobe bryant have when his turnovers equaled 3	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_turnovers ) ( string = ) ( number 3 turnover ) ) ( string num_rebounds ) ) )
what position is kobe bryant	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_blocks ) ( string = ) ( number 3 block ) ) ( string position ) ) )
what is the number of rebounds by kobe bryant over the season	( call SW.listValue ( call SW.getProperty ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_rebounds ) ) )
how many fouls did kobe bryant have this season	( call SW.listValue ( call SW.getProperty ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_fouls ) ) )
in how many games did kobe bryant make 3 fouls	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_fouls ) ( string = ) ( number 3 foul ) ) ( string num_games_played ) ) )
what position was kobe bryant playing when he had the season in which he had 3 steals	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_steals ) ( string = ) ( number 3 steal ) ) ( string position ) ) )
how many turnovers kob bryant made in the season he made 3 fouls	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_fouls ) ( string = ) ( number 3 foul ) ) ( string num_turnovers ) ) )
what player has fewer turnovers than kobe bryant in a season	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string num_turnovers ) ) ( string <= ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_turnovers ) ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )
what player had more steals than kobe bryant this season	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string num_steals ) ) ( string > ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_steals ) ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )
players that have more steals than kobe bryant over all seasons	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string num_steals ) ) ( string > ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_steals ) ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )
players with the same assist per game average as kobe bryant over a season	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string num_assists ) ( string = ) ( call SW.getProperty ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_assists ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )
in which season did kobe bryant score 3 points	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_points ) ( string = ) ( number 3 point ) ) ( string season ) ) )
what player has the largest number of all season fouls	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.superlative ( var s ) ( string max ) ( call SW.ensureNumericProperty ( string num_fouls ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )
player with not more blocks over a season than player kobe bryant over a season	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string num_blocks ) ) ( string <= ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_blocks ) ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )
team of player kobe bryant who has 3 rebounds over a season	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_rebounds ) ( string = ) ( number 3 rebound ) ) ( string team ) ) )
what players had more than 3 turnovers over all seasons	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string num_turnovers ) ) ( string > ) ( call SW.ensureNumericEntity ( number 3 turnover ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )
number of points over a season of player kobe bryant who has 3 assists over a season	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_assists ) ( string = ) ( number 3 assist ) ) ( string num_points ) ) )
which player has less than 3 fouls total in a season	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string num_fouls ) ( string ! = ) ( number 3 foul ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )
how many rebounds did kobe have in games where he scored three points	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_points ) ( string = ) ( number 3 point ) ) ( string num_rebounds ) ) )
who has the fewest assists per season	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.superlative ( var s ) ( string min ) ( call SW.ensureNumericProperty ( string num_assists ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )
what player had less than 3 blocks	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string num_blocks ) ) ( string < ) ( call SW.ensureNumericEntity ( number 3 block ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )
how many assists did kobe bryant have allseason when had also had 3 points	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_points ) ( string = ) ( number 3 point ) ) ( string num_assists ) ) )
how many blocks did kobe bryant have during the 04 season	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string season ) ( string = ) ( date 2004 -1 -1 ) ) ( string num_blocks ) ) )
how many steals does kobe get in seasons where hes got more than 3 steals	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_blocks ) ( string = ) ( number 3 block ) ) ( string num_steals ) ) )
players that did no play in 2004	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string season ) ( string ! = ) ( date 2004 -1 -1 ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )
during the season in which kobe bryant managed 3 assists how many games did he play in	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_assists ) ( string = ) ( number 3 assist ) ) ( string num_games_played ) ) )
what player gets more assists every season than kobe bryant	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string num_assists ) ) ( string > ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_assists ) ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )
season of player kobe bryant who is at point guard	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string position ) ( string = ) en.position.point_guard ) ( string season ) ) )
find a player with 3 or more steals in any one season	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string num_steals ) ) ( string >= ) ( call SW.ensureNumericEntity ( number 3 steal ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )
how many assists did kobe bryant have as point guard	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string position ) ( string = ) en.position.point_guard ) ( string num_assists ) ) )
players that have at least 3 blocks a season	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string num_blocks ) ) ( string >= ) ( call SW.ensureNumericEntity ( number 3 block ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )
what players all season assists totaled over 3	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string num_assists ) ) ( string > ) ( call SW.ensureNumericEntity ( number 3 assist ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )
players that play the same position as kobe bryant	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string position ) ( string = ) ( call SW.getProperty ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string position ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )
player with minimum 3 steals over a season	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string num_steals ) ) ( string >= ) ( call SW.ensureNumericEntity ( number 3 steal ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )
players that had the least amount of rebounds in a season	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.superlative ( var s ) ( string min ) ( call SW.ensureNumericProperty ( string num_rebounds ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )
how many blocks did kobe bryant have after 3 games	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_games_played ) ( string = ) ( number 3 game ) ) ( string num_blocks ) ) )
how many blocks did kobe bryant have over the season he also had three rebounds	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_rebounds ) ( string = ) ( number 3 rebound ) ) ( string num_blocks ) ) )
who has more blocks per season than kobe bryant	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string num_blocks ) ) ( string > ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_blocks ) ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )
how many points did kobe bryant score in 3 games	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_games_played ) ( string = ) ( number 3 game ) ) ( string num_points ) ) )
which player has the least number of points in this season	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.superlative ( var s ) ( string min ) ( call SW.ensureNumericProperty ( string num_points ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )
what is the number of turnovers by kobe bryant who made 3 points over the season	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_points ) ( string = ) ( number 3 point ) ) ( string num_turnovers ) ) )
what players had more than three fouls per game over the season	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string num_fouls ) ) ( string > ) ( call SW.ensureNumericEntity ( number 3 foul ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )
what player had 3 or more blocks	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string num_blocks ) ) ( string >= ) ( call SW.ensureNumericEntity ( number 3 block ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )
player who has less than 3 assists over a season	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string num_assists ) ) ( string < ) ( call SW.ensureNumericEntity ( number 3 assist ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )
how many steals kob bryant made in the season he made 3 assists	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_assists ) ( string = ) ( number 3 assist ) ) ( string num_steals ) ) )
how many steals per season does kobe bryant average when hes also got 3 rebounds	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_rebounds ) ( string = ) ( number 3 rebound ) ) ( string num_steals ) ) )
fouls by kobe bryant over all seasons with 3 games played	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_games_played ) ( string = ) ( number 3 game ) ) ( string num_fouls ) ) )
name the season in which kobe bryants total point score was 3	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_points ) ( string = ) ( number 3 point ) ) ( string num_points ) ) )
what position did kobe bryant play in the 2004 season	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string season ) ( string = ) ( date 2004 -1 -1 ) ) ( string position ) ) )
during the season kobe bryant committed 3 steals how many fouls did he have	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_steals ) ( string = ) ( number 3 steal ) ) ( string num_fouls ) ) )
which players had fewer than 3 turnovers in a season	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string num_turnovers ) ) ( string < ) ( call SW.ensureNumericEntity ( number 3 turnover ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )
which player has a minimum of three steals	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string num_steals ) ) ( string >= ) ( call SW.ensureNumericEntity ( number 3 steal ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )
players who played more than 3 games over a season	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string num_games_played ) ) ( string > ) ( call SW.ensureNumericEntity ( number 3 game ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )
name a player who has had fewer steals this season than kobe bryant	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string num_steals ) ) ( string < ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_steals ) ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )
player whose assists over a season is at most 3	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string num_assists ) ) ( string <= ) ( call SW.ensureNumericEntity ( number 3 assist ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )
how many rebounds did kobe bryant make in 2004	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string season ) ( string = ) ( date 2004 -1 -1 ) ) ( string num_rebounds ) ) )
how many rebounds does kobe bryant have each season as a laker	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string team ) ( string = ) en.team.lakers ) ( string num_rebounds ) ) )
what position was kobe bryant in when he made 3 fouls in a season	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_fouls ) ( string = ) ( number 3 foul ) ) ( string position ) ) )
player kobe bryants number of rebounds over a season	( call SW.listValue ( call SW.getProperty ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_rebounds ) ) )
team of player kobe bryant 2004 season	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string season ) ( string = ) ( date 2004 -1 -1 ) ) ( string team ) ) )
players with less and more than 3 rebounds over all seasons	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string num_rebounds ) ( string ! = ) ( number 3 rebound ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )
which player scored less than 3 points in a full season	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string num_points ) ) ( string < ) ( call SW.ensureNumericEntity ( number 3 point ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )
name players with turnover amounts in any one season that are less than the turnover amounts attributable to kobe bryant in any one season	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string num_turnovers ) ) ( string < ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_turnovers ) ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )
how many points kob bryant made in the season in which he played for los angeles lakers	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string team ) ( string = ) en.team.lakers ) ( string num_points ) ) )
which player has the fewest allseason blocks	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.superlative ( var s ) ( string min ) ( call SW.ensureNumericProperty ( string num_blocks ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )
how many rebounds did kobe bryant have who played in three games	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_games_played ) ( string = ) ( number 3 game ) ) ( string num_rebounds ) ) )
player who made less than 4 blocks over a season	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string num_blocks ) ) ( string <= ) ( call SW.ensureNumericEntity ( number 3 block ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )
which players did not play in 2004	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string season ) ( string ! = ) ( date 2004 -1 -1 ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )
players who had the same number of fouls in a season that kobe bryant had	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string num_fouls ) ( string = ) ( call SW.getProperty ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_fouls ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )
how many turnovers did kobebryant get in 2004	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string season ) ( string = ) ( date 2004 -1 -1 ) ) ( string num_turnovers ) ) )
what players had 3 or more assists over all seasons	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string num_assists ) ) ( string > ) ( call SW.ensureNumericEntity ( number 3 assist ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )
what player played in more games over a season than kobe bryant	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string num_games_played ) ) ( string > ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_games_played ) ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )
what players had less blocks than kobe bryant over all seasons	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string num_blocks ) ) ( string < ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_blocks ) ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )
how many steals did kobe bryant make over the season when made only 3 turnovers	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_turnovers ) ( string = ) ( number 3 turnover ) ) ( string num_steals ) ) )
in which seson did kobe get 3 steals	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_steals ) ( string = ) ( number 3 steal ) ) ( string season ) ) )
what players made more than 3 assists over a season	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string num_steals ) ) ( string > ) ( call SW.ensureNumericEntity ( number 3 steal ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )
how many blocks did kobe bryant make during seasons where he made 3 assists	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_assists ) ( string = ) ( number 3 assist ) ) ( string num_blocks ) ) )
which player had the fewest blocks in a season	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.superlative ( var s ) ( string min ) ( call SW.ensureNumericProperty ( string num_blocks ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )
either kobe bryant or lebron james	( call SW.listValue ( call SW.concat en.player.kobe_bryant en.player.lebron_james ) )
what player is the most versatile and plays the most number of positions	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.countSuperlative ( var s ) ( string max ) ( string position ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )
what players made less points than kob bryant over a season	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string num_points ) ) ( string < ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_points ) ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )
find those players whose tally of games participated in is smaller than the number of games in which kobe bryant has had game time in	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string num_games_played ) ) ( string < ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_games_played ) ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )
how many rebounds did kobe bryant have for the los angeles lakers	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string team ) ( string = ) en.team.lakers ) ( string num_rebounds ) ) )
who has played the fewest games in a season	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.superlative ( var s ) ( string min ) ( call SW.ensureNumericProperty ( string num_games_played ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )
which player consistently has more steals per season than kobe bryant	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string num_steals ) ) ( string > ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_steals ) ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )
who has more than 3 turnovers this season	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string num_turnovers ) ) ( string < ) ( call SW.ensureNumericEntity ( number 3 turnover ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )
player whose number of fouls over a season is same as that of player kobe bryant over a season	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string num_fouls ) ( string = ) ( call SW.getProperty ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_fouls ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )
what player had at most 3 games allseason	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string num_games_played ) ) ( string <= ) ( call SW.ensureNumericEntity ( number 3 game ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )
how many turnovers did kobe bryant who had three rebounds have during the season	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_rebounds ) ( string = ) ( number 3 rebound ) ) ( string num_turnovers ) ) )
to which team does kobe bryant belong who scored 3 points	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_points ) ( string = ) ( number 3 point ) ) ( string team ) ) )
what players had equal or more assists than kobe bryant over all seasons	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string num_assists ) ) ( string >= ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_assists ) ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )
number of fouls over a season of player kobe bryant who has 3 steals over a season	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_steals ) ( string = ) ( number 3 steal ) ) ( string num_fouls ) ) )
players with assists not equal to three in a season	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string num_assists ) ( string ! = ) ( number 3 assist ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )
name a player with less than 3 assists per season	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string num_assists ) ) ( string < ) ( call SW.ensureNumericEntity ( number 3 assist ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )
who is better kobe bryant or lebron james	( call SW.listValue ( call SW.concat en.player.kobe_bryant en.player.lebron_james ) )
how many games has kobe bryant played	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string season ) ( string = ) ( date 2004 -1 -1 ) ) ( string num_games_played ) ) )
while he was point guard find the number of games played by kobe bryant in the same season	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string position ) ( string = ) en.position.point_guard ) ( string num_games_played ) ) )
what year did kobe bryant have three rebounds	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_rebounds ) ( string = ) ( number 3 rebound ) ) ( string season ) ) )
how many turnovers did kobe bryant have when he had 3 steals	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_steals ) ( string = ) ( number 3 steal ) ) ( string num_turnovers ) ) )
which player is it kobe bryant or lebron james	( call SW.listValue ( call SW.concat en.player.kobe_bryant en.player.lebron_james ) )
during the season in which kobe bryant had 3 turnovers how many assists were attributable to him	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_turnovers ) ( string = ) ( number 3 turnover ) ) ( string num_assists ) ) )
whos made the most assists from the start of the season	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.superlative ( var s ) ( string max ) ( call SW.ensureNumericProperty ( string num_assists ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )
name the player who did not have three fouls in the season	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string num_fouls ) ( string ! = ) ( number 3 foul ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )
which year did kobe bryant play point guard	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string position ) ( string = ) en.position.point_guard ) ( string season ) ) )
number of blocks over a season of player kobe bryant who has 3 points over a season	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_points ) ( string = ) ( number 3 point ) ) ( string num_blocks ) ) )
which player has been in fewer games than kobe bryant	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string num_games_played ) ) ( string < ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_games_played ) ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )
who has had less turnovers than kobe bryant	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string num_turnovers ) ) ( string < ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_turnovers ) ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )
how many points in a season did kobe bryant have when he had only three assists	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_assists ) ( string = ) ( number 3 assist ) ) ( string num_points ) ) )
what players have played in the same amount or more games than kobe this season	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string num_games_played ) ) ( string >= ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_games_played ) ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )
number of steals over a season of player kobe bryant from team los angeles lakers	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string team ) ( string = ) en.team.lakers ) ( string num_steals ) ) )
what players have more than 3 turnovers over all seasons	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string num_turnovers ) ) ( string > ) ( call SW.ensureNumericEntity ( number 3 turnover ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )
how many assists were got by kobe bryant who belonged to the los angeles team	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string team ) ( string = ) en.team.lakers ) ( string num_assists ) ) )
what position was kobe player when he had three assists	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_assists ) ( string = ) ( number 3 assist ) ) ( string position ) ) )
how many blocks did kobe bryant have in a game where he had three turnovers	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_turnovers ) ( string = ) ( number 3 turnover ) ) ( string num_blocks ) ) )
what players have had 3 or more rebounds	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string num_rebounds ) ) ( string >= ) ( call SW.ensureNumericEntity ( number 3 rebound ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )
what position did kobe bryant play	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_points ) ( string = ) ( number 3 point ) ) ( string position ) ) )
players who had an equal amount of assists in a season to that of kobe bryants lowest assists total	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string num_assists ) ) ( string >= ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_assists ) ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )
note those players who accrued a total of points in any one season totalling more than 3	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string num_points ) ) ( string > ) ( call SW.ensureNumericEntity ( number 3 point ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )
player with not less than 3 points over a season	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string num_points ) ) ( string <= ) ( call SW.ensureNumericEntity ( number 3 point ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )
who has had more or less than 3 turnovers	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string num_turnovers ) ( string ! = ) ( number 3 turnover ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )
what position does kobe bryant play when hes got exactly 3 assists in a season	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_assists ) ( string = ) ( number 3 assist ) ) ( string position ) ) )
what is the number of blocks by kobe bryant who made 3 rebounds over the season	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_rebounds ) ( string = ) ( number 3 rebound ) ) ( string num_blocks ) ) )
who has played less than 3 games this season	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string num_games_played ) ) ( string < ) ( call SW.ensureNumericEntity ( number 3 game ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )
which player has more rebounds than kobe bryant	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string num_rebounds ) ) ( string > ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_rebounds ) ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )
name a player who did not have exactly three assists in any given season	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string num_assists ) ( string ! = ) ( number 3 assist ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )
find those players with point totals in any one season equalling at least 3	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string num_points ) ) ( string >= ) ( call SW.ensureNumericEntity ( number 3 point ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )
which player played more number of games over a season	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.superlative ( var s ) ( string max ) ( call SW.ensureNumericProperty ( string num_games_played ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )
players who have less than three steals in a season	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string num_steals ) ) ( string < ) ( call SW.ensureNumericEntity ( number 3 steal ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )
what season did kobe bryant have 3 turnovers	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_turnovers ) ( string = ) ( number 3 turnover ) ) ( string season ) ) )
teams kobe bryant plays for	( call SW.listValue ( call SW.getProperty ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string team ) ) )
how many points has kobe bryant gotten in a season	( call SW.listValue ( call SW.getProperty ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_points ) ) )
how many assists did kobe bryant have when he made three turnovers	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_turnovers ) ( string = ) ( number 3 turnover ) ) ( string num_assists ) ) )
who has had the same amount or less of assists as kobe bryant	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string num_assists ) ) ( string <= ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_assists ) ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )
what players have had less steals than kobe bryant	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string num_steals ) ) ( string < ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_steals ) ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )
who has had the least assists	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.superlative ( var s ) ( string min ) ( call SW.ensureNumericProperty ( string num_assists ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )
how many players acquired less or more that 3 turnovers	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string num_turnovers ) ( string ! = ) ( number 3 turnover ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )
how many players are there total	( call SW.listValue ( call .size ( call SW.getProperty ( call SW.singleton en.player ) ( string ! type ) ) ) )
which player had the fewest rebounds	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.superlative ( var s ) ( string min ) ( call SW.ensureNumericProperty ( string num_rebounds ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )
during kobe bryants time with the lakers how many assists has he averaged per season	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string team ) ( string = ) en.team.lakers ) ( string num_assists ) ) )
name the player with fewer than three points	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string num_points ) ) ( string < ) ( call SW.ensureNumericEntity ( number 3 point ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )
find players whose total number of rebounds in a given season is more than the number of rebounds made in a season by kobe bryant	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string num_rebounds ) ) ( string > ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_rebounds ) ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )
which player has at least as many points in a season as kobe bryant	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string num_points ) ) ( string >= ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_points ) ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )
how long has kobe bryant played with more than 3 assists per season	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_assists ) ( string = ) ( number 3 assist ) ) ( string season ) ) )
during the season in which kobe bryant had 3 turnovers how many blocks was responsible for	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_turnovers ) ( string = ) ( number 3 turnover ) ) ( string num_blocks ) ) )
how many games did kobe bryant play during a season	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_blocks ) ( string = ) ( number 3 block ) ) ( string num_games_played ) ) )
which position did kobe bryant play in 2004	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string season ) ( string = ) ( date 2004 -1 -1 ) ) ( string position ) ) )
whos got the same number of fouls as kobe each season theyve played	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string num_fouls ) ( string = ) ( call SW.getProperty ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_fouls ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )
which player has played for the most teams	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.countSuperlative ( var s ) ( string max ) ( string team ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )
how many fouls did kobe bryant have when he had 3 blocks	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_blocks ) ( string = ) ( number 3 block ) ) ( string num_fouls ) ) )
how many players have less than 3 steals on them in a season	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string num_steals ) ) ( string < ) ( call SW.ensureNumericEntity ( number 3 steal ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )
what players had more steals than kobe bryant over all seasons	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string num_steals ) ) ( string > ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_steals ) ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )
what was the number of turnovers for player kobe bryant when he had just three steals in a season	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_steals ) ( string = ) ( number 3 steal ) ) ( string num_turnovers ) ) )
who made turnovers same as the least turnovers made by kob bryant over a season	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string num_turnovers ) ) ( string >= ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_turnovers ) ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )
name players with a single position	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.countComparative ( var s ) ( string position ) ( string < ) ( number 2 ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )
name a player who played at least as many games as kobe bryant	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string num_games_played ) ) ( string >= ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_games_played ) ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )
what is the position of kobe bryant in season 2004	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string season ) ( string = ) ( date 2004 -1 -1 ) ) ( string position ) ) )
name a player with fewer than three fouls	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string num_fouls ) ) ( string < ) ( call SW.ensureNumericEntity ( number 3 foul ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )
name the player who has played at most 3 games over this season	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string num_games_played ) ) ( string <= ) ( call SW.ensureNumericEntity ( number 3 game ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )
what position did kobe bryant have 3 assists as	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_assists ) ( string = ) ( number 3 assist ) ) ( string position ) ) )
what players all season blocks were no less than 3	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string num_blocks ) ) ( string >= ) ( call SW.ensureNumericEntity ( number 3 block ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )
how many games did kobe bryant play in the 2004 season	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string season ) ( string = ) ( date 2004 -1 -1 ) ) ( string num_games_played ) ) )
what player had the same amount of steals in a season or less than kobe bryant	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string num_assists ) ) ( string <= ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_assists ) ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )
name a player with more than three rebounds this season	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string num_rebounds ) ) ( string > ) ( call SW.ensureNumericEntity ( number 3 rebound ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )
what players have played less than two positions	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.countComparative ( var s ) ( string position ) ( string < ) ( number 2 ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )
points of kob bryant over a season in which he played in point guard	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string position ) ( string = ) en.position.point_guard ) ( string num_points ) ) )
how many points did kobe bryant have when he had 3 steals	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_steals ) ( string = ) ( number 3 steal ) ) ( string num_points ) ) )
how many games will kobe bryant play this coming season	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_points ) ( string = ) ( number 3 point ) ) ( string num_games_played ) ) )
which player has a maximum of 3 fouls	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string num_fouls ) ) ( string <= ) ( call SW.ensureNumericEntity ( number 3 foul ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )
what is the team of kobe  bryant who played 3 fouls	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_fouls ) ( string = ) ( number 3 foul ) ) ( string team ) ) )
how many assists did kobe byrant have during a season	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_rebounds ) ( string = ) ( number 3 rebound ) ) ( string num_assists ) ) )
player that had more rebounds than kobe bryant this season	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string num_rebounds ) ) ( string <= ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_rebounds ) ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )
how many blocks were made by  kobe bryant	( call SW.listValue ( call SW.getProperty ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_blocks ) ) )
how many rebounds can kobe bryant make in one season	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_steals ) ( string = ) ( number 3 steal ) ) ( string num_rebounds ) ) )
name a player who did not play in 2004	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string season ) ( string ! = ) ( date 2004 -1 -1 ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )
player with most points over a season	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.superlative ( var s ) ( string max ) ( call SW.ensureNumericProperty ( string num_points ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )
who made the most turnovers over all seasons	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.superlative ( var s ) ( string max ) ( call SW.ensureNumericProperty ( string num_turnovers ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )
name a player with at least three rebounds in the season	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string num_rebounds ) ) ( string >= ) ( call SW.ensureNumericEntity ( number 3 rebound ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )
which player has the largest number of assists over the season	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.superlative ( var s ) ( string max ) ( call SW.ensureNumericProperty ( string num_assists ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )
players whose number of points is less than 3 over a season	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string num_points ) ) ( string < ) ( call SW.ensureNumericEntity ( number 3 point ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )
players that have the same number of rebounds as kobe bryant over all seasons	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string num_rebounds ) ) ( string >= ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_rebounds ) ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )
what other players play the same position as kobe bryant	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string position ) ( string = ) ( call SW.getProperty ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string position ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )
which player had more fouls than kobe bryant	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string num_fouls ) ) ( string > ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_fouls ) ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )
how many rebounds kob bryant made in the season he played for los angeles lakers	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string team ) ( string = ) en.team.lakers ) ( string num_rebounds ) ) )
what player has no fewer allseason steals than kobe bryant	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string num_steals ) ) ( string >= ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_steals ) ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )
what was the position of kobe bryant	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string position ) ( string = ) ( call SW.getProperty ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string position ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )
player who have played fewer than 3 games in a season	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string num_games_played ) ) ( string < ) ( call SW.ensureNumericEntity ( number 3 game ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )
player who has less than 3 blocks over a season	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string num_blocks ) ) ( string < ) ( call SW.ensureNumericEntity ( number 3 block ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )
how many rebounds does kobe bryant have a season with 3 turnovers	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_turnovers ) ( string = ) ( number 3 turnover ) ) ( string num_rebounds ) ) )
how many turnovers did kobe bryant have when he had three blocks	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_blocks ) ( string = ) ( number 3 block ) ) ( string num_turnovers ) ) )
what position did kobe bryant play when making 3 allseason steals	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_steals ) ( string = ) ( number 3 steal ) ) ( string position ) ) )
how many points had kobe bryant scored after 3 rebounds	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_rebounds ) ( string = ) ( number 3 rebound ) ) ( string num_points ) ) )
what team did kobe bryant play for in 2004	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string season ) ( string = ) ( date 2004 -1 -1 ) ) ( string team ) ) )
how many fouls did kobe bryant get called for the season he had 3 assists	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_assists ) ( string = ) ( number 3 assist ) ) ( string num_fouls ) ) )
who has 3 or less fouls	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string num_fouls ) ) ( string <= ) ( call SW.ensureNumericEntity ( number 3 foul ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )
which player had played more fouls than kobe bryant	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string num_fouls ) ) ( string > ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string num_fouls ) ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )
who has gotten 3 or less blocks	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string num_blocks ) ) ( string <= ) ( call SW.ensureNumericEntity ( number 3 block ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )
player with not more than 3 rebounds over a season	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string num_rebounds ) ) ( string <= ) ( call SW.ensureNumericEntity ( number 3 rebound ) ) ) ) ( call SW.domain ( string player ) ) ) ( string player ) ) )
during his los angeles lakers season how many rebounds did kobe bryant have	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.player.kobe_bryant ( call SW.reverse ( string player ) ) ) ( string team ) ( string = ) en.team.lakers ) ( string num_rebounds ) ) )
select a brick that is at least as wide as brick 1 is long	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string width ) ) ( string >= ) ( call SW.ensureNumericEntity ( call SW.getProperty en.block.block1 ( string length ) ) ) ) )
find the block with the most shapes	( call SW.listValue ( call SW.countSuperlative ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string max ) ( string shape ) ) )
block whose length is at least 3 inches or 6 inches	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string length ) ) ( string >= ) ( call SW.ensureNumericEntity ( call SW.concat ( number 3 en.inch ) ( number 6 en.inch ) ) ) ) )
find me all blocks below 3 inch long blocks	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string below ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string length ) ( string = ) ( number 3 en.inch ) ) ) )
what block is at least as long as block 1s height	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string length ) ) ( string >= ) ( call SW.ensureNumericEntity ( call SW.getProperty en.block.block1 ( string height ) ) ) ) )
select a special pyramid block	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string shape ) ( string = ) en.shape.pyramid ) ( string is_special ) ) )
name a block that has block 1 on its left	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.reverse ( string left ) ) ( string = ) en.block.block1 ) )
find the pyramidshaped block below block 1	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string below ) ( string = ) en.block.block1 ) ( string shape ) ( string = ) en.shape.pyramid ) )
block that has the largest height	( call SW.listValue ( call SW.superlative ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string max ) ( call SW.ensureNumericProperty ( string height ) ) ) )
find me all blocks at most as wide as block 1	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string width ) ) ( string <= ) ( call SW.ensureNumericEntity ( call SW.getProperty en.block.block1 ( string length ) ) ) ) )
what block is left of block 1 and 3 inches in length	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string length ) ( string = ) ( number 3 en.inch ) ) ( call SW.reverse ( string left ) ) ( string = ) en.block.block1 ) )
select brick whose length is more than the width of block 1	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string length ) ) ( string <= ) ( call SW.ensureNumericEntity ( call SW.getProperty en.block.block1 ( string width ) ) ) ) )
block that is shorter than block 1	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string length ) ) ( string < ) ( call SW.ensureNumericEntity ( call SW.getProperty en.block.block1 ( string length ) ) ) ) )
find me all blocks that blocks 1 or 2 is below	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.reverse ( string below ) ) ( string = ) ( call SW.concat en.block.block1 en.block.block2 ) ) )
find blocks above block 1 or block 2	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.reverse ( string below ) ) ( string = ) ( call SW.concat en.block.block1 en.block.block2 ) ) )
pyramid block right of block 1	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string shape ) ( string = ) en.shape.pyramid ) ( string right ) ( string = ) en.block.block1 ) )
find me all special blocks above block 1	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string is_special ) ) ( string above ) ( string = ) en.block.block1 ) )
find me all blocks with more than 2 blocks to the left of it	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.reverse ( string left ) ) ( string > ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ) )
block that is special and that is left of block 1	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string is_special ) ) ( string left ) ( string = ) en.block.block1 ) )
left and above block 1	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.reverse ( string right ) ) ( string = ) en.block.block1 ) ( string above ) ( string = ) en.block.block1 ) )
which block is below block that is at the right of block 1	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string below ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string right ) ( string = ) en.block.block1 ) ) )
is there a block that has only one block to the left of it	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string right ) ( string < ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ) )
which brick is higher than 3 inches	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string height ) ) ( string > ) ( call SW.ensureNumericEntity ( number 3 en.inch ) ) ) )
block is at the second left of block 1	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string left ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.reverse ( string right ) ) ( string = ) en.block.block1 ) ) )
find me the block with the least colors	( call SW.listValue ( call SW.countSuperlative ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string min ) ( string color ) ) )
block two spaces above block 1	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string above ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string above ) ( string = ) en.block.block1 ) ) )
find me a block with two blocks to the left of it	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.reverse ( string left ) ) ( string >= ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ) )
pyramid to right of block 1	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string shape ) ( string = ) en.shape.pyramid ) ( string right ) ( string = ) en.block.block1 ) )
find blocks with the length of block 1	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string length ) ( string = ) ( call SW.getProperty en.block.block1 ( string length ) ) ) )
find me a block below at least two blocks	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.reverse ( string above ) ) ( string >= ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ) )
find the blocks that have two shapes or less	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string shape ) ( string <= ) ( number 2 ) ) )
find a block that is at least the same height as block 1	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string height ) ) ( string >= ) ( call SW.ensureNumericEntity ( call SW.getProperty en.block.block1 ( string height ) ) ) ) )
what color is block 1	( call SW.listValue ( call SW.getProperty en.block.block1 ( string color ) ) )
which type of block has the most shapes	( call SW.listValue ( call SW.countSuperlative ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string max ) ( string shape ) ) )
block above less than two blocks	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string above ) ( string < ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ) )
which brick is at least 3 inches long	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string length ) ) ( string >= ) ( call SW.ensureNumericEntity ( number 3 en.inch ) ) ) )
block with pyramid shape at the right of block	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string right ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string shape ) ( string = ) en.shape.pyramid ) ) )
choose a block that is bigger than block 1	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string width ) ) ( string > ) ( call SW.ensureNumericEntity ( call SW.getProperty en.block.block1 ( string length ) ) ) ) )
select the block that block 1 is to the right and above	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.reverse ( string above ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.reverse ( string right ) ) ( string = ) en.block.block1 ) ) )
block above 3 inch block	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.reverse ( string below ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string height ) ( string = ) ( number 3 en.inch ) ) ) )
select all blocks whose length at a maximum of 6 inches	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string length ) ) ( string <= ) ( call SW.ensureNumericEntity ( call SW.concat ( number 3 en.inch ) ( number 6 en.inch ) ) ) ) )
multicolor block	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string color ) ( string > ) ( number 2 ) ) )
select block of length 3 or 6 inches	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string length ) ( string = ) ( call SW.concat ( number 3 en.inch ) ( number 6 en.inch ) ) ) )
find the block that is to the right of block 1 whose shape is also a pyramid	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string right ) ( string = ) en.block.block1 ) ( string shape ) ( string = ) en.shape.pyramid ) )
choose a block that is below and to the left of block 1	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string below ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string left ) ( string = ) en.block.block1 ) ) )
block left of 2 blocks	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string left ) ( string >= ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ) )
which block is wider than block 1 is long	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string width ) ) ( string > ) ( call SW.ensureNumericEntity ( call SW.getProperty en.block.block1 ( string length ) ) ) ) )
choose a block that is not pyramid shaped	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string shape ) ( string ! = ) en.shape.pyramid ) )
find me a block skinnier than block 1	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string width ) ) ( string < ) ( call SW.ensureNumericEntity ( call SW.getProperty en.block.block1 ( string width ) ) ) ) )
what is the length of block 1	( call SW.listValue ( call SW.getProperty en.block.block1 ( string length ) ) )
find me all the bricks at least 3 inches long	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string length ) ) ( string >= ) ( call SW.ensureNumericEntity ( number 3 en.inch ) ) ) )
what is the color of block 1	( call SW.listValue ( call SW.getProperty en.block.block1 ( string color ) ) )
block whose height is 3 inches and that is below block 1	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string height ) ( string = ) ( number 3 en.inch ) ) ( string below ) ( string = ) en.block.block1 ) )
find me all blocks that block 1 is left and under	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.reverse ( string left ) ) ( string = ) en.block.block1 ) ( call SW.reverse ( string below ) ) ( string = ) en.block.block1 ) )
find me the block that block 1 is to the right and above	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.reverse ( string above ) ) ( string = ) en.block.block1 ) ( string right ) ( string = ) en.block.block1 ) )
find me all blocks below 2 blocks	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string below ) ( string = ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ) )
block above most number of blocks	( call SW.listValue ( call SW.countSuperlative ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string max ) ( string above ) ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ) )
which brick is below no more than two bricks	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string below ) ( string <= ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ) )
what brick has more than 2 bricks below it	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.reverse ( string below ) ) ( string > ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ) )
find me all blocks below which block 1 is above	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.reverse ( string above ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string below ) ( string = ) en.block.block1 ) ) )
locate the pyramidshaped block	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string shape ) ( string = ) en.shape.pyramid ) ( string shape ) ( string = ) en.shape.pyramid ) )
find the total height of the blocks	( call SW.listValue ( call SW.aggregate ( string sum ) ( call SW.getProperty ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string height ) ) ) )
find me a block at most 6 inches wide	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string width ) ) ( string <= ) ( call SW.ensureNumericEntity ( call SW.concat ( number 3 en.inch ) ( number 6 en.inch ) ) ) ) )
block that is right of block 1 and that is right of block 1	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string right ) ( string = ) en.block.block1 ) ( string right ) ( string = ) en.block.block1 ) )
select the blocks on the right of and below block 1	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string right ) ( string = ) en.block.block1 ) ( call SW.reverse ( string above ) ) ( string = ) en.block.block1 ) )
find me all blocks that block 1 is above and right of	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.reverse ( string right ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string above ) ( string = ) en.block.block1 ) ) )
what block is 3 inches or less long	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string length ) ) ( string <= ) ( call SW.ensureNumericEntity ( number 3 en.inch ) ) ) )
block whose width is smaller than height of block 1	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string width ) ) ( string < ) ( call SW.ensureNumericEntity ( call SW.getProperty en.block.block1 ( string height ) ) ) ) )
what block is to the right of and below block 1	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.reverse ( string below ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.reverse ( string right ) ) ( string = ) en.block.block1 ) ) )
select the block below block 1 and block 2	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.reverse ( string above ) ) ( string = ) ( call SW.concat en.block.block1 en.block.block2 ) ) )
blocks of two or more colors	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string color ) ( string >= ) ( number 2 ) ) )
find me all 3 inch high special blocks	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string is_special ) ) ( string height ) ( string = ) ( number 3 en.inch ) ) )
find the block that has the smallest length	( call SW.listValue ( call SW.superlative ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string min ) ( call SW.ensureNumericProperty ( string length ) ) ) )
block below block one	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.reverse ( string above ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string below ) ( string = ) en.block.block1 ) ) )
which brick has a length shorter than the length of brick 1	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string length ) ) ( string < ) ( call SW.ensureNumericEntity ( call SW.getProperty en.block.block1 ( string length ) ) ) ) )
find the block with the fewest blocks to the left of it	( call SW.listValue ( call SW.countSuperlative ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string min ) ( string right ) ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ) )
select the special block that is to the right of block 1	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string right ) ( string = ) en.block.block1 ) ( string is_special ) ) )
block which does not have block 1 above	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.reverse ( string above ) ) ( string ! = ) en.block.block1 ) )
find me a pyramid or cube shaped block	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string shape ) ( string = ) ( call SW.concat en.shape.pyramid en.shape.cube ) ) )
find me all special blocks left of block 1	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.reverse ( string right ) ) ( string = ) en.block.block1 ) ( string is_special ) ) )
find me all blocks with the same width as block 1	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string length ) ( string = ) ( call SW.getProperty en.block.block1 ( string width ) ) ) )
pyramid right of block 1	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string shape ) ( string = ) en.shape.pyramid ) ( string right ) ( string = ) en.block.block1 ) )
find me all blocks at least 3 inches in width	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string width ) ) ( string >= ) ( call SW.ensureNumericEntity ( number 3 en.inch ) ) ) )
what brick is below a brick that is 3 inches long	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string below ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string length ) ( string = ) ( number 3 en.inch ) ) ) )
select all bricks right of block 1 or 2	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string right ) ( string = ) ( call SW.concat en.block.block1 en.block.block2 ) ) )
find me a block wider than 3 inches	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string width ) ) ( string > ) ( call SW.ensureNumericEntity ( number 3 en.inch ) ) ) )
find a block that is right of at least two blocks	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.reverse ( string right ) ) ( string >= ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ) )
what shape is brick 1	( call SW.listValue ( call SW.getProperty en.block.block1 ( string shape ) ) )
find the tallest block	( call SW.listValue ( call SW.superlative ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string max ) ( call SW.ensureNumericProperty ( string height ) ) ) )
which brick is below less than two bricks	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string below ) ( string < ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ) )
select the lower block that is 3 inches tall	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string below ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string height ) ( string = ) ( number 3 en.inch ) ) ) )
block right of more than two blocks	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.reverse ( string right ) ) ( string > ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ) )
find me all 3 inch wide blocks that is right of block 1	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string right ) ( string = ) en.block.block1 ) ( string width ) ( string = ) ( number 3 en.inch ) ) )
find me all blocks at most as tall as block 1	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string height ) ) ( string <= ) ( call SW.ensureNumericEntity ( call SW.getProperty en.block.block1 ( string width ) ) ) ) )
which block has a length smaller than block 1s width	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string length ) ) ( string < ) ( call SW.ensureNumericEntity ( call SW.getProperty en.block.block1 ( string width ) ) ) ) )
find me all blocks at most 3 inches long	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string length ) ) ( string <= ) ( call SW.ensureNumericEntity ( number 3 en.inch ) ) ) )
a 3 inch brick that is shaped like a pyramid	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string shape ) ( string = ) en.shape.pyramid ) ( string width ) ( string = ) ( number 3 en.inch ) ) )
find me the special blocks below block 1	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string below ) ( string = ) en.block.block1 ) ( string is_special ) ) )
choose a block that is right of a 3 inch brick	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string right ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string height ) ( string = ) ( number 3 en.inch ) ) ) )
find me all blocks below block 1 which block 1 is also below	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string below ) ( string = ) en.block.block1 ) ( call SW.reverse ( string below ) ) ( string = ) en.block.block1 ) )
block not below block 1	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.reverse ( string above ) ) ( string ! = ) en.block.block1 ) )
select the block that has a length of two inches above another block	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.reverse ( string above ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string length ) ( string = ) ( number 3 en.inch ) ) ) )
pyramid block rght of block 1	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string right ) ( string = ) en.block.block1 ) ( string shape ) ( string = ) en.shape.pyramid ) )
block that is below block that is below block 1	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string below ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string below ) ( string = ) en.block.block1 ) ) )
find me all blocks right of blocks 1 or 2	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.reverse ( string right ) ) ( string = ) ( call SW.concat en.block.block1 en.block.block2 ) ) )
what is the number of the block	( call SW.listValue ( call .size ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ) )
block that is above at most two block	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string above ) ( string <= ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ) )
select the block above the block to the right block 1	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.reverse ( string below ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string left ) ( string = ) en.block.block1 ) ) )
which brick is at least as long as brick 1 is wide	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string length ) ) ( string >= ) ( call SW.ensureNumericEntity ( call SW.getProperty en.block.block1 ( string width ) ) ) ) )
block that is left of block whose height is 3 inches	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string left ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string height ) ( string = ) ( number 3 en.inch ) ) ) )
block that is below the most number of block	( call SW.listValue ( call SW.countSuperlative ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string max ) ( string below ) ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ) )
find me all blocks 2 above block 1	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string above ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string above ) ( string = ) en.block.block1 ) ) )
which brick is to the left of less than two bricks	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string left ) ( string < ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ) )
get a 3inch long block below block 1	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string length ) ( string = ) ( number 3 en.inch ) ) ( call SW.reverse ( string above ) ) ( string = ) en.block.block1 ) )
block right of at least two block	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string right ) ( string >= ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ) )
select the 3 inch block below block 1	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string length ) ( string = ) ( number 3 en.inch ) ) ( string below ) ( string = ) en.block.block1 ) )
block with maximum two colors	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string color ) ( string <= ) ( number 2 ) ) )
find me all special blocks that is right of block 1	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string right ) ( string = ) en.block.block1 ) ( string is_special ) ) )
find the block of 3 inches height and placed in left	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.reverse ( string left ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string height ) ( string = ) ( number 3 en.inch ) ) ) )
find me all blocks with at most 2 colors	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string color ) ( string <= ) ( number 2 ) ) )
find a block to the left of block 1	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string left ) ( string = ) en.block.block1 ) ( string left ) ( string = ) en.block.block1 ) )
which brick is not 3 inches wide	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string width ) ( string ! = ) ( number 3 en.inch ) ) )
block above more than 2 blocks	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string above ) ( string > ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ) )
what is the total length of the blocks	( call SW.listValue ( call SW.aggregate ( string sum ) ( call SW.getProperty ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string length ) ) ) )
find the skinniest block	( call SW.listValue ( call SW.superlative ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string min ) ( call SW.ensureNumericProperty ( string width ) ) ) )
a brick which length is between 3 and 6 inches	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string length ) ) ( string < ) ( call SW.ensureNumericEntity ( call SW.concat ( number 3 en.inch ) ( number 6 en.inch ) ) ) ) )
block longer than width of block 1	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string length ) ) ( string > ) ( call SW.ensureNumericEntity ( call SW.getProperty en.block.block1 ( string width ) ) ) ) )
which brick is higher than 3 or 6 inches	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string height ) ) ( string > ) ( call SW.ensureNumericEntity ( call SW.concat ( number 3 en.inch ) ( number 6 en.inch ) ) ) ) )
select the least colorful brick	( call SW.listValue ( call SW.countSuperlative ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string min ) ( string color ) ) )
which block is the same length as block 1	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string length ) ( string = ) ( call SW.getProperty en.block.block1 ( string length ) ) ) )
3 inches long block	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string length ) ( string = ) ( number 3 en.inch ) ) )
block which is at the left of the block below block 1	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string left ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.reverse ( string above ) ) ( string = ) en.block.block1 ) ) )
find me all special blocks that is below	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.reverse ( string below ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string is_special ) ) ) )
find me all blocks with at least 2 shapes	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string shape ) ( string > ) ( number 2 ) ) )
what 3 inch block is below block 1	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string height ) ( string = ) ( number 3 en.inch ) ) ( call SW.reverse ( string above ) ) ( string = ) en.block.block1 ) )
block right of a block which is above block 1	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string right ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string above ) ( string = ) en.block.block1 ) ) )
is there a block beneath two other blocks	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.reverse ( string above ) ) ( string = ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ) )
below and left of block 1	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.reverse ( string above ) ) ( string = ) en.block.block1 ) ( call SW.reverse ( string right ) ) ( string = ) en.block.block1 ) )
what block is above the 3 inch high block	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string above ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string height ) ( string = ) ( number 3 en.inch ) ) ) )
find me all blocks no bigger than 3 inches	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string length ) ) ( string <= ) ( call SW.ensureNumericEntity ( number 3 en.inch ) ) ) )
what block is to the left of the least blocks	( call SW.listValue ( call SW.countSuperlative ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string min ) ( call SW.reverse ( string right ) ) ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ) )
what is the height of the block	( call SW.listValue ( call SW.aggregate ( string sum ) ( call SW.getProperty ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string height ) ) ) )
what is the average height of the blocks	( call SW.listValue ( call SW.aggregate ( string avg ) ( call SW.getProperty ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string height ) ) ) )
find me all the blocks left of 3 inch tall blocks	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string left ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string height ) ( string = ) ( number 3 en.inch ) ) ) )
block to the left of a block that block 1 is left of	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string left ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.reverse ( string left ) ) ( string = ) en.block.block1 ) ) )
what is the height of brick 1	( call SW.listValue ( call SW.getProperty en.block.block1 ( string height ) ) )
is it a pyramid or a cube	( call SW.listValue ( call SW.concat en.shape.pyramid en.shape.cube ) )
find me all 3 or 6 inch high blocks	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string height ) ( string = ) ( call SW.concat ( number 3 en.inch ) ( number 6 en.inch ) ) ) )
what block is 3 or less inches wide	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string width ) ) ( string <= ) ( call SW.ensureNumericEntity ( number 3 en.inch ) ) ) )
block whose length is at most length of block 1	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string length ) ) ( string <= ) ( call SW.ensureNumericEntity ( call SW.getProperty en.block.block1 ( string length ) ) ) ) )
dual colored block	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string color ) ( string > ) ( number 2 ) ) )
find a block at least 3 inches wide	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string width ) ) ( string >= ) ( call SW.ensureNumericEntity ( call SW.concat ( number 3 en.inch ) ( number 6 en.inch ) ) ) ) )
find me all blocks that is to the right of the least number of blocks	( call SW.listValue ( call SW.countSuperlative ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string min ) ( string right ) ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ) )
which brick is wider than brick 1 is wide	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string width ) ) ( string > ) ( call SW.ensureNumericEntity ( call SW.getProperty en.block.block1 ( string width ) ) ) ) )
what blocks have a height not equal to 3 inches	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string height ) ( string ! = ) ( number 3 en.inch ) ) )
select the block that is to the right of more than 2 blocks	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string right ) ( string > ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ) )
which pyramid blocks are to the right of block 1	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string right ) ( string = ) en.block.block1 ) ( string shape ) ( string = ) en.shape.pyramid ) )
what block is 3 tall and has block 1 on its left	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string height ) ( string = ) ( number 3 en.inch ) ) ( call SW.reverse ( string left ) ) ( string = ) en.block.block1 ) )
what block is longer than 3 inches	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string length ) ) ( string > ) ( call SW.ensureNumericEntity ( number 3 en.inch ) ) ) )
find me a block with equal or less width than block 1	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string width ) ) ( string <= ) ( call SW.ensureNumericEntity ( call SW.getProperty en.block.block1 ( string width ) ) ) ) )
find me a block smaller than 6 inches	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string width ) ) ( string < ) ( call SW.ensureNumericEntity ( call SW.concat ( number 3 en.inch ) ( number 6 en.inch ) ) ) ) )
the block that is equal to the length of block 1	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string length ) ) ( string <= ) ( call SW.ensureNumericEntity ( call SW.getProperty en.block.block1 ( string length ) ) ) ) )
find me all the blocks taller than block 1	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string height ) ) ( string > ) ( call SW.ensureNumericEntity ( call SW.getProperty en.block.block1 ( string height ) ) ) ) )
find the special block to the left of block 1	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string left ) ( string = ) en.block.block1 ) ( string is_special ) ) )
find a block taller than 3 inches	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string height ) ) ( string > ) ( call SW.ensureNumericEntity ( call SW.concat ( number 3 en.inch ) ( number 6 en.inch ) ) ) ) )
what block is above block 1 and has a height of 3 inches	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.reverse ( string above ) ) ( string = ) en.block.block1 ) ( string height ) ( string = ) ( number 3 en.inch ) ) )
which brick has two bricks below it	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.reverse ( string below ) ) ( string = ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ) )
find me all blocks left of block 1 or 2	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string left ) ( string = ) ( call SW.concat en.block.block1 en.block.block2 ) ) )
choose a special block that is below block 1	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string is_special ) ) ( string below ) ( string = ) en.block.block1 ) )
block right of pyramid block	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.reverse ( string left ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string shape ) ( string = ) en.shape.pyramid ) ) )
block above 1 block and left of 1 block	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.reverse ( string above ) ) ( string = ) en.block.block1 ) ( call SW.reverse ( string left ) ) ( string = ) en.block.block1 ) )
choose the most shapeless block	( call SW.listValue ( call SW.countSuperlative ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string min ) ( string shape ) ) )
choose the brick below brick 1 that is 3 inches long	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string length ) ( string = ) ( number 3 en.inch ) ) ( string below ) ( string = ) en.block.block1 ) )
block whose height is 3 inches and whose width is 3 inches	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string height ) ( string = ) ( number 3 en.inch ) ) ( string width ) ( string = ) ( number 3 en.inch ) ) )
find the block to the right of the block that is to the left of block 1	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string right ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.reverse ( string left ) ) ( string = ) en.block.block1 ) ) )
block to the left of block 1	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.reverse ( string left ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string left ) ( string = ) en.block.block1 ) ) )
block whose length is 3 inches	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string length ) ( string = ) ( number 3 en.inch ) ) )
find a block taller than block 1 is long	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string height ) ) ( string > ) ( call SW.ensureNumericEntity ( call SW.getProperty en.block.block1 ( string length ) ) ) ) )
choose a block no bigger than 3 inches	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string width ) ) ( string <= ) ( call SW.ensureNumericEntity ( number 3 en.inch ) ) ) )
find special blocks with block 1 above them	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string is_special ) ) ( call SW.reverse ( string above ) ) ( string = ) en.block.block1 ) )
which brick has no more than 2 colors	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string color ) ( string <= ) ( number 2 ) ) )
what block is as long as block 1 is wide	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string length ) ( string = ) ( call SW.getProperty en.block.block1 ( string width ) ) ) )
what block is above the 3 inch wide block	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string above ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string width ) ( string = ) ( number 3 en.inch ) ) ) )
what block is of 3 inches height and above block 1	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string height ) ( string = ) ( number 3 en.inch ) ) ( call SW.reverse ( string above ) ) ( string = ) en.block.block1 ) )
block above pyramid	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.reverse ( string above ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string shape ) ( string = ) en.shape.pyramid ) ) )
3 inches long block which has block 1 at left	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.reverse ( string left ) ) ( string = ) en.block.block1 ) ( string length ) ( string = ) ( number 3 en.inch ) ) )
find me all the blocks at least as long as block 1 is wide	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string length ) ) ( string >= ) ( call SW.ensureNumericEntity ( call SW.getProperty en.block.block1 ( string width ) ) ) ) )
find me all blocks with at least 2 colors	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string color ) ( string >= ) ( number 2 ) ) )
block whose length is at least width of block 1	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string length ) ) ( string >= ) ( call SW.ensureNumericEntity ( call SW.getProperty en.block.block1 ( string width ) ) ) ) )
find me all 3 inch long blocks below block 1	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.reverse ( string above ) ) ( string = ) en.block.block1 ) ( string length ) ( string = ) ( number 3 en.inch ) ) )
find a block that is below no more than two blocks	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string below ) ( string <= ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ) )
block whose length is width of block 1	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string length ) ( string = ) ( call SW.getProperty en.block.block1 ( string width ) ) ) )
block below block that is above block 1	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string below ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string above ) ( string = ) en.block.block1 ) ) )
find a 3 inch wide pyramidshaped block	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string shape ) ( string = ) en.shape.pyramid ) ( string width ) ( string = ) ( number 3 en.inch ) ) )
find a block that has at most two blocks to its left	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string left ) ( string <= ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ) )
locate the block that is special	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string is_special ) ) )
find me all blocks to the right and above block 1	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string right ) ( string = ) en.block.block1 ) ( call SW.reverse ( string below ) ) ( string = ) en.block.block1 ) )
what is the height of an average block	( call SW.listValue ( call SW.aggregate ( string avg ) ( call SW.getProperty ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string height ) ) ) )
find me all blocks left of 3 inch wide blocks	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.reverse ( string left ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string width ) ( string = ) ( number 3 en.inch ) ) ) )
what brick is 3 inches wide and 3 inches high	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string width ) ( string = ) ( number 3 en.inch ) ) ( string height ) ( string = ) ( number 3 en.inch ) ) )
what block is to the left of the 3 inch tall block	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string left ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string height ) ( string = ) ( number 3 en.inch ) ) ) )
select all which is 3 inches in width and pyramid in shape	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string width ) ( string = ) ( number 3 en.inch ) ) ( string shape ) ( string = ) en.shape.pyramid ) )
block that has block 1 in the right and left	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.reverse ( string left ) ) ( string = ) en.block.block1 ) ( call SW.reverse ( string right ) ) ( string = ) en.block.block1 ) )
what block is to the left of either block 1 or block 2	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string left ) ( string = ) ( call SW.concat en.block.block1 en.block.block2 ) ) )
which block is above block 1	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.reverse ( string above ) ) ( string = ) en.block.block1 ) ( string above ) ( string = ) en.block.block1 ) )
find me all blocks below which block 1 is right of	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string below ) ( string = ) en.block.block1 ) ( call SW.reverse ( string right ) ) ( string = ) en.block.block1 ) )
what 3 inches long block is above block 1	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string above ) ( string = ) en.block.block1 ) ( string length ) ( string = ) ( number 3 en.inch ) ) )
bloch longer than the length of block 1	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string height ) ) ( string > ) ( call SW.ensureNumericEntity ( call SW.getProperty en.block.block1 ( string length ) ) ) ) )
find a block with the same height as block 1	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string height ) ( string = ) ( call SW.getProperty en.block.block1 ( string height ) ) ) )
which brick has a length shorter than 3 inches	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string length ) ) ( string < ) ( call SW.ensureNumericEntity ( number 3 en.inch ) ) ) )
find a block below and to the right of block 1	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string right ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string below ) ( string = ) en.block.block1 ) ) )
3 inch wide block to the right of block 1	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string width ) ( string = ) ( number 3 en.inch ) ) ( string right ) ( string = ) en.block.block1 ) )
find me all blocks that is left of block 1	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.reverse ( string left ) ) ( string = ) en.block.block1 ) ( string left ) ( string = ) en.block.block1 ) )
select the block left of block 1	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string left ) ( string = ) en.block.block1 ) ( call SW.reverse ( string left ) ) ( string = ) en.block.block1 ) )
find me all blocks over that block 1 is above	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string above ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.reverse ( string above ) ) ( string = ) en.block.block1 ) ) )
find me all blocks above which block 1 is right of	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.reverse ( string right ) ) ( string = ) en.block.block1 ) ( string above ) ( string = ) en.block.block1 ) )
right and below block 1	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.reverse ( string left ) ) ( string = ) en.block.block1 ) ( call SW.reverse ( string above ) ) ( string = ) en.block.block1 ) )
select block to the left of two blocks	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.reverse ( string right ) ) ( string = ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ) )
what blocks are below block 1	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.reverse ( string below ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string below ) ( string = ) en.block.block1 ) ) )
which brick is below the brick that is above brick 1	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string below ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string above ) ( string = ) en.block.block1 ) ) )
select the longest brick	( call SW.listValue ( call SW.superlative ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string max ) ( call SW.ensureNumericProperty ( string length ) ) ) )
find me all 3 inch high blocks	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string height ) ( string = ) ( number 3 en.inch ) ) )
choose a block that is less thick than block 1	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string length ) ) ( string < ) ( call SW.ensureNumericEntity ( call SW.getProperty en.block.block1 ( string width ) ) ) ) )
find the block that has a height of 3 inches and that block 1 is to the right of	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string height ) ( string = ) ( number 3 en.inch ) ) ( call SW.reverse ( string right ) ) ( string = ) en.block.block1 ) )
what pyramidshaped block is to the right of block 1	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string shape ) ( string = ) en.shape.pyramid ) ( string right ) ( string = ) en.block.block1 ) )
block whose shape is a pyramid and that is special	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string shape ) ( string = ) en.shape.pyramid ) ( string is_special ) ) )
choose a block that is not 3 inches	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string length ) ( string ! = ) ( number 3 en.inch ) ) )
choose the brick that is 3 inches high below brick 1	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string height ) ( string = ) ( number 3 en.inch ) ) ( string below ) ( string = ) en.block.block1 ) )
block that is right of block that is special	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string right ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string is_special ) ) ) )
find the block to the left of two blocks or one but no more	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.reverse ( string right ) ) ( string <= ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ) )
find me all blocks above pyramid blocks	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.reverse ( string below ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string shape ) ( string = ) en.shape.pyramid ) ) )
block above at most two block	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.reverse ( string above ) ) ( string <= ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ) )
select the blocks that are 3 inches long	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.reverse ( string below ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string length ) ( string = ) ( number 3 en.inch ) ) ) )
block that is shorter than block one	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string length ) ) ( string < ) ( call SW.ensureNumericEntity ( call SW.getProperty en.block.block1 ( string height ) ) ) ) )
block 3 inches long and below block one	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string length ) ( string = ) ( number 3 en.inch ) ) ( call SW.reverse ( string below ) ) ( string = ) en.block.block1 ) )
find the block underneath block 1 that is also 3 inches long	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string below ) ( string = ) en.block.block1 ) ( string length ) ( string = ) ( number 3 en.inch ) ) )
what brick is at least 3 or 6 inches	( call SW.listValue ( call SW.concat ( number 3 en.inch ) ( number 6 en.inch ) ) )
find the block that is shorer than block 1	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string length ) ) ( string < ) ( call SW.ensureNumericEntity ( call SW.getProperty en.block.block1 ( string height ) ) ) ) )
find a block at most as tall as block 1s width	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string height ) ) ( string <= ) ( call SW.ensureNumericEntity ( call SW.getProperty en.block.block1 ( string width ) ) ) ) )
what blocks width is less than or equal to block 1s height	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string width ) ) ( string <= ) ( call SW.ensureNumericEntity ( call SW.getProperty en.block.block1 ( string height ) ) ) ) )
find me the 3 inch wide pyramidshaped block	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string width ) ( string = ) ( number 3 en.inch ) ) ( string shape ) ( string = ) en.shape.pyramid ) )
left of block 1	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.reverse ( string right ) ) ( string = ) en.block.block1 ) )
block that is above less than two block	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string above ) ( string < ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ) )
choose blocks wider than block 1s height	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string width ) ) ( string > ) ( call SW.ensureNumericEntity ( call SW.getProperty en.block.block1 ( string height ) ) ) ) )
what block is skinnier than the height of block 1	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string width ) ) ( string < ) ( call SW.ensureNumericEntity ( call SW.getProperty en.block.block1 ( string height ) ) ) ) )
block above and left of block 1	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string above ) ( string = ) en.block.block1 ) ( call SW.reverse ( string right ) ) ( string = ) en.block.block1 ) )
find me all 3 inch long blocks	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.reverse ( string below ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string length ) ( string = ) ( number 3 en.inch ) ) ) )
find the block with the same shape as block 1	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string shape ) ( string = ) ( call SW.getProperty en.block.block1 ( string shape ) ) ) )
block below three inch block	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.reverse ( string above ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string height ) ( string = ) ( number 3 en.inch ) ) ) )
choose a block to the left of the special brick	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string left ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string is_special ) ) ) )
bricks that are the same size as brick 1	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string width ) ( string = ) ( call SW.getProperty en.block.block1 ( string width ) ) ) )
block that has the most number of shape	( call SW.listValue ( call SW.countSuperlative ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string max ) ( string shape ) ) )
choose a block above the least populated bricks	( call SW.listValue ( call SW.countSuperlative ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string min ) ( string above ) ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ) )
find me all 3 inch wide blocks right of block 1	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string width ) ( string = ) ( number 3 en.inch ) ) ( string right ) ( string = ) en.block.block1 ) )
describe the shape of block 1	( call SW.listValue ( call SW.getProperty en.block.block1 ( string shape ) ) )
which block is 3 in height and has block 1 on its left	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.reverse ( string left ) ) ( string = ) en.block.block1 ) ( string height ) ( string = ) ( number 3 en.inch ) ) )
what block is to the right of the 3 inch wide block	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string right ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string width ) ( string = ) ( number 3 en.inch ) ) ) )
find me all blocks above at most 2 blocks	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string above ) ( string <= ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ) )
which special brick is above brick 1	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string is_special ) ) ( string above ) ( string = ) en.block.block1 ) )
select the blocks to the right of greater that two blocks	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string right ) ( string > ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ) )
select the left of block 1	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.reverse ( string left ) ) ( string = ) en.block.block1 ) ( call SW.reverse ( string above ) ) ( string = ) en.block.block1 ) )
which brick is longer than brick 1	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string length ) ) ( string > ) ( call SW.ensureNumericEntity ( call SW.getProperty en.block.block1 ( string length ) ) ) ) )
not more than 3 inches wide block	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string width ) ) ( string <= ) ( call SW.ensureNumericEntity ( number 3 en.inch ) ) ) )
which brick is to the right of brick 1 or 2	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string right ) ( string = ) ( call SW.concat en.block.block1 en.block.block2 ) ) )
block left of blocks 1 and 2	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.reverse ( string left ) ) ( string = ) ( call SW.concat en.block.block1 en.block.block2 ) ) )
choose a 3 inch block to the right of block 1	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string length ) ( string = ) ( number 3 en.inch ) ) ( string right ) ( string = ) en.block.block1 ) )
find me all blocks that block 1 is not under	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.reverse ( string below ) ) ( string ! = ) en.block.block1 ) )
which brick is left of brick 1 or 2	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string left ) ( string = ) ( call SW.concat en.block.block1 en.block.block2 ) ) )
find me all blocks above block 1	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.reverse ( string below ) ) ( string = ) en.block.block1 ) )
choose a 3 inch block that is left of block 1	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string left ) ( string = ) en.block.block1 ) ( string length ) ( string = ) ( number 3 en.inch ) ) )
what block is to the right of the block that block 1 is above	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string right ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.reverse ( string above ) ) ( string = ) en.block.block1 ) ) )
block that is at the right of most number of blocks	( call SW.listValue ( call SW.countSuperlative ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string max ) ( string right ) ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ) )
find a block 6 inches or shorter	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string height ) ) ( string <= ) ( call SW.ensureNumericEntity ( call SW.concat ( number 3 en.inch ) ( number 6 en.inch ) ) ) ) )
2 blocks below block 1	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.reverse ( string below ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.reverse ( string below ) ) ( string = ) en.block.block1 ) ) )
find a block wider than block 1 is tall	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string width ) ) ( string > ) ( call SW.ensureNumericEntity ( call SW.getProperty en.block.block1 ( string height ) ) ) ) )
find a block at least 3 inches long	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string length ) ) ( string >= ) ( call SW.ensureNumericEntity ( call SW.concat ( number 3 en.inch ) ( number 6 en.inch ) ) ) ) )
find me all blocks which block 1 is right and left of	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.reverse ( string left ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.reverse ( string right ) ) ( string = ) en.block.block1 ) ) )
select the blocks below block 1	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string below ) ( string = ) en.block.block1 ) )
choose a 3 inch block under block 1	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string below ) ( string = ) en.block.block1 ) ( string width ) ( string = ) ( number 3 en.inch ) ) )
which brick is below the brick to the right of brick 1	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string below ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string right ) ( string = ) en.block.block1 ) ) )
what block is to the right of the least blocks	( call SW.listValue ( call SW.countSuperlative ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string min ) ( call SW.reverse ( string left ) ) ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ) )
select the pyramidshaped block that is left of block 1	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string left ) ( string = ) en.block.block1 ) ( string shape ) ( string = ) en.shape.pyramid ) )
block that at most two block is right of	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.reverse ( string right ) ) ( string <= ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ) )
block that has block 1 above and below	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.reverse ( string above ) ) ( string = ) en.block.block1 ) ( string below ) ( string = ) en.block.block1 ) )
block taller or same height as the width of block 1	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string height ) ) ( string >= ) ( call SW.ensureNumericEntity ( call SW.getProperty en.block.block1 ( string width ) ) ) ) )
find me all the pyramid or cube bricks	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string shape ) ( string = ) ( call SW.concat en.shape.pyramid en.shape.cube ) ) )
what pyramidshaped brick is 3 inches long	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string length ) ( string = ) ( number 3 en.inch ) ) ( string shape ) ( string = ) en.shape.pyramid ) )
block whose shape is not a pyramid	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string shape ) ( string ! = ) en.shape.pyramid ) )
block that is right of block that is above block 1	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string right ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string above ) ( string = ) en.block.block1 ) ) )
find a block below the block on the right of block 1	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.reverse ( string above ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.reverse ( string right ) ) ( string = ) en.block.block1 ) ) )
block below and right of block 1	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.reverse ( string below ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.reverse ( string left ) ) ( string = ) en.block.block1 ) ) )
block whose length is at most either 3 inches or 6 inches	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string length ) ) ( string <= ) ( call SW.ensureNumericEntity ( call SW.concat ( number 3 en.inch ) ( number 6 en.inch ) ) ) ) )
what is the average block width	( call SW.listValue ( call SW.aggregate ( string avg ) ( call SW.getProperty ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string width ) ) ) )
find the block that is to the left of block 1	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.reverse ( string left ) ) ( string = ) en.block.block1 ) )
select a brick that is at least 3 inches wide	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string width ) ) ( string >= ) ( call SW.ensureNumericEntity ( number 3 en.inch ) ) ) )
what is the width of block 1	( call SW.listValue ( call SW.getProperty en.block.block1 ( string width ) ) )
block two above block 1	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string above ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.reverse ( string below ) ) ( string = ) en.block.block1 ) ) )
find the block that is to the right of block 1 with a width of 3 inches	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.reverse ( string right ) ) ( string = ) en.block.block1 ) ( string width ) ( string = ) ( number 3 en.inch ) ) )
choose a block that is the right of block 2	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.reverse ( string right ) ) ( string <= ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ) )
block that is below block whose width is 3 inches	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string below ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string width ) ( string = ) ( number 3 en.inch ) ) ) )
find a block shorter than the width of block 1	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string height ) ) ( string < ) ( call SW.ensureNumericEntity ( call SW.getProperty en.block.block1 ( string width ) ) ) ) )
find the block that block 1 is above and below	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.reverse ( string below ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.reverse ( string above ) ) ( string = ) en.block.block1 ) ) )
choose a block to the left of block 1	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string above ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string left ) ( string = ) en.block.block1 ) ) )
block wider than block 1	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string width ) ) ( string > ) ( call SW.ensureNumericEntity ( call SW.getProperty en.block.block1 ( string width ) ) ) ) )
find a block that is at least 3 to 6 inches	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string length ) ) ( string >= ) ( call SW.ensureNumericEntity ( call SW.concat ( number 3 en.inch ) ( number 6 en.inch ) ) ) ) )
find me all the bricks with 2 blocks above it	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.reverse ( string above ) ) ( string = ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ) )
choose a block that is under block 1	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string below ) ( string = ) en.block.block1 ) ( string below ) ( string = ) en.block.block1 ) )
locate a block that is on the left side of the smallest number of blocks	( call SW.listValue ( call SW.countSuperlative ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string min ) ( string left ) ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ) )
choose a 3 inch tall brick	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string height ) ) ( string >= ) ( call SW.ensureNumericEntity ( number 3 en.inch ) ) ) )
block with same width that of block 1	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string width ) ( string = ) ( call SW.getProperty en.block.block1 ( string width ) ) ) )
find a block that is on top of two other blocks	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.reverse ( string below ) ) ( string = ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ) )
select the block to the left of the special block	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string left ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string is_special ) ) ) )
block that is below block that is left of block 1	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string below ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string left ) ( string = ) en.block.block1 ) ) )
block to the right of the 3 inch high block	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string right ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string height ) ( string = ) ( number 3 en.inch ) ) ) )
which brick has no more than 2 bricks to its right	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.reverse ( string right ) ) ( string <= ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ) )
which is the block to the right of special block	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( call SW.reverse ( string right ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string is_special ) ) ) )
which block is only a single color	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string color ) ( string < ) ( number 2 ) ) )
find a block of 3 height above block 1	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string above ) ( string = ) en.block.block1 ) ( string height ) ( string = ) ( number 3 en.inch ) ) )
select the block 3 inched high to the right of block 1	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.block ) ( string ! type ) ) ( string right ) ( string = ) en.block.block1 ) ( string height ) ( string = ) ( number 3 en.inch ) ) )
locations of the weekly standup meeting or annual review meeting	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.location ) ( string ! type ) ) ( call SW.reverse ( string location ) ) ( string = ) ( call SW.concat en.meeting.weekly_standup en.meeting.annual_review ) ) )
what is the number of the meeting	( call SW.listValue ( call .size ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ) )
show me all meetings in greenberg cafe or central office	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( string location ) ( string = ) ( call SW.concat en.location.greenberg_cafe en.location.central_office ) ) )
meetings that are shorter than three hours	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string length ) ) ( string < ) ( call SW.ensureNumericEntity ( number 3 en.hour ) ) ) )
meetings held in the same place as the weekly standup meeting	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( string location ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.location ) ( string ! type ) ) ( call SW.reverse ( string location ) ) ( string = ) en.meeting.weekly_standup ) ) )
meeting featuring alice as attendee starting at 10am	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( string start_time ) ( string = ) ( time 10 0 ) ) ( string attendee ) ( string = ) en.person.alice ) )
what location does not hold the weekly standup meeting	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.location ) ( string ! type ) ) ( call SW.reverse ( string location ) ) ( string ! = ) en.meeting.weekly_standup ) )
what meeting has alice attending and starts at 10am	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( string attendee ) ( string = ) en.person.alice ) ( string start_time ) ( string = ) ( time 10 0 ) ) )
what person is an attendee of more than two meetings	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.reverse ( string attendee ) ) ( string > ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ) )
meeting that ends at start time of weekly standup	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( string end_time ) ( string = ) ( call SW.getProperty en.meeting.weekly_standup ( string start_time ) ) ) )
locations that house at least two meetings	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.location ) ( string ! type ) ) ( call SW.reverse ( string location ) ) ( string >= ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ) )
what is the shortest meeting	( call SW.listValue ( call SW.superlative ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( string min ) ( call SW.ensureNumericProperty ( string length ) ) ) )
show me all metings that take place jan 2 or jan 3	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( string date ) ( string = ) ( call SW.concat ( date 2015 1 2 ) ( date 2015 1 3 ) ) ) )
meetings that end at the same as the weekly standup meeting	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( string end_time ) ( string = ) ( call SW.getProperty en.meeting.weekly_standup ( string end_time ) ) ) )
important meetings	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( string is_important ) ) )
what meeting has a later date than weekly standup	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string date ) ) ( string > ) ( call SW.ensureNumericEntity ( call SW.getProperty en.meeting.weekly_standup ( string date ) ) ) ) )
what meeting is on or before jan 2 or 3rd	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string date ) ) ( string <= ) ( call SW.ensureNumericEntity ( call SW.concat ( date 2015 1 2 ) ( date 2015 1 3 ) ) ) ) )
locations of meetings attended by alice	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.location ) ( string ! type ) ) ( call SW.reverse ( string location ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( string attendee ) ( string = ) en.person.alice ) ) )
show me all meetings beginning no later than 10 am or 3 pm	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string start_time ) ) ( string >= ) ( call SW.ensureNumericEntity ( call SW.concat ( time 10 0 ) ( time 15 0 ) ) ) ) )
meetings that start after the weekly standup meeting starts	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string start_time ) ) ( string > ) ( call SW.ensureNumericEntity ( call SW.getProperty en.meeting.weekly_standup ( string start_time ) ) ) ) )
what time does the weekly standup meeting end	( call SW.listValue ( call SW.getProperty en.meeting.weekly_standup ( string end_time ) ) )
show me all attendees of meetings on january 2nd	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.reverse ( string attendee ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( string date ) ( string = ) ( date 2015 1 2 ) ) ) )
show me all meetings that end by 10am	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string end_time ) ) ( string >= ) ( call SW.ensureNumericEntity ( time 10 0 ) ) ) )
show me all meetings scheduled to be less than three hours or less than one hour	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string length ) ) ( string < ) ( call SW.ensureNumericEntity ( call SW.concat ( number 3 en.hour ) ( number 1 en.hour ) ) ) ) )
meeting that starts and ends at 10am	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( string start_time ) ( string = ) ( time 10 0 ) ) ( string end_time ) ( string = ) ( time 10 0 ) ) )
meeting does not start at 10am	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( string start_time ) ( string ! = ) ( time 10 0 ) ) )
meeting on january 2nd at 10am	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( string start_time ) ( string = ) ( time 10 0 ) ) ( string date ) ( string = ) ( date 2015 1 2 ) ) )
meeting that starts no later than end time of weekly standup	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string start_time ) ) ( string <= ) ( call SW.ensureNumericEntity ( call SW.getProperty en.meeting.weekly_standup ( string end_time ) ) ) ) )
important meeting alice is attending	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( string attendee ) ( string = ) en.person.alice ) ( string is_important ) ) )
meeting held in the fewest number of locations	( call SW.listValue ( call SW.countSuperlative ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( string min ) ( string location ) ) )
show me the locations of all meetings on january 2	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.location ) ( string ! type ) ) ( call SW.reverse ( string location ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( string date ) ( string = ) ( date 2015 1 2 ) ) ) )
what meetings are scheduled to run for 3 hours	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string length ) ) ( string >= ) ( call SW.ensureNumericEntity ( number 3 en.hour ) ) ) )
show all meetings that start ealier than 10am	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string start_time ) ) ( string < ) ( call SW.ensureNumericEntity ( time 10 0 ) ) ) )
show me meetings for jan 2	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( string date ) ( string = ) ( date 2015 1 2 ) ) )
what meeting will take place no later than jan 2	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string date ) ) ( string <= ) ( call SW.ensureNumericEntity ( date 2015 1 2 ) ) ) )
show me the meeting which has happened at the most locations	( call SW.listValue ( call SW.countSuperlative ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( string max ) ( string location ) ) )
show me all meetings which begin at the same time or earlier than the weekly standup ends	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string start_time ) ) ( string <= ) ( call SW.ensureNumericEntity ( call SW.getProperty en.meeting.weekly_standup ( string end_time ) ) ) ) )
weekly standup end time	( call SW.listValue ( call SW.getProperty en.meeting.weekly_standup ( string end_time ) ) )
what date is the weekly standup meeting	( call SW.listValue ( call SW.getProperty en.meeting.weekly_standup ( string date ) ) )
what location is the meeting that starts at 10am	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.location ) ( string ! type ) ) ( call SW.reverse ( string location ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( string start_time ) ( string = ) ( time 10 0 ) ) ) )
what is the average length of a meeting	( call SW.listValue ( call SW.aggregate ( string avg ) ( call SW.getProperty ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( string length ) ) ) )
show me where the weekly standup and annual review is happening	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.location ) ( string ! type ) ) ( call SW.reverse ( string location ) ) ( string = ) ( call SW.concat en.meeting.weekly_standup en.meeting.annual_review ) ) )
what meeting has a after jan 2 or 3	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string date ) ) ( string > ) ( call SW.ensureNumericEntity ( call SW.concat ( date 2015 1 2 ) ( date 2015 1 3 ) ) ) ) )
show me all meetings which end at the same time the weekly standup begins	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( string end_time ) ( string = ) ( call SW.getProperty en.meeting.weekly_standup ( string start_time ) ) ) )
show me all meetings between 10am and 3pm	( call SW.listValue ( call SW.concat ( time 10 0 ) ( time 15 0 ) ) )
show me all meetings at least three hours long	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string length ) ) ( string >= ) ( call SW.ensureNumericEntity ( number 3 en.hour ) ) ) )
what person is attending weekly standup	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.reverse ( string attendee ) ) ( string = ) en.meeting.weekly_standup ) ( call SW.reverse ( string attendee ) ) ( string = ) en.meeting.weekly_standup ) )
meetings that end at the time when the weekly standup meeting starts	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( string end_time ) ( string = ) ( call SW.getProperty en.meeting.weekly_standup ( string start_time ) ) ) )
what meeting has the shortest time	( call SW.listValue ( call SW.superlative ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( string min ) ( call SW.ensureNumericProperty ( string end_time ) ) ) )
meeting which starts at 1000 am at greenberg cafe	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( string start_time ) ( string = ) ( time 10 0 ) ) ( string location ) ( string = ) en.location.greenberg_cafe ) )
meeting at location of weekly standup	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( string location ) ( string = ) ( call SW.getProperty en.meeting.weekly_standup ( string location ) ) ) )
meetings that do not start at 10am	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( string start_time ) ( string ! = ) ( time 10 0 ) ) )
location different from location of weekly standup	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.location ) ( string ! type ) ) ( call SW.reverse ( string location ) ) ( string ! = ) en.meeting.weekly_standup ) )
when is the weekly standup	( call SW.listValue ( call SW.getProperty en.meeting.weekly_standup ( string start_time ) ) )
what meeting does not start at 10am	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( string start_time ) ( string ! = ) ( time 10 0 ) ) )
what meeting ends at 10am or 3pm	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string end_time ) ) ( string >= ) ( call SW.ensureNumericEntity ( call SW.concat ( time 10 0 ) ( time 15 0 ) ) ) ) )
show me all meetings happening at the same location as the weekly standup	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( string location ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.location ) ( string ! type ) ) ( call SW.reverse ( string location ) ) ( string = ) en.meeting.weekly_standup ) ) )
location where more than two meetings are held	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.location ) ( string ! type ) ) ( call SW.reverse ( string location ) ) ( string > ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ) )
who is attending the greenberg cafe for the meeting	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.reverse ( string attendee ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( string location ) ( string = ) en.location.greenberg_cafe ) ) )
show me meetings that take 3 hours	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( string length ) ( string = ) ( number 3 en.hour ) ) ( string length ) ( string = ) ( number 3 en.hour ) ) )
meetings attended by the smallest number of people	( call SW.listValue ( call SW.countSuperlative ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( string min ) ( string attendee ) ) )
what location is the meeting that ends at 10am	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.location ) ( string ! type ) ) ( call SW.reverse ( string location ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( string end_time ) ( string = ) ( time 10 0 ) ) ) )
show me all meetings that have at most two locations	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( string location ) ( string <= ) ( number 2 ) ) )
find all meetings which begin on january 2nd or january 3rd	( call SW.listValue ( call SW.concat ( date 2015 1 2 ) ( date 2015 1 3 ) ) )
show me all meetings located at greenberg cafe	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( string location ) ( string = ) en.location.greenberg_cafe ) ( string location ) ( string = ) en.location.greenberg_cafe ) )
show me any meetings alice has attended on january 2nd	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( string date ) ( string = ) ( date 2015 1 2 ) ) ( string attendee ) ( string = ) en.person.alice ) )
show me meetings after jan 2	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string date ) ) ( string > ) ( call SW.ensureNumericEntity ( call SW.concat ( date 2015 1 2 ) ( date 2015 1 3 ) ) ) ) )
what person is an attendee of at least two meetings	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.reverse ( string attendee ) ) ( string >= ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ) )
what important meetings are scheduled for jan 2	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( string is_important ) ) ( string date ) ( string = ) ( date 2015 1 2 ) ) )
show me meetings starting before 3pm	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string start_time ) ) ( string <= ) ( call SW.ensureNumericEntity ( call SW.concat ( time 10 0 ) ( time 15 0 ) ) ) ) )
meetings that start later than or at the same time as the weekly standup meeting	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string start_time ) ) ( string >= ) ( call SW.ensureNumericEntity ( call SW.getProperty en.meeting.weekly_standup ( string start_time ) ) ) ) )
what meeting ending at 10am is alice attending	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( string attendee ) ( string = ) en.person.alice ) ( string end_time ) ( string = ) ( time 10 0 ) ) )
what meeting starts at 10am	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( string start_time ) ( string = ) ( time 10 0 ) ) ( string start_time ) ( string = ) ( time 10 0 ) ) )
location of at least two meetings is the location	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.location ) ( string ! type ) ) ( call SW.reverse ( string location ) ) ( string >= ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ) )
what is the meeting that take place immediately before the weekly standup	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string end_time ) ) ( string <= ) ( call SW.ensureNumericEntity ( call SW.getProperty en.meeting.weekly_standup ( string start_time ) ) ) ) )
meetings attended by two people	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( string attendee ) ( string = ) ( number 2 ) ) )
show me all locations which have had at least two meetings	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.location ) ( string ! type ) ) ( call SW.reverse ( string location ) ) ( string >= ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ) )
meetings attended by two or more people	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( string attendee ) ( string >= ) ( number 2 ) ) )
what is an important meeting	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( string is_important ) ) ( string is_important ) ) )
show me all meetings ending at the same time or earlier than the weekly standup begins	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string end_time ) ) ( string <= ) ( call SW.ensureNumericEntity ( call SW.getProperty en.meeting.weekly_standup ( string start_time ) ) ) ) )
show me all meetings not beginning at 10 am	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( string start_time ) ( string ! = ) ( time 10 0 ) ) )
show me meetings that start and end at 10am	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( string end_time ) ( string = ) ( time 10 0 ) ) ( string start_time ) ( string = ) ( time 10 0 ) ) )
show me all meetings on january 2nd which end at 10 am	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( string end_time ) ( string = ) ( time 10 0 ) ) ( string date ) ( string = ) ( date 2015 1 2 ) ) )
who is attending the meeting that ends at 10am	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.reverse ( string attendee ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( string end_time ) ( string = ) ( time 10 0 ) ) ) )
who is at the weekly standup or annual review	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.reverse ( string attendee ) ) ( string = ) ( call SW.concat en.meeting.weekly_standup en.meeting.annual_review ) ) )
what meeting has an end time greater than weekly standup	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string end_time ) ) ( string > ) ( call SW.ensureNumericEntity ( call SW.getProperty en.meeting.weekly_standup ( string start_time ) ) ) ) )
where is my jan 2 meeting	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.location ) ( string ! type ) ) ( call SW.reverse ( string location ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( string date ) ( string = ) ( date 2015 1 2 ) ) ) )
how many meetings are there	( call SW.listValue ( call .size ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ) )
location is same as the location of three hours long meeting	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.location ) ( string ! type ) ) ( call SW.reverse ( string location ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( string length ) ( string = ) ( number 3 en.hour ) ) ) )
what meeting has a date of jan 2 and has alice attending	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( string date ) ( string = ) ( date 2015 1 2 ) ) ( string attendee ) ( string = ) en.person.alice ) )
meetings that start at 10am	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( string start_time ) ( string = ) ( time 10 0 ) ) ( string start_time ) ( string = ) ( time 10 0 ) ) )
show me all meetings that fall before or after jan 2	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( string date ) ( string ! = ) ( date 2015 1 2 ) ) )
meeting that does not end at 10am	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( string end_time ) ( string ! = ) ( time 10 0 ) ) )
meeting ends no later than start time of weekly standup	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string end_time ) ) ( string <= ) ( call SW.ensureNumericEntity ( call SW.getProperty en.meeting.weekly_standup ( string start_time ) ) ) ) )
meetings that end at 10am	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( string end_time ) ( string = ) ( time 10 0 ) ) )
show me all attendees of meetings three hours long	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.reverse ( string attendee ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( string length ) ( string = ) ( number 3 en.hour ) ) ) )
show me all attendees of meetings at the greenberg cafe	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.reverse ( string attendee ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( string location ) ( string = ) en.location.greenberg_cafe ) ) )
show all meetings that end at 10am on jan 2	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( string date ) ( string = ) ( date 2015 1 2 ) ) ( string end_time ) ( string = ) ( time 10 0 ) ) )
show me all meetings with lengths that either less or more than three hours	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( string length ) ( string ! = ) ( number 3 en.hour ) ) )
show me all meetings which begin at 10 am and end at 10 am	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( string end_time ) ( string = ) ( time 10 0 ) ) ( string start_time ) ( string = ) ( time 10 0 ) ) )
show me the meeting starting latest in the day	( call SW.listValue ( call SW.superlative ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( string max ) ( call SW.ensureNumericProperty ( string start_time ) ) ) )
what time does the weekly standup meeting start	( call SW.listValue ( call SW.getProperty en.meeting.weekly_standup ( string start_time ) ) )
what meeting had the fewest people show up	( call SW.listValue ( call SW.countSuperlative ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( string min ) ( string attendee ) ) )
what important meeting is located at greenberg cafe	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( string location ) ( string = ) en.location.greenberg_cafe ) ( string is_important ) ) )
show me all meetings scheduled to be three hours or one hour long	( call SW.listValue ( call SW.concat ( number 3 en.hour ) ( number 1 en.hour ) ) )
show me meetings on jan 2 with alice	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( string attendee ) ( string = ) en.person.alice ) ( string date ) ( string = ) ( date 2015 1 2 ) ) )
meetings held before january 2	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string date ) ) ( string < ) ( call SW.ensureNumericEntity ( date 2015 1 2 ) ) ) )
what meeting ends at most at 10am	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string end_time ) ) ( string <= ) ( call SW.ensureNumericEntity ( time 10 0 ) ) ) )
show me meetings that end before the weekly standup	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string end_time ) ) ( string <= ) ( call SW.ensureNumericEntity ( call SW.getProperty en.meeting.weekly_standup ( string end_time ) ) ) ) )
show me all meetings happening after the weekly standup	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string date ) ) ( string > ) ( call SW.ensureNumericEntity ( call SW.getProperty en.meeting.weekly_standup ( string date ) ) ) ) )
which meetings end when weekly standup is scheduled to start	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( string end_time ) ( string = ) ( call SW.getProperty en.meeting.weekly_standup ( string start_time ) ) ) )
show me all meetings at least one hour or three hours long	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string length ) ) ( string >= ) ( call SW.ensureNumericEntity ( call SW.concat ( number 3 en.hour ) ( number 1 en.hour ) ) ) ) )
show me everyone who attended meetings also attended by alice	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.reverse ( string attendee ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( string attendee ) ( string = ) en.person.alice ) ) )
how many attendees are there for this meeting	( call SW.listValue ( call .size ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ) )
meeting in greenberg cafe or central office	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( string location ) ( string = ) ( call SW.concat en.location.greenberg_cafe en.location.central_office ) ) )
show me the length of the weekly standup	( call SW.listValue ( call SW.getProperty en.meeting.weekly_standup ( string length ) ) )
people attending meetings that end at 10am	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.reverse ( string attendee ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( string end_time ) ( string = ) ( time 10 0 ) ) ) )
important meeting with alice as attendee	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( string is_important ) ) ( string attendee ) ( string = ) en.person.alice ) )
three hour long meeting at greenberg	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( string location ) ( string = ) en.location.greenberg_cafe ) ( string length ) ( string = ) ( number 3 en.hour ) ) )
show me all locations that are used for more than two meetings	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.location ) ( string ! type ) ) ( call SW.reverse ( string location ) ) ( string > ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ) )
show me any meetings which end at 10 am	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( string end_time ) ( string = ) ( time 10 0 ) ) )
meetings with the earliest start time	( call SW.listValue ( call SW.superlative ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( string min ) ( call SW.ensureNumericProperty ( string start_time ) ) ) )
what meeting ends no later than 10am or 3pm	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string end_time ) ) ( string <= ) ( call SW.ensureNumericEntity ( call SW.concat ( time 10 0 ) ( time 15 0 ) ) ) ) )
what meetings take place on jan 2 in greenberg cafe	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( string location ) ( string = ) en.location.greenberg_cafe ) ( string date ) ( string = ) ( date 2015 1 2 ) ) )
what meetings are the same day as the weekly standup meeting	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( string date ) ( string = ) ( call SW.getProperty en.meeting.weekly_standup ( string date ) ) ) )
meetings that start at 10am or 3pm	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( string start_time ) ( string = ) ( call SW.concat ( time 10 0 ) ( time 15 0 ) ) ) )
who is attending the meeting on jan 2	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.reverse ( string attendee ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( string date ) ( string = ) ( date 2015 1 2 ) ) ) )
meeting in which alice is attending which starts at 1000 am	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( string attendee ) ( string = ) en.person.alice ) ( string start_time ) ( string = ) ( time 10 0 ) ) )
meetings that are attended by alice and are three hours long	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( string length ) ( string = ) ( number 3 en.hour ) ) ( string attendee ) ( string = ) en.person.alice ) )
show me meetings that have two attendees	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( string attendee ) ( string = ) ( number 2 ) ) )
show me all meetings on january 2nd which are also 3 hours long	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( string length ) ( string = ) ( number 3 en.hour ) ) ( string date ) ( string = ) ( date 2015 1 2 ) ) )
where is the weekly standup meeting located	( call SW.listValue ( call SW.getProperty en.meeting.weekly_standup ( string location ) ) )
who are the attendees for fo the meetings in greenberg cafe	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.reverse ( string attendee ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meeting ) ( string ! type ) ) ( string location ) ( string = ) en.location.greenberg_cafe ) ) )
which neighborhoods have housing with a private bath	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.neighborhood ) ( string ! type ) ) ( call SW.reverse ( string neighborhood ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( string has_private_bath ) ) ) )
housing found in less than two neighborhoods	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( string neighborhood ) ( string < ) ( number 2 ) ) )
housing posted on january 2	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing ) ( string ! type ) ) ( call SW.reverse ( string housing_type ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( string posting_date ) ( string = ) ( date 2015 1 2 ) ) ) )
find all housing units posted on january 2	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing ) ( string ! type ) ) ( call SW.reverse ( string housing_type ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( string posting_date ) ( string = ) ( date 2015 1 2 ) ) ) )
housing units that have a private room that was posted on january 2	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( string has_private_room ) ) ( string posting_date ) ( string = ) ( date 2015 1 2 ) ) )
housing with a master bedroom and private bath	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( string has_private_bath ) ) ( string has_private_room ) ) )
which housing posted on the same date as 123 sesame street	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( string posting_date ) ( string = ) ( call SW.getProperty en.housing_unit.123_sesame_street ( string posting_date ) ) ) )
housing units that are 800 square feet and have private baths	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( string size ) ( string = ) ( number 800 en.square_feet ) ) ( string has_private_bath ) ) )
dogfriendly apartment	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( string allows_dogs ) ) ( string housing_type ) ( string = ) en.housing.apartment ) )
housing that is the same type as 123 sesame street that was posted on january 2	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( string posting_date ) ( string = ) ( date 2015 1 2 ) ) ( call SW.reverse ( string housing_type ) ) ( string = ) en.housing_unit.123_sesame_street ) )
which housing unit in this neighbourhood has the facility of a private bath	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.neighborhood ) ( string ! type ) ) ( call SW.reverse ( string neighborhood ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( string has_private_bath ) ) ) )
apartments posted on january 2	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string posting_date ) ) ( string <= ) ( call SW.ensureNumericEntity ( date 2015 1 2 ) ) ) )
which housing unit has a  minimum  rent of 1500 dollars per month	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string rent ) ) ( string >= ) ( call SW.ensureNumericEntity ( number 1500 en.dollar ) ) ) )
looking for a quiet neighborhood	( call SW.listValue ( call SW.countSuperlative ( call SW.getProperty ( call SW.singleton en.neighborhood ) ( string ! type ) ) ( string min ) ( call SW.reverse ( string neighborhood ) ) ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ) )
what kind of housing type is the only of its kind	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.housing ) ( string ! type ) ) ( call SW.reverse ( string housing_type ) ) ( string < ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ) )
housing with a private room and bath	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( string has_private_room ) ) ( string has_private_bath ) ) )
housing posted the most recently	( call SW.listValue ( call SW.superlative ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( string max ) ( call SW.ensureNumericProperty ( string posting_date ) ) ) )
housing with any monthly rent posted on january 2	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( string rent ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( string posting_date ) ( string = ) ( date 2015 1 2 ) ) ) )
which housing offers less than two kinds of units	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( string housing_type ) ( string < ) ( number 2 ) ) )
cats permitted in unit	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( string allows_cats ) ) )
housing unit posted after january 2 or february 3	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string posting_date ) ) ( string > ) ( call SW.ensureNumericEntity ( call SW.concat ( date 2015 1 2 ) ( date 2015 2 3 ) ) ) ) )
apartments are 1500	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( string housing_type ) ( string = ) en.housing.apartment ) ( string rent ) ( string = ) ( number 1500 en.dollar ) ) )
find housing units of the type apartment	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing ) ( string ! type ) ) ( call SW.reverse ( string housing_type ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( string housing_type ) ( string = ) en.housing.apartment ) ) )
which housing posted jan 2nd permits dogs	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( string allows_dogs ) ) ( string posting_date ) ( string = ) ( date 2015 1 2 ) ) )
housing that is less than 800 square feet	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string size ) ) ( string < ) ( call SW.ensureNumericEntity ( number 800 en.square_feet ) ) ) )
which housing unit is available for a price of less than 1500 dollars	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( string rent ) ( string ! = ) ( number 1500 en.dollar ) ) )
find a housing unit that is in two neighborhoods	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( string neighborhood ) ( string = ) ( number 2 ) ) )
apartments with a private bathroom in midtown west	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( string has_private_bath ) ) ( string neighborhood ) ( string = ) en.neighborhood.midtown_west ) )
how large is the unit at 123 sesame street	( call SW.listValue ( call SW.getProperty en.housing_unit.123_sesame_street ( string size ) ) )
which housing unit permits cats in it	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( string allows_cats ) ) )
what is the average price of apartments	( call SW.listValue ( call SW.aggregate ( string avg ) ( call SW.getProperty ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( string rent ) ) ) )
which housing unit is smaller than 800 square feet or 1000 square feet by area	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string size ) ) ( string < ) ( call SW.ensureNumericEntity ( call SW.concat ( number 800 en.square_feet ) ( number 1000 en.square_feet ) ) ) ) )
housing kind of 123 sesame street that was posted on january 2	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( string posting_date ) ( string = ) ( date 2015 1 2 ) ) ( call SW.reverse ( string housing_type ) ) ( string = ) en.housing_unit.123_sesame_street ) )
find housing units with 1500 dollars to 2000 as rent	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string rent ) ) ( string <= ) ( call SW.ensureNumericEntity ( call SW.concat ( number 1500 en.dollar ) ( number 2000 en.dollar ) ) ) ) )
what housing is cat friendly and costs 1500 dollars	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( string allows_cats ) ) ( string rent ) ( string = ) ( number 1500 en.dollar ) ) )
which neighborhoods have housing where dogs are allowed	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.neighborhood ) ( string ! type ) ) ( call SW.reverse ( string neighborhood ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( string allows_dogs ) ) ) )
what housing unit posted on jan 2 is the same size as 123 sesame street	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( string posting_date ) ( string = ) ( date 2015 1 2 ) ) ( call SW.reverse ( string size ) ) ( string = ) en.housing_unit.123_sesame_street ) )
what is the area of 123 sesame street	( call SW.listValue ( call SW.getProperty en.housing_unit.123_sesame_street ( string size ) ) )
what are housing types found in the neighborhoods of midtown west	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing ) ( string ! type ) ) ( call SW.reverse ( string housing_type ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( string neighborhood ) ( string = ) en.neighborhood.midtown_west ) ) )
800 square foot apartment with rent at 1500 a month	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( string size ) ( string = ) ( number 800 en.square_feet ) ) ( string rent ) ( string = ) ( number 1500 en.dollar ) ) )
which housing unit has the highest rent per month	( call SW.listValue ( call SW.superlative ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( string max ) ( call SW.ensureNumericProperty ( string rent ) ) ) )
housing unit that is cheaper than 1500 dollars	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string rent ) ) ( string < ) ( call SW.ensureNumericEntity ( number 1500 en.dollar ) ) ) )
apartment with a private bathroom for rent at 1500	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( string rent ) ( string = ) ( number 1500 en.dollar ) ) ( string has_private_bath ) ) )
which housing unit resembles that of 123 sesame street	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( string housing_type ) ( string = ) ( call SW.getProperty en.housing_unit.123_sesame_street ( string housing_type ) ) ) )
apartment with a master bathroom in midtown west neighbourhood	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( string neighborhood ) ( string = ) en.neighborhood.midtown_west ) ( string has_private_bath ) ) )
what is the biggest housing unit	( call SW.listValue ( call SW.superlative ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( string max ) ( call SW.ensureNumericProperty ( string size ) ) ) )
housing with posting date of january 2	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing ) ( string ! type ) ) ( call SW.reverse ( string housing_type ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( string posting_date ) ( string = ) ( date 2015 1 2 ) ) ) )
find housing units that are pet friendly	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( string allows_dogs ) ) ( string allows_dogs ) ) )
a neighborhood with at most twohouse units	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.neighborhood ) ( string ! type ) ) ( call SW.reverse ( string neighborhood ) ) ( string <= ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ) )
apartment in midtown west	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( string housing_type ) ( string = ) en.housing.apartment ) ( string neighborhood ) ( string = ) en.neighborhood.midtown_west ) )
catfriendly apartments with a private bathroom	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( string has_private_bath ) ) ( string allows_cats ) ) )
dogfriendly apartment with a private bathroom	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( string has_private_bath ) ) ( string allows_dogs ) ) )
what housing unit posted on jan 2 has the same rent as 123 sesame street	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( string posting_date ) ( string = ) ( date 2015 1 2 ) ) ( call SW.reverse ( string rent ) ) ( string = ) en.housing_unit.123_sesame_street ) )
which housing unit permits dogs and has the facility of a private room	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( string has_private_room ) ) ( string allows_dogs ) ) )
which housing unit has a rent of 1500 dollars or 2000 dollars per month	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string rent ) ) ( string > ) ( call SW.ensureNumericEntity ( call SW.concat ( number 1500 en.dollar ) ( number 2000 en.dollar ) ) ) ) )
housing that is at least 1500month or at least 2000month	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string rent ) ) ( string >= ) ( call SW.ensureNumericEntity ( call SW.concat ( number 1500 en.dollar ) ( number 2000 en.dollar ) ) ) ) )
rent between 1500 and 2000 dollars	( call SW.listValue ( call SW.concat ( number 1500 en.dollar ) ( number 2000 en.dollar ) ) )
looking for apartments	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( string housing_type ) ( string = ) en.housing.apartment ) ( string housing_type ) ( string = ) en.housing.apartment ) )
cat friendly apartments in midtown west	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( string neighborhood ) ( string = ) en.neighborhood.midtown_west ) ( string allows_cats ) ) )
what kind of housing is 900 mission ave and 123 sesame street	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing ) ( string ! type ) ) ( call SW.reverse ( string housing_type ) ) ( string = ) ( call SW.concat en.housing_unit.123_sesame_street en.housing_unit.900_mission_ave ) ) )
which housing unit has a lesser monthly rent than 123 sesame street	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string rent ) ) ( string < ) ( call SW.ensureNumericEntity ( call SW.getProperty en.housing_unit.123_sesame_street ( string rent ) ) ) ) )
what housing units are at least 800 or 1000 square feet	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string size ) ) ( string >= ) ( call SW.ensureNumericEntity ( call SW.concat ( number 800 en.square_feet ) ( number 1000 en.square_feet ) ) ) ) )
which housing unit has a monthly rent of less than 1500 dollars	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string rent ) ) ( string < ) ( call SW.ensureNumericEntity ( number 1500 en.dollar ) ) ) )
neighborhood of housing unit whose monthly rent is 1500 dollars	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.neighborhood ) ( string ! type ) ) ( call SW.reverse ( string neighborhood ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( string rent ) ( string = ) ( number 1500 en.dollar ) ) ) )
housing that is more than 1500month or more than 2000month	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string rent ) ) ( string > ) ( call SW.ensureNumericEntity ( call SW.concat ( number 1500 en.dollar ) ( number 2000 en.dollar ) ) ) ) )
find 800 square feet sized housing units	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( string size ) ( string = ) ( number 800 en.square_feet ) ) )
apartments that allow dogs	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( string allows_dogs ) ) )
unit of 800 square feet	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing ) ( string ! type ) ) ( call SW.reverse ( string housing_type ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( string size ) ( string = ) ( number 800 en.square_feet ) ) ) )
dogfriendly 800 square foot apartment	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( string size ) ( string = ) ( number 800 en.square_feet ) ) ( string allows_dogs ) ) )
which housing posted on a date other than january 2nd	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( string posting_date ) ( string ! = ) ( date 2015 1 2 ) ) )
housing that allows cats and includes a private room	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( string has_private_room ) ) ( string allows_cats ) ) )
which housing unit has two types minimum	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( string housing_type ) ( string >= ) ( number 2 ) ) )
800 square foot apartment with private bathroom	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( string size ) ( string = ) ( number 800 en.square_feet ) ) ( string has_private_bath ) ) )
which housing unit permits cats inside it	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( string allows_cats ) ) ( string allows_cats ) ) )
find apartments with a private bath	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( string housing_type ) ( string = ) en.housing.apartment ) ( string has_private_bath ) ) )
what is the house number of the apartment	( call SW.listValue ( call .size ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ) )
what kind of housing is in 123 sesame street	( call SW.listValue ( call SW.getProperty en.housing_unit.123_sesame_street ( string neighborhood ) ) )
housing unit with a cheaper rent than 123 sesame street	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string rent ) ) ( string < ) ( call SW.ensureNumericEntity ( call SW.getProperty en.housing_unit.123_sesame_street ( string rent ) ) ) ) )
which housing unit has  the variety of houses	( call SW.listValue ( call SW.countSuperlative ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( string max ) ( string housing_type ) ) )
housing that allows dogs and was posted on january 2	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( string posting_date ) ( string = ) ( date 2015 1 2 ) ) ( string allows_dogs ) ) )
what kind of housing offers 800 square feet and allows cats	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( string size ) ( string = ) ( number 800 en.square_feet ) ) ( string allows_cats ) ) )
what housing unit in the same neighborhood as 123 sesame street was posted on jan 2	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( string posting_date ) ( string = ) ( date 2015 1 2 ) ) ( call SW.reverse ( string neighborhood ) ) ( string = ) en.housing_unit.123_sesame_street ) )
apartments that were posted on january 2	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( string housing_type ) ( string = ) en.housing.apartment ) ( string posting_date ) ( string = ) ( date 2015 1 2 ) ) )
neighborhood with apartments	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.neighborhood ) ( string ! type ) ) ( call SW.reverse ( string neighborhood ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( string housing_type ) ( string = ) en.housing.apartment ) ) )
apartments with rent between 1500 to 2000 dollars	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string rent ) ) ( string > ) ( call SW.ensureNumericEntity ( call SW.concat ( number 1500 en.dollar ) ( number 2000 en.dollar ) ) ) ) )
what kind of housing has two housing types	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( string housing_type ) ( string >= ) ( number 2 ) ) )
housing apartments that allow dogs	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( string allows_dogs ) ) ( string housing_type ) ( string = ) en.housing.apartment ) )
find a housing unit posted on january 2 with the same rent price as 123 sesame st	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( string posting_date ) ( string = ) ( date 2015 1 2 ) ) ( call SW.reverse ( string rent ) ) ( string = ) en.housing_unit.123_sesame_street ) )
800 square food housing units that have private baths	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( string has_private_room ) ) ( string size ) ( string = ) ( number 800 en.square_feet ) ) )
housing with no more than two housing units	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.housing ) ( string ! type ) ) ( call SW.reverse ( string housing_type ) ) ( string <= ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ) )
how many different housing types are there	( call SW.listValue ( call .size ( call SW.getProperty ( call SW.singleton en.housing ) ( string ! type ) ) ) )
what is the rent of 123 sesame street per month	( call SW.listValue ( call SW.getProperty en.housing_unit.123_sesame_street ( string rent ) ) )
housing posted before or on the same day as 123 sesame street	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string posting_date ) ) ( string <= ) ( call SW.ensureNumericEntity ( call SW.getProperty en.housing_unit.123_sesame_street ( string posting_date ) ) ) ) )
what kind of housing is 800 square feet	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing ) ( string ! type ) ) ( call SW.reverse ( string housing_type ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( string size ) ( string = ) ( number 800 en.square_feet ) ) ) )
housing that allows cats and includes a private bath	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( string allows_cats ) ) ( string has_private_bath ) ) )
housing with 1500 dollars rent that has a private bath	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( string rent ) ( string = ) ( number 1500 en.dollar ) ) ( string has_private_bath ) ) )
housing typical of 123 sesame street housing posted on january 2	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( string posting_date ) ( string = ) ( date 2015 1 2 ) ) ( call SW.reverse ( string size ) ) ( string = ) en.housing_unit.123_sesame_street ) )
find housing units with rental charges greater than 123 sesame street	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string rent ) ) ( string > ) ( call SW.ensureNumericEntity ( call SW.getProperty en.housing_unit.123_sesame_street ( string rent ) ) ) ) )
show me housing available for 1500 dollars a month or less	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string rent ) ) ( string <= ) ( call SW.ensureNumericEntity ( number 1500 en.dollar ) ) ) )
a housing unit with a private bath that posted on january 2	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( string has_private_bath ) ) ( string posting_date ) ( string = ) ( date 2015 1 2 ) ) )
what is the housing type at 123 sesame street	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing ) ( string ! type ) ) ( call SW.reverse ( string housing_type ) ) ( string = ) en.housing_unit.123_sesame_street ) )
housing that is at least as expensive as 123 sesame street	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string rent ) ) ( string >= ) ( call SW.ensureNumericEntity ( call SW.getProperty en.housing_unit.123_sesame_street ( string rent ) ) ) ) )
housing that was posted on january 2	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string posting_date ) ) ( string >= ) ( call SW.ensureNumericEntity ( date 2015 1 2 ) ) ) )
show me apartments with a private room	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( string housing_type ) ( string = ) en.housing.apartment ) ( string has_private_room ) ) )
posting with at least two types of housing	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( string housing_type ) ( string >= ) ( number 2 ) ) )
housing unit with same housing type as that of 123 sesame street	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( string housing_type ) ( string = ) ( call SW.getProperty en.housing_unit.123_sesame_street ( string housing_type ) ) ) )
which housing unit has a monthly rent of more than 1000 dollars	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string rent ) ) ( string > ) ( call SW.ensureNumericEntity ( number 1500 en.dollar ) ) ) )
apartment with private bath	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( string has_private_bath ) ) ( string housing_type ) ( string = ) en.housing.apartment ) )
which housing posted no earlier than jan 2nd or feb 3rd	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string posting_date ) ) ( string >= ) ( call SW.ensureNumericEntity ( call SW.concat ( date 2015 1 2 ) ( date 2015 2 3 ) ) ) ) )
housing unit at most 800 square feet	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string size ) ) ( string <= ) ( call SW.ensureNumericEntity ( number 800 en.square_feet ) ) ) )
a neighborhood with fewer than twohouse units	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.neighborhood ) ( string ! type ) ) ( call SW.reverse ( string neighborhood ) ) ( string < ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ) )
looking for housing that isnt an apartment	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( string housing_type ) ( string ! = ) en.housing.apartment ) )
which housing unit has  an area of 800 or 1000 square feet	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( string size ) ( string = ) ( call SW.concat ( number 800 en.square_feet ) ( number 1000 en.square_feet ) ) ) )
neighborhoods that have more than two units	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.neighborhood ) ( string ! type ) ) ( call SW.reverse ( string neighborhood ) ) ( string > ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ) )
find housing between 800 and 1000 square feet	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( string size ) ( string = ) ( call SW.concat ( number 800 en.square_feet ) ( number 1000 en.square_feet ) ) ) )
what midtown west housing allows cats	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( string allows_cats ) ) ( string neighborhood ) ( string = ) en.neighborhood.midtown_west ) )
what neighborhood is 123 sesame street in	( call SW.listValue ( call SW.getProperty en.housing_unit.123_sesame_street ( string neighborhood ) ) )
what is the other areas around midtown west that has housing units	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.neighborhood ) ( string ! type ) ) ( call SW.reverse ( string neighborhood ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( string neighborhood ) ( string = ) en.neighborhood.midtown_west ) ) )
condominium or apartment housing	( call SW.listValue ( call SW.concat en.housing.apartment en.housing.condo ) )
apartments in the midtown west neighborhood	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( string housing_type ) ( string = ) en.housing.apartment ) ( string neighborhood ) ( string = ) en.neighborhood.midtown_west ) )
a housing unit in midtown west that was posted on january 2	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( string neighborhood ) ( string = ) en.neighborhood.midtown_west ) ( string posting_date ) ( string = ) ( date 2015 1 2 ) ) )
what housing unit is in the same neighborhood as the unit posted on jan 2	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( string neighborhood ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( string posting_date ) ( string = ) ( date 2015 1 2 ) ) ) )
which housing unit has the smallest size	( call SW.listValue ( call SW.superlative ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( string min ) ( call SW.ensureNumericProperty ( string size ) ) ) )
find housing units in the neighborhoods of midtown west with 1500 dollars as monthly rent	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( string neighborhood ) ( string = ) en.neighborhood.midtown_west ) ( string rent ) ( string = ) ( number 1500 en.dollar ) ) )
what housing unit was posted on jan 2	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( string posting_date ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( string posting_date ) ( string = ) ( date 2015 1 2 ) ) ) )
which housing unit is posted on or before jan 2	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string posting_date ) ) ( string <= ) ( call SW.ensureNumericEntity ( date 2015 1 2 ) ) ) )
800 square foot housing unit with a private room	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( string size ) ( string = ) ( number 800 en.square_feet ) ) ( string has_private_room ) ) )
cheapest housing	( call SW.listValue ( call SW.superlative ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( string min ) ( call SW.ensureNumericProperty ( string rent ) ) ) )
unit of average size	( call SW.listValue ( call SW.aggregate ( string avg ) ( call SW.getProperty ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( string size ) ) ) )
what are the rare housing types	( call SW.listValue ( call SW.countSuperlative ( call SW.getProperty ( call SW.singleton en.housing ) ( string ! type ) ) ( string min ) ( call SW.reverse ( string housing_type ) ) ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ) )
housing in more than two neighborhoods	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( string neighborhood ) ( string > ) ( number 2 ) ) )
housing that is 800 square feet or bigger	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string size ) ) ( string >= ) ( call SW.ensureNumericEntity ( number 800 en.square_feet ) ) ) )
an apartment that was posted on january 2	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( string posting_date ) ( string = ) ( date 2015 1 2 ) ) ( string housing_type ) ( string = ) en.housing.apartment ) )
which housing unit with an area of 800 square feet is available fora rent of 1500 dollars per month	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( string size ) ( string = ) ( number 800 en.square_feet ) ) ( string rent ) ( string = ) ( number 1500 en.dollar ) ) )
what neighborhood has the most apartment complexes	( call SW.listValue ( call SW.countSuperlative ( call SW.getProperty ( call SW.singleton en.neighborhood ) ( string ! type ) ) ( string max ) ( call SW.reverse ( string neighborhood ) ) ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ) )
housing type posted january 2	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing ) ( string ! type ) ) ( call SW.reverse ( string housing_type ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( string posting_date ) ( string = ) ( date 2015 1 2 ) ) ) )
find housing that has a private room and bath	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( string has_private_bath ) ) ( string has_private_room ) ) )
housing with with largest posting date	( call SW.listValue ( call SW.superlative ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( string max ) ( call SW.ensureNumericProperty ( string posting_date ) ) ) )
800 square feet housing that allows dogs	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( string allows_dogs ) ) ( string size ) ( string = ) ( number 800 en.square_feet ) ) )
housing unit that allows dogs and cats	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( string allows_dogs ) ) ( string allows_cats ) ) )
apartment with a master bathroom	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( string has_private_bath ) ) )
housing unit with a private room and allows cats	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( string has_private_room ) ) ( string allows_cats ) ) )
a housing unit that was posted on january 2	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( string housing_type ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( string posting_date ) ( string = ) ( date 2015 1 2 ) ) ) )
find housing units posted before or on the same date as 123 sesame street	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string posting_date ) ) ( string <= ) ( call SW.ensureNumericEntity ( call SW.getProperty en.housing_unit.123_sesame_street ( string posting_date ) ) ) ) )
january 2 to february 3	( call SW.listValue ( call SW.concat ( date 2015 1 2 ) ( date 2015 2 3 ) ) )
housing unit with a private room in midtown west	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( string neighborhood ) ( string = ) en.neighborhood.midtown_west ) ( string has_private_room ) ) )
apartment with a private bath for rent at 1500	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( string has_private_bath ) ) ( string rent ) ( string = ) ( number 1500 en.dollar ) ) )
what neighborhood has the least amount of housing	( call SW.listValue ( call SW.countSuperlative ( call SW.getProperty ( call SW.singleton en.neighborhood ) ( string ! type ) ) ( string min ) ( call SW.reverse ( string neighborhood ) ) ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ) )
housing that was posted after january 2 or february 3	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string posting_date ) ) ( string > ) ( call SW.ensureNumericEntity ( call SW.concat ( date 2015 1 2 ) ( date 2015 2 3 ) ) ) ) )
housing units outsizing 123 sesame street	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.housing_unit ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string size ) ) ( string > ) ( call SW.ensureNumericEntity ( call SW.getProperty en.housing_unit.123_sesame_street ( string size ) ) ) ) )
what article has a venue of multivariate data analysis	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( string venue ) ( string = ) ( call SW.getProperty en.article.multivariate_data_analysis ( string venue ) ) ) )
articles that cites at least two article	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( call SW.reverse ( string cites ) ) ( string >= ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ) )
venues of fewer than two articles	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.venue ) ( string ! type ) ) ( call SW.reverse ( string venue ) ) ( string < ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ) )
articles cited by multivariate data analysis and published in annals of statistics	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( call SW.reverse ( string cites ) ) ( string = ) en.article.multivariate_data_analysis ) ( string venue ) ( string = ) en.venue.annals_of_statistics ) )
articles that mention three or more cities	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( string cites ) ( string > ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ) )
author of more than two articles	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.reverse ( string author ) ) ( string > ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ) )
venue of only one article	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.venue ) ( string ! type ) ) ( call SW.reverse ( string venue ) ) ( string < ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ) )
articles published in 2004 cited by multivariate data analysis	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( string publication_date ) ( string = ) ( date 2004 -1 -1 ) ) ( call SW.reverse ( string cites ) ) ( string = ) en.article.multivariate_data_analysis ) )
name an article found in two or more venues	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( string venue ) ( string >= ) ( number 2 ) ) )
what article cites other articles	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( string cites ) ( string > ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ) )
what article has been cited less than twice	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( call SW.reverse ( string cites ) ) ( string < ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ) )
what article written by efron cites multivariate data analysis	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( string author ) ( string = ) en.person.efron ) ( string cites ) ( string = ) en.article.multivariate_data_analysis ) )
articles cited by articles in annals of statistics	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( call SW.reverse ( string cites ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( string venue ) ( string = ) en.venue.annals_of_statistics ) ) )
award winning article cited by multivariate data analysis	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( string won_award ) ) ( call SW.reverse ( string cites ) ) ( string = ) en.article.multivariate_data_analysis ) )
articles with a venue	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( string venue ) ( string < ) ( number 2 ) ) )
which article is mentioned in least number of other articles	( call SW.listValue ( call SW.countSuperlative ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( string min ) ( call SW.reverse ( string cites ) ) ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ) )
who is the author of whose venue is annals of statistics	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.reverse ( string author ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( string venue ) ( string = ) en.venue.annals_of_statistics ) ) )
article whose publication date is at least 2004	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string publication_date ) ) ( string >= ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) )
what article was published after 2004	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string publication_date ) ) ( string > ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) )
any article that cites another article published in annals of statistics	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( string cites ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( string venue ) ( string = ) en.venue.annals_of_statistics ) ) )
articles cited by efron	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( call SW.reverse ( string cites ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( string author ) ( string = ) en.person.efron ) ) )
which article was published  in more than two magazines	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( string venue ) ( string > ) ( number 2 ) ) )
what articles are published in multivariate data analysis	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( call SW.reverse ( string cites ) ) ( string = ) en.article.multivariate_data_analysis ) )
what is an article that has two venues	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( string venue ) ( string = ) ( number 2 ) ) )
find an article with no more than two venues	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( string venue ) ( string <= ) ( number 2 ) ) )
award winning article whose venue is annals of statistics	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( string venue ) ( string = ) en.venue.annals_of_statistics ) ( string won_award ) ) )
articles written by efron and cited by multivariate data analysis	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( string author ) ( string = ) en.person.efron ) ( call SW.reverse ( string cites ) ) ( string = ) en.article.multivariate_data_analysis ) )
articles cited by studies using multivariate data analysis	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( call SW.reverse ( string cites ) ) ( string = ) en.article.multivariate_data_analysis ) ( call SW.reverse ( string cites ) ) ( string = ) en.article.multivariate_data_analysis ) )
article that was awarded	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( string won_award ) ) ( string won_award ) ) )
venue in most of the articles	( call SW.listValue ( call SW.countSuperlative ( call SW.getProperty ( call SW.singleton en.venue ) ( string ! type ) ) ( string max ) ( call SW.reverse ( string venue ) ) ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ) )
articles published after multivariate data analysis	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string publication_date ) ) ( string > ) ( call SW.ensureNumericEntity ( call SW.getProperty en.article.multivariate_data_analysis ( string publication_date ) ) ) ) )
articles published in more than two venues	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( string venue ) ( string > ) ( number 2 ) ) )
find the author of an award winning article	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.reverse ( string author ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( string won_award ) ) ) )
an article on statistics that cites multivariate data analysis	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( string cites ) ( string = ) en.article.multivariate_data_analysis ) ( string venue ) ( string = ) en.venue.annals_of_statistics ) )
what is an article in annals of statistics about multivariate data analysis	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( call SW.reverse ( string cites ) ) ( string = ) en.article.multivariate_data_analysis ) ( string venue ) ( string = ) en.venue.annals_of_statistics ) )
article whose venue is annals of statistics and that won an award	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( string venue ) ( string = ) en.venue.annals_of_statistics ) ( string won_award ) ) )
what articles have under two authors	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( string author ) ( string < ) ( number 2 ) ) )
what article has a publication date greater than 2004	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string publication_date ) ) ( string > ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) )
venue that is venue of article whose author is efron	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.venue ) ( string ! type ) ) ( call SW.reverse ( string venue ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( string author ) ( string = ) en.person.efron ) ) )
articles that won an award written by efron	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( string author ) ( string = ) en.person.efron ) ( string won_award ) ) )
articles published in the same publication as multivariate data analysis	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( string venue ) ( string = ) ( call SW.getProperty en.article.multivariate_data_analysis ( string venue ) ) ) )
articles that do not cite multivariate data analysis	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( string cites ) ( string ! = ) en.article.multivariate_data_analysis ) )
articles that cities maximum two articles	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( string cites ) ( string <= ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ) )
which article is mentioned in most number of articles	( call SW.listValue ( call SW.countSuperlative ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( string max ) ( call SW.reverse ( string cites ) ) ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ) )
what is the persons number	( call SW.listValue ( call .size ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ) )
articles published between 2004 and 2010	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string publication_date ) ) ( string <= ) ( call SW.ensureNumericEntity ( call SW.concat ( date 2004 -1 -1 ) ( date 2010 -1 -1 ) ) ) ) )
what author wrote the least number of articles	( call SW.listValue ( call SW.countSuperlative ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string min ) ( call SW.reverse ( string author ) ) ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ) )
what article was cited the most	( call SW.listValue ( call SW.countSuperlative ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( string max ) ( call SW.reverse ( string cites ) ) ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ) )
find any article that efron didnt write	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( string author ) ( string ! = ) en.person.efron ) )
articles published before multivariate data analysis	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string publication_date ) ) ( string < ) ( call SW.ensureNumericEntity ( call SW.getProperty en.article.multivariate_data_analysis ( string publication_date ) ) ) ) )
articles published before 2004	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string publication_date ) ) ( string < ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) )
authors of multiple articles	( call SW.listValue ( call SW.countSuperlative ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string min ) ( call SW.reverse ( string author ) ) ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ) )
articles published in 2004 citations	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( call SW.reverse ( string cites ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( string publication_date ) ( string = ) ( date 2004 -1 -1 ) ) ) )
what article has a publication date earlier than 2004	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string publication_date ) ) ( string < ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) )
what article is written by efron and won an award	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( string author ) ( string = ) en.person.efron ) ( string won_award ) ) )
articles published in the fewest venues	( call SW.listValue ( call SW.countSuperlative ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( string min ) ( string venue ) ) )
venues that published in 2004	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.venue ) ( string ! type ) ) ( call SW.reverse ( string venue ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( string publication_date ) ( string = ) ( date 2004 -1 -1 ) ) ) )
what author has written more than two articles	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.reverse ( string author ) ) ( string > ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ) )
articles that cite the most articles	( call SW.listValue ( call SW.countSuperlative ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( string max ) ( string cites ) ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ) )
author of article citing multivariate data analysis	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( string cites ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( string cites ) ( string = ) en.article.multivariate_data_analysis ) ) )
articles found in at most two publications	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( string venue ) ( string <= ) ( number 2 ) ) )
venue of two articles	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.venue ) ( string ! type ) ) ( call SW.reverse ( string venue ) ) ( string = ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ) )
name the author of an article about multivariate data analysis	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.reverse ( string author ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( call SW.reverse ( string cites ) ) ( string = ) en.article.multivariate_data_analysis ) ) )
name an article citing multivariate data analysis	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( call SW.reverse ( string cites ) ) ( string = ) en.article.multivariate_data_analysis ) ( call SW.reverse ( string cites ) ) ( string = ) en.article.multivariate_data_analysis ) )
article that cites two or more articles	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( string cites ) ( string >= ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ) )
article not citing multivariate data analysis	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( call SW.reverse ( string cites ) ) ( string ! = ) en.article.multivariate_data_analysis ) )
articles published after 2010	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string publication_date ) ) ( string > ) ( call SW.ensureNumericEntity ( call SW.concat ( date 2004 -1 -1 ) ( date 2010 -1 -1 ) ) ) ) )
what is the venue of an article that cites multivariate data analysis	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.venue ) ( string ! type ) ) ( call SW.reverse ( string venue ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( call SW.reverse ( string cites ) ) ( string = ) en.article.multivariate_data_analysis ) ) )
author of two articles	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.reverse ( string author ) ) ( string = ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ) )
name an article found in at least two publications	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( string venue ) ( string >= ) ( number 2 ) ) )
articles cited by two other articles	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( call SW.reverse ( string cites ) ) ( string = ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ) )
what article was published in 2010 or earlier	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string publication_date ) ) ( string <= ) ( call SW.ensureNumericEntity ( call SW.concat ( date 2004 -1 -1 ) ( date 2010 -1 -1 ) ) ) ) )
name an article with more than two authors	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( string author ) ( string > ) ( number 2 ) ) )
find an article in the annals of statistics venue	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( string venue ) ( string = ) en.venue.annals_of_statistics ) )
what article won an award	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( string won_award ) ) )
article whose author is author of multivariate data analysis	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( string author ) ( string = ) ( call SW.getProperty en.article.multivariate_data_analysis ( string author ) ) ) )
articles citing multivariate data analysis written by efron	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( call SW.reverse ( string cites ) ) ( string = ) en.article.multivariate_data_analysis ) ( string author ) ( string = ) en.person.efron ) )
articles cited by fewer than two articles	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( call SW.reverse ( string cites ) ) ( string < ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ) )
what are some articles unrelated to annals of statistics	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( string venue ) ( string ! = ) en.venue.annals_of_statistics ) )
name an article published in 2004	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( call SW.reverse ( string cites ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( string publication_date ) ( string = ) ( date 2004 -1 -1 ) ) ) )
what article has two venues minimum	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( string venue ) ( string >= ) ( number 2 ) ) )
awardwinning articles cited in multivariate data analysis	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( call SW.reverse ( string cites ) ) ( string = ) en.article.multivariate_data_analysis ) ( string won_award ) ) )
writer of two articles	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.reverse ( string author ) ) ( string = ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ) )
articles not published in annals of statistics	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( string venue ) ( string ! = ) en.venue.annals_of_statistics ) )
what article cites at least two other articles	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( string cites ) ( string >= ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ) )
name a person who is the author of an article about multivariate data analysis	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.reverse ( string author ) ) ( string = ) en.article.multivariate_data_analysis ) ( call SW.reverse ( string author ) ) ( string = ) en.article.multivariate_data_analysis ) )
who is the author of less than two articles	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.reverse ( string author ) ) ( string < ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ) )
articles written by at least two authors	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( string author ) ( string >= ) ( number 2 ) ) )
what article cites an article cited in multivariate data analysis	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( call SW.reverse ( string cites ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( call SW.reverse ( string cites ) ) ( string = ) en.article.multivariate_data_analysis ) ) )
what is the article with the oldest publication date	( call SW.listValue ( call SW.superlative ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( string min ) ( call SW.ensureNumericProperty ( string publication_date ) ) ) )
article with more than two venue	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( string venue ) ( string > ) ( number 2 ) ) )
article whose venue is annals of statistics	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( call SW.reverse ( string cites ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( string venue ) ( string = ) en.venue.annals_of_statistics ) ) )
article with publication date as 2004 or 2010	( call SW.listValue ( call SW.concat ( date 2004 -1 -1 ) ( date 2010 -1 -1 ) ) )
article published in annals of statistics	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( string venue ) ( string = ) en.venue.annals_of_statistics ) ( string venue ) ( string = ) en.venue.annals_of_statistics ) )
award winning article published by annals of statistics	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( string venue ) ( string = ) en.venue.annals_of_statistics ) ( string won_award ) ) )
articles cited by multivariate data analysis and written by efron	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( call SW.reverse ( string cites ) ) ( string = ) en.article.multivariate_data_analysis ) ( string author ) ( string = ) en.person.efron ) )
find an article published after 2004	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string publication_date ) ) ( string > ) ( call SW.ensureNumericEntity ( call SW.concat ( date 2004 -1 -1 ) ( date 2010 -1 -1 ) ) ) ) )
name articles in annals of statistics	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.venue ) ( string ! type ) ) ( call SW.reverse ( string venue ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( string venue ) ( string = ) en.venue.annals_of_statistics ) ) )
what article is cited by an article in annals of statistics	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( call SW.reverse ( string cites ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( string venue ) ( string = ) en.venue.annals_of_statistics ) ) )
an article by efron that cites multivariate data analysis	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( string author ) ( string = ) en.person.efron ) ( call SW.reverse ( string cites ) ) ( string = ) en.article.multivariate_data_analysis ) )
what is the date of publication  for multivariate data analysis	( call SW.listValue ( call SW.getProperty en.article.multivariate_data_analysis ( string publication_date ) ) )
who is the author of a multivariate data analysis	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.reverse ( string author ) ) ( string = ) en.article.multivariate_data_analysis ) ( call SW.reverse ( string author ) ) ( string = ) en.article.multivariate_data_analysis ) )
find an article published on or before multivariate data analysis	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string publication_date ) ) ( string <= ) ( call SW.ensureNumericEntity ( call SW.getProperty en.article.multivariate_data_analysis ( string publication_date ) ) ) ) )
what articles were written by efron	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.venue ) ( string ! type ) ) ( call SW.reverse ( string venue ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( string author ) ( string = ) en.person.efron ) ) )
author with at most two article	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.reverse ( string author ) ) ( string <= ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ) )
who authored two or fewer articles	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.reverse ( string author ) ) ( string <= ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ) )
article citing multivariate data analysis published in 2004	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( call SW.reverse ( string cites ) ) ( string = ) en.article.multivariate_data_analysis ) ( string publication_date ) ( string = ) ( date 2004 -1 -1 ) ) )
article cited bymultivariate data analysis whose venue is annals of statistics	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( call SW.reverse ( string cites ) ) ( string = ) en.article.multivariate_data_analysis ) ( string venue ) ( string = ) en.venue.annals_of_statistics ) )
what article cites the most number of other articles	( call SW.listValue ( call SW.countSuperlative ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( string max ) ( string cites ) ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ) )
article with the largest amount of authors	( call SW.listValue ( call SW.countSuperlative ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( string max ) ( string author ) ) )
multivariate data analysis cited articles	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( string cites ) ( string = ) en.article.multivariate_data_analysis ) )
what article was written by efron and has a publication date of 2004	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( string author ) ( string = ) en.person.efron ) ( string publication_date ) ( string = ) ( date 2004 -1 -1 ) ) )
who has coauthored articles with efron	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.reverse ( string author ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( string author ) ( string = ) en.person.efron ) ) )
what is an article cited in a publication about multivariate data analysis	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( call SW.reverse ( string cites ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( call SW.reverse ( string cites ) ) ( string = ) en.article.multivariate_data_analysis ) ) )
articles that cite articles written by efron	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( string cites ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( string author ) ( string = ) en.person.efron ) ) )
which article cites multivariate data analysis	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( call SW.reverse ( string cites ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( string cites ) ( string = ) en.article.multivariate_data_analysis ) ) )
what article was cited by a 2004 article	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( call SW.reverse ( string cites ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( string publication_date ) ( string = ) ( date 2004 -1 -1 ) ) ) )
venues that have efrons article	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.venue ) ( string ! type ) ) ( call SW.reverse ( string venue ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( string author ) ( string = ) en.person.efron ) ) )
what article cites multivariate data analysis and is also its venue	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( string venue ) ( string = ) en.venue.annals_of_statistics ) ( string cites ) ( string = ) en.article.multivariate_data_analysis ) )
what author wrote two or more articles	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.reverse ( string author ) ) ( string >= ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ) )
article whose publication date is smaller than publication date of multivariate data analysis	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string publication_date ) ) ( string < ) ( call SW.ensureNumericEntity ( call SW.getProperty en.article.multivariate_data_analysis ( string publication_date ) ) ) ) )
author of only one article	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.reverse ( string author ) ) ( string < ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ) )
article whose author is efron or lakoff	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( string author ) ( string = ) ( call SW.concat en.person.efron en.person.lakoff ) ) )
authors of awardwinning articles	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.reverse ( string author ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( string won_award ) ) ) )
an article that cites multivariate data analysis published in 2004	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( call SW.reverse ( string cites ) ) ( string = ) en.article.multivariate_data_analysis ) ( string publication_date ) ( string = ) ( date 2004 -1 -1 ) ) )
what article is not cited in multivariate data analysis	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.article ) ( string ! type ) ) ( call SW.reverse ( string cites ) ) ( string ! = ) en.article.multivariate_data_analysis ) )
find recipes posted later than 2004 or 2010	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string posting_date ) ) ( string > ) ( call SW.ensureNumericEntity ( call SW.concat ( date 2004 -1 -1 ) ( date 2010 -1 -1 ) ) ) ) )
a recipe which takes longer to cook than the preparation time for rice pudding	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string cooking_time ) ) ( string > ) ( call SW.ensureNumericEntity ( call SW.getProperty en.recipe.rice_pudding ( string preparation_time ) ) ) ) )
which recipes take less or as long to prepare as rice pudding	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string preparation_time ) ) ( string <= ) ( call SW.ensureNumericEntity ( call SW.getProperty en.recipe.rice_pudding ( string preparation_time ) ) ) ) )
what ingredient is in two or less recipes	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.ingredient ) ( string ! type ) ) ( call SW.reverse ( string requires ) ) ( string <= ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ) )
find recipes posted before 2004	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string posting_date ) ) ( string < ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) )
show me recipes with a cooking time equal to the preparation time for rice pudding	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( string cooking_time ) ( string = ) ( call SW.getProperty en.recipe.rice_pudding ( string preparation_time ) ) ) )
which recipe takes longer to cook than rice pudding	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string cooking_time ) ) ( string > ) ( call SW.ensureNumericEntity ( call SW.getProperty en.recipe.rice_pudding ( string cooking_time ) ) ) ) )
show me recipes requiring milk	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( string requires ) ( string = ) en.ingredient.milk ) ( string requires ) ( string = ) en.ingredient.milk ) )
what is a recipe that takes no more time to cook than rice pudding	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string cooking_time ) ) ( string <= ) ( call SW.ensureNumericEntity ( call SW.getProperty en.recipe.rice_pudding ( string cooking_time ) ) ) ) )
show me recipe which take as much time as rice pudding	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( string preparation_time ) ( string = ) ( call SW.getProperty en.recipe.rice_pudding ( string cooking_time ) ) ) )
which recipes can be used for most number of meals	( call SW.listValue ( call SW.countSuperlative ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( string max ) ( string meal ) ( call SW.getProperty ( call SW.singleton en.meal ) ( string ! type ) ) ) )
what recipes  are prepared in less time tan rice pudding	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string preparation_time ) ) ( string < ) ( call SW.ensureNumericEntity ( call SW.getProperty en.recipe.rice_pudding ( string preparation_time ) ) ) ) )
which ingredient is needed in the least number of recipes	( call SW.listValue ( call SW.countSuperlative ( call SW.getProperty ( call SW.singleton en.ingredient ) ( string ! type ) ) ( string min ) ( call SW.reverse ( string requires ) ) ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ) )
what meal has two or fewer recipes designated for it	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.meal ) ( string ! type ) ) ( call SW.reverse ( string meal ) ) ( string <= ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ) )
what recipes require at leas two ingredients	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( string requires ) ( string >= ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.ingredient ) ( string ! type ) ) ) )
what recipe takes longer to cook than rice pudding	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string cooking_time ) ) ( string > ) ( call SW.ensureNumericEntity ( call SW.getProperty en.recipe.rice_pudding ( string cooking_time ) ) ) ) )
show me recipes that have a cooking time equal to the preparation time of rice pudding	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( string cooking_time ) ( string = ) ( call SW.getProperty en.recipe.rice_pudding ( string preparation_time ) ) ) )
what is a meal for which there are fewer than two recipes	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.meal ) ( string ! type ) ) ( call SW.reverse ( string meal ) ) ( string < ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ) )
show me recipes that use two ingredients or less	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( string requires ) ( string <= ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.ingredient ) ( string ! type ) ) ) )
what is the cooking time of rice pudding	( call SW.listValue ( call SW.getProperty en.recipe.rice_pudding ( string cooking_time ) ) )
preparation time of recipe  not more than that of rice pudding	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string preparation_time ) ) ( string <= ) ( call SW.ensureNumericEntity ( call SW.getProperty en.recipe.rice_pudding ( string cooking_time ) ) ) ) )
which recipe can be used for two or more meals	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( string meal ) ( string >= ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.meal ) ( string ! type ) ) ) )
what recipes preparation time is greater than that of rice pudding	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string preparation_time ) ) ( string > ) ( call SW.ensureNumericEntity ( call SW.getProperty en.recipe.rice_pudding ( string preparation_time ) ) ) ) )
show me ingredients required for fewer than two recipes	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.ingredient ) ( string ! type ) ) ( call SW.reverse ( string requires ) ) ( string < ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ) )
ingredients required in less than three recipes	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.ingredient ) ( string ! type ) ) ( call SW.reverse ( string requires ) ) ( string <= ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ) )
how long does the recipe take to prep	( call SW.listValue ( call SW.aggregate ( string sum ) ( call SW.getProperty ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( string preparation_time ) ) ) )
find recipes that can be used for  more than two meals	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( string meal ) ( string > ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.meal ) ( string ! type ) ) ) )
what recipe requires highest number of ingredients	( call SW.listValue ( call SW.countSuperlative ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( string max ) ( string requires ) ( call SW.getProperty ( call SW.singleton en.ingredient ) ( string ! type ) ) ) )
for which meal is that recipe with post date in 2004	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meal ) ( string ! type ) ) ( call SW.reverse ( string meal ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( string posting_date ) ( string = ) ( date 2004 -1 -1 ) ) ) )
what is a meal that incorporates rice pudding	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meal ) ( string ! type ) ) ( call SW.reverse ( string meal ) ) ( string = ) en.recipe.rice_pudding ) ( call SW.reverse ( string meal ) ) ( string = ) en.recipe.rice_pudding ) )
which recipes have at least 2 cuisines	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( string cuisine ) ( string >= ) ( number 2 ) ) )
what is the total prep time for the recipes	( call SW.listValue ( call SW.aggregate ( string sum ) ( call SW.getProperty ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( string preparation_time ) ) ) )
a recipe that posted after 2004 or 2010	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string posting_date ) ) ( string > ) ( call SW.ensureNumericEntity ( call SW.concat ( date 2004 -1 -1 ) ( date 2010 -1 -1 ) ) ) ) )
which recipe falls under the most kinds of cuisine	( call SW.listValue ( call SW.countSuperlative ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( string max ) ( string cuisine ) ) )
find recipes for all kinds of meals	( call SW.listValue ( call SW.countSuperlative ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( string max ) ( string meal ) ( call SW.getProperty ( call SW.singleton en.meal ) ( string ! type ) ) ) )
which recipe has a posting date smaller than 2004 or 2010	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string posting_date ) ) ( string < ) ( call SW.ensureNumericEntity ( call SW.concat ( date 2004 -1 -1 ) ( date 2010 -1 -1 ) ) ) ) )
a recipe with milk posted in 2004	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( string posting_date ) ( string = ) ( date 2004 -1 -1 ) ) ( string requires ) ( string = ) en.ingredient.milk ) )
what recipe has two or less types of cuisine	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( string cuisine ) ( string <= ) ( number 2 ) ) )
what ingredient is called for by the most recipes	( call SW.listValue ( call SW.countSuperlative ( call SW.getProperty ( call SW.singleton en.ingredient ) ( string ! type ) ) ( string max ) ( call SW.reverse ( string requires ) ) ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ) )
what type of cuisine is rice pudding	( call SW.listValue ( call SW.getProperty en.recipe.rice_pudding ( string cuisine ) ) )
show me recipes without milk	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( string requires ) ( string ! = ) en.ingredient.milk ) )
for what meal is rice pudding or quiche	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meal ) ( string ! type ) ) ( call SW.reverse ( string meal ) ) ( string = ) ( call SW.concat en.recipe.rice_pudding en.recipe.quiche ) ) )
a recipe which takes at least as long to cook as rice pudding	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string cooking_time ) ) ( string >= ) ( call SW.ensureNumericEntity ( call SW.getProperty en.recipe.rice_pudding ( string cooking_time ) ) ) ) )
which meal has two or more recipes	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.meal ) ( string ! type ) ) ( call SW.reverse ( string meal ) ) ( string >= ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ) )
which is the last posted recipe	( call SW.listValue ( call SW.superlative ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( string max ) ( call SW.ensureNumericProperty ( string posting_date ) ) ) )
which meals are recipes posted in 2004 for	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meal ) ( string ! type ) ) ( call SW.reverse ( string meal ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( string posting_date ) ( string = ) ( date 2004 -1 -1 ) ) ) )
show me recipes that take as long to prepare as rice pudding	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string preparation_time ) ) ( string <= ) ( call SW.ensureNumericEntity ( call SW.getProperty en.recipe.rice_pudding ( string preparation_time ) ) ) ) )
which meal has less than two recipes	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.meal ) ( string ! type ) ) ( call SW.reverse ( string meal ) ) ( string < ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ) )
recipes for two meal	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( string meal ) ( string = ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.meal ) ( string ! type ) ) ) )
what ingredient is in over two recipes	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.ingredient ) ( string ! type ) ) ( call SW.reverse ( string requires ) ) ( string > ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ) )
what recipes require milk and are for lunch	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( string meal ) ( string = ) en.meal.lunch ) ( string requires ) ( string = ) en.ingredient.milk ) )
show me recipes with a preparation time greater than rice pudding	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string preparation_time ) ) ( string > ) ( call SW.ensureNumericEntity ( call SW.getProperty en.recipe.rice_pudding ( string preparation_time ) ) ) ) )
recipe of number of ingredients	( call SW.listValue ( call SW.countSuperlative ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( string max ) ( string requires ) ( call SW.getProperty ( call SW.singleton en.ingredient ) ( string ! type ) ) ) )
what is a meal with rice pudding as a dish	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meal ) ( string ! type ) ) ( call SW.reverse ( string meal ) ) ( string = ) en.recipe.rice_pudding ) )
a recipe that uses two or more ingredients	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( string requires ) ( string >= ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.ingredient ) ( string ! type ) ) ) )
what recipe calls for over two ingredients	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( string requires ) ( string > ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.ingredient ) ( string ! type ) ) ) )
what is a recipe which was posted no later than 2004	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string posting_date ) ) ( string <= ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) )
what recipe takes longer to cook than rice pudding takes to prep	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string cooking_time ) ) ( string > ) ( call SW.ensureNumericEntity ( call SW.getProperty en.recipe.rice_pudding ( string preparation_time ) ) ) ) )
which is the food item that is needed in two recipes	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.ingredient ) ( string ! type ) ) ( call SW.reverse ( string requires ) ) ( string = ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ) )
show me recipe requiring milk posted in 2004	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( string requires ) ( string = ) en.ingredient.milk ) ( string posting_date ) ( string = ) ( date 2004 -1 -1 ) ) )
show me lunch recipes	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( string meal ) ( string = ) en.meal.lunch ) ( string meal ) ( string = ) en.meal.lunch ) )
show recipes that follow more than two cuisines	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( string cuisine ) ( string > ) ( number 2 ) ) )
what recipe takes less time to cook than rice pudding does to prepare	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string cooking_time ) ) ( string < ) ( call SW.ensureNumericEntity ( call SW.getProperty en.recipe.rice_pudding ( string preparation_time ) ) ) ) )
which recipe needs more than two ingredients	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( string requires ) ( string > ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.ingredient ) ( string ! type ) ) ) )
what ingredients are used by at least two recipes	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.ingredient ) ( string ! type ) ) ( call SW.reverse ( string requires ) ) ( string >= ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ) )
what is the meal that rice pudding goes with	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meal ) ( string ! type ) ) ( call SW.reverse ( string meal ) ) ( string = ) en.recipe.rice_pudding ) ( call SW.reverse ( string meal ) ) ( string = ) en.recipe.rice_pudding ) )
name ingredients that is required in  three or more recipes	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.ingredient ) ( string ! type ) ) ( call SW.reverse ( string requires ) ) ( string > ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ) )
recipes that requires the same or more time to prepare as rice pudding	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string preparation_time ) ) ( string >= ) ( call SW.ensureNumericEntity ( call SW.getProperty en.recipe.rice_pudding ( string cooking_time ) ) ) ) )
which recipe takes less time to prepare than rice pudding	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string cooking_time ) ) ( string < ) ( call SW.ensureNumericEntity ( call SW.getProperty en.recipe.rice_pudding ( string cooking_time ) ) ) ) )
what is a recipe that is for more than two different meals	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( string meal ) ( string > ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.meal ) ( string ! type ) ) ) )
find two meal recipes	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.meal ) ( string ! type ) ) ( call SW.reverse ( string meal ) ) ( string <= ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ) )
what is an ingredient found in rice pudding	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.ingredient ) ( string ! type ) ) ( call SW.reverse ( string requires ) ) ( string = ) en.recipe.rice_pudding ) )
what recipe takes more time to prepare than rice pudding	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string cooking_time ) ) ( string > ) ( call SW.ensureNumericEntity ( call SW.getProperty en.recipe.rice_pudding ( string preparation_time ) ) ) ) )
show me meal with less than two recipe	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.meal ) ( string ! type ) ) ( call SW.reverse ( string meal ) ) ( string < ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ) )
find recipes posted in 2004	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( string posting_date ) ( string = ) ( date 2004 -1 -1 ) ) ( string posting_date ) ( string = ) ( date 2004 -1 -1 ) ) )
what recipes cooking time is lower than the preparation time of rice pudding	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string cooking_time ) ) ( string < ) ( call SW.ensureNumericEntity ( call SW.getProperty en.recipe.rice_pudding ( string preparation_time ) ) ) ) )
how many recipes are there	( call SW.listValue ( call .size ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ) )
recipes for rice pudding or quice	( call SW.listValue ( call SW.concat en.recipe.rice_pudding en.recipe.quiche ) )
how many total recipes are there	( call SW.listValue ( call .size ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ) )
show me lunch recipes that posted in 2004	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( string posting_date ) ( string = ) ( date 2004 -1 -1 ) ) ( string meal ) ( string = ) en.meal.lunch ) )
which recipe posted in 2004 needs milk for preparation	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( string requires ) ( string = ) en.ingredient.milk ) ( string posting_date ) ( string = ) ( date 2004 -1 -1 ) ) )
what ingredient is required in only one recipe	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.ingredient ) ( string ! type ) ) ( call SW.reverse ( string requires ) ) ( string < ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ) )
show me a recipe that requires only two ingredients	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( string requires ) ( string = ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.ingredient ) ( string ! type ) ) ) )
which recipes require the same ingredients as rice pudding	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( string requires ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.ingredient ) ( string ! type ) ) ( call SW.reverse ( string requires ) ) ( string = ) en.recipe.rice_pudding ) ) )
what lunch recipes posting date is 2004	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( string meal ) ( string = ) en.meal.lunch ) ( string posting_date ) ( string = ) ( date 2004 -1 -1 ) ) )
what is the preparation of rice pudding	( call SW.listValue ( call SW.getProperty en.recipe.rice_pudding ( string preparation_time ) ) )
show me recipes with cooking time less than the preparation time for rice pudding	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string cooking_time ) ) ( string < ) ( call SW.ensureNumericEntity ( call SW.getProperty en.recipe.rice_pudding ( string preparation_time ) ) ) ) )
show me recipes for lunch	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( string meal ) ( string = ) en.meal.lunch ) ( string meal ) ( string = ) en.meal.lunch ) )
what recipe takes equal or more time to cook than rice pudding	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string cooking_time ) ) ( string >= ) ( call SW.ensureNumericEntity ( call SW.getProperty en.recipe.rice_pudding ( string cooking_time ) ) ) ) )
what recipe takes less time to prep than rice pudding	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string preparation_time ) ) ( string < ) ( call SW.ensureNumericEntity ( call SW.getProperty en.recipe.rice_pudding ( string preparation_time ) ) ) ) )
what is the total cooking time of the recipe	( call SW.listValue ( call SW.aggregate ( string sum ) ( call SW.getProperty ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( string cooking_time ) ) ) )
what meals have two recipes	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.meal ) ( string ! type ) ) ( call SW.reverse ( string meal ) ) ( string = ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ) )
an ingredient required by at least two recipes	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.ingredient ) ( string ! type ) ) ( call SW.reverse ( string requires ) ) ( string >= ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ) )
show me meals for one	( call SW.listValue ( call SW.countSuperlative ( call SW.getProperty ( call SW.singleton en.meal ) ( string ! type ) ) ( string min ) ( call SW.reverse ( string meal ) ) ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ) )
which recipe was posted the earliest	( call SW.listValue ( call SW.superlative ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( string min ) ( call SW.ensureNumericProperty ( string posting_date ) ) ) )
what recipe was posted before rice puddings recipe	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string posting_date ) ) ( string < ) ( call SW.ensureNumericEntity ( call SW.getProperty en.recipe.rice_pudding ( string posting_date ) ) ) ) )
recipes that have cooking time less than cooking time of rice pudding	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string cooking_time ) ) ( string <= ) ( call SW.ensureNumericEntity ( call SW.getProperty en.recipe.rice_pudding ( string cooking_time ) ) ) ) )
what ingredients are used only for lunch	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.ingredient ) ( string ! type ) ) ( call SW.reverse ( string requires ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( string meal ) ( string = ) en.meal.lunch ) ) )
what recipe requires three or more ingredients	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( string requires ) ( string > ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.ingredient ) ( string ! type ) ) ) )
recipe that first posted	( call SW.listValue ( call SW.superlative ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( string min ) ( call SW.ensureNumericProperty ( string posting_date ) ) ) )
what recipe was posted before or on the same day as rice pudding	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string posting_date ) ) ( string <= ) ( call SW.ensureNumericEntity ( call SW.getProperty en.recipe.rice_pudding ( string posting_date ) ) ) ) )
a recipe with milk as an ingredient	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.ingredient ) ( string ! type ) ) ( call SW.reverse ( string requires ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( string requires ) ( string = ) en.ingredient.milk ) ) )
which is the most used ingredient in recipes	( call SW.listValue ( call SW.countSuperlative ( call SW.getProperty ( call SW.singleton en.ingredient ) ( string ! type ) ) ( string max ) ( call SW.reverse ( string requires ) ) ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ) )
show me recipes posted in 2004	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( string posting_date ) ( string = ) ( date 2004 -1 -1 ) ) )
recipes that require less or same time than the time taken to prepare rice pudding	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string preparation_time ) ) ( string <= ) ( call SW.ensureNumericEntity ( call SW.getProperty en.recipe.rice_pudding ( string preparation_time ) ) ) ) )
what is the total preparation time of all the recipes	( call SW.listValue ( call SW.aggregate ( string sum ) ( call SW.getProperty ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( string preparation_time ) ) ) )
ingredients in rice pudding	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.ingredient ) ( string ! type ) ) ( call SW.reverse ( string requires ) ) ( string = ) en.recipe.rice_pudding ) ( call SW.reverse ( string requires ) ) ( string = ) en.recipe.rice_pudding ) )
how much time it takes to prepare recipe	( call SW.listValue ( call SW.aggregate ( string sum ) ( call SW.getProperty ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( string preparation_time ) ) ) )
show recipes with the maximum number of cuisines	( call SW.listValue ( call SW.countSuperlative ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( string max ) ( string cuisine ) ) )
what ingredients do lunch recipes need	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.ingredient ) ( string ! type ) ) ( call SW.reverse ( string requires ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( string meal ) ( string = ) en.meal.lunch ) ) )
which meal has the least number of recipes	( call SW.listValue ( call SW.countSuperlative ( call SW.getProperty ( call SW.singleton en.meal ) ( string ! type ) ) ( string min ) ( call SW.reverse ( string meal ) ) ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ) )
what is a recipe that takes at least as long to make as rice pudding	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string preparation_time ) ) ( string >= ) ( call SW.ensureNumericEntity ( call SW.getProperty en.recipe.rice_pudding ( string preparation_time ) ) ) ) )
what meal has two or more recipes	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.meal ) ( string ! type ) ) ( call SW.reverse ( string meal ) ) ( string >= ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ) )
what recipe is for less than two people	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( string meal ) ( string < ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.meal ) ( string ! type ) ) ) )
show me recipes with cooking time equal to preparation time for rice pudding	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( string cooking_time ) ( string = ) ( call SW.getProperty en.recipe.rice_pudding ( string preparation_time ) ) ) )
what recipes posting date is 2004 and requires milk	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( string posting_date ) ( string = ) ( date 2004 -1 -1 ) ) ( string requires ) ( string = ) en.ingredient.milk ) )
recipes total preparation time	( call SW.listValue ( call SW.aggregate ( string sum ) ( call SW.getProperty ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( string preparation_time ) ) ) )
which recipe has a prep time no greater than the prep time for rice pudding	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string preparation_time ) ) ( string <= ) ( call SW.ensureNumericEntity ( call SW.getProperty en.recipe.rice_pudding ( string preparation_time ) ) ) ) )
ingredient of two recipes	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.ingredient ) ( string ! type ) ) ( call SW.reverse ( string requires ) ) ( string = ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ) )
what meal has the most number of recipes	( call SW.listValue ( call SW.countSuperlative ( call SW.getProperty ( call SW.singleton en.meal ) ( string ! type ) ) ( string max ) ( call SW.reverse ( string meal ) ) ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ) )
what recipe requires more prep time than rice pudding	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string preparation_time ) ) ( string > ) ( call SW.ensureNumericEntity ( call SW.getProperty en.recipe.rice_pudding ( string preparation_time ) ) ) ) )
which recipes can make two meals	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( string meal ) ( string = ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.meal ) ( string ! type ) ) ) )
show me recipes requiring two or fewer ingredients	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( string requires ) ( string <= ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.ingredient ) ( string ! type ) ) ) )
find recipes that can be prepared sooner than rice pudding	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string preparation_time ) ) ( string < ) ( call SW.ensureNumericEntity ( call SW.getProperty en.recipe.rice_pudding ( string preparation_time ) ) ) ) )
show recipes that at most have two cuisine	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( string cuisine ) ( string <= ) ( number 2 ) ) )
what recipe takes the shortest time to cook	( call SW.listValue ( call SW.superlative ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( string min ) ( call SW.ensureNumericProperty ( string cooking_time ) ) ) )
show recipes whose cooking time is same as that of rice pudding	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( string cooking_time ) ( string = ) ( call SW.getProperty en.recipe.rice_pudding ( string preparation_time ) ) ) )
what meal is rice pudding not used for	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meal ) ( string ! type ) ) ( call SW.reverse ( string meal ) ) ( string ! = ) en.recipe.rice_pudding ) )
when was the recipe for rice pudding posted	( call SW.listValue ( call SW.getProperty en.recipe.rice_pudding ( string posting_date ) ) )
what recipe calls for two ingredients	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( string requires ) ( string = ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.ingredient ) ( string ! type ) ) ) )
what recipe was posted during 2004	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( string posting_date ) ( string = ) ( date 2004 -1 -1 ) ) )
how much time it takes to prepare rice pudding	( call SW.listValue ( call SW.getProperty en.recipe.rice_pudding ( string preparation_time ) ) )
what recipes require one or two ingredients	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( string requires ) ( string <= ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.ingredient ) ( string ! type ) ) ) )
show me recipes with cooking time equal to or greater than cooking time for rice pudding	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string cooking_time ) ) ( string >= ) ( call SW.ensureNumericEntity ( call SW.getProperty en.recipe.rice_pudding ( string cooking_time ) ) ) ) )
what recipe is for two	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( string meal ) ( string <= ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.meal ) ( string ! type ) ) ) )
show me recipes with the most preparation time	( call SW.listValue ( call SW.superlative ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( string max ) ( call SW.ensureNumericProperty ( string preparation_time ) ) ) )
what is an ingredient required by the most recipes	( call SW.listValue ( call SW.countSuperlative ( call SW.getProperty ( call SW.singleton en.ingredient ) ( string ! type ) ) ( string max ) ( call SW.reverse ( string requires ) ) ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ) )
what recipe has a cuisine including rice pudding	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( string cuisine ) ( string = ) ( call SW.getProperty en.recipe.rice_pudding ( string cuisine ) ) ) )
show me recipes posted after 2004	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string posting_date ) ) ( string > ) ( call SW.ensureNumericEntity ( call SW.concat ( date 2004 -1 -1 ) ( date 2010 -1 -1 ) ) ) ) )
which recipe is for a lunchtime meal	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.meal ) ( string ! type ) ) ( call SW.reverse ( string meal ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( string meal ) ( string = ) en.meal.lunch ) ) )
which recipe has the least number of cuisines	( call SW.listValue ( call SW.countSuperlative ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( string min ) ( string cuisine ) ) )
what recipe calls for either milk or spinach	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( string requires ) ( string = ) ( call SW.concat en.ingredient.milk en.ingredient.spinach ) ) )
what recipe is used in the greatest number of cuisines	( call SW.listValue ( call SW.countSuperlative ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( string max ) ( string cuisine ) ) )
what recipes preparation time is lesser than the cooking time of rice pudding	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string preparation_time ) ) ( string < ) ( call SW.ensureNumericEntity ( call SW.getProperty en.recipe.rice_pudding ( string cooking_time ) ) ) ) )
show me recipes posted at the same date as rice pudding	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string posting_date ) ) ( string <= ) ( call SW.ensureNumericEntity ( call SW.getProperty en.recipe.rice_pudding ( string posting_date ) ) ) ) )
show me recipes with the least cooking time	( call SW.listValue ( call SW.superlative ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( string min ) ( call SW.ensureNumericProperty ( string cooking_time ) ) ) )
what is a recipe from the fewest cuisines	( call SW.listValue ( call SW.countSuperlative ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( string min ) ( string cuisine ) ) )
lunch recipes posted in 2004	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( string meal ) ( string = ) en.meal.lunch ) ( string posting_date ) ( string = ) ( date 2004 -1 -1 ) ) )
show me recipes requiring the fewest ingredients	( call SW.listValue ( call SW.countSuperlative ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( string min ) ( string requires ) ( call SW.getProperty ( call SW.singleton en.ingredient ) ( string ! type ) ) ) )
what ingredients are required in two recipes	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.ingredient ) ( string ! type ) ) ( call SW.reverse ( string requires ) ) ( string = ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ) )
what recipe requires less prep time than rice pudding	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string preparation_time ) ) ( string < ) ( call SW.ensureNumericEntity ( call SW.getProperty en.recipe.rice_pudding ( string preparation_time ) ) ) ) )
which recipe has the same cooking time of rice pudding	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( string preparation_time ) ( string = ) ( call SW.getProperty en.recipe.rice_pudding ( string cooking_time ) ) ) )
show recipes posted in 2004 and has milk as one of its ingredients	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( string requires ) ( string = ) en.ingredient.milk ) ( string posting_date ) ( string = ) ( date 2004 -1 -1 ) ) )
what recipe falls under two cuisines	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( string cuisine ) ( string = ) ( number 2 ) ) )
what recipe is not for a lunch meal	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( string meal ) ( string = ) en.meal.lunch ) )
which recipes require at most two ingredients	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( string requires ) ( string <= ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.ingredient ) ( string ! type ) ) ) )
which meal has least number of recipes	( call SW.listValue ( call SW.countSuperlative ( call SW.getProperty ( call SW.singleton en.meal ) ( string ! type ) ) ( string min ) ( call SW.reverse ( string meal ) ) ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ) )
recipes posted before 2004	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string posting_date ) ) ( string < ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) )
show me recipes with preparation time equal to or longer than rice pudding	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string preparation_time ) ) ( string >= ) ( call SW.ensureNumericEntity ( call SW.getProperty en.recipe.rice_pudding ( string cooking_time ) ) ) ) )
what recipe has the most types of cuisine	( call SW.listValue ( call SW.countSuperlative ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( string max ) ( string cuisine ) ) )
show me meals with the least recipes	( call SW.listValue ( call SW.countSuperlative ( call SW.getProperty ( call SW.singleton en.meal ) ( string ! type ) ) ( string min ) ( call SW.reverse ( string meal ) ) ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ) )
which ingredient is needed by many recipes	( call SW.listValue ( call SW.countSuperlative ( call SW.getProperty ( call SW.singleton en.ingredient ) ( string ! type ) ) ( string max ) ( call SW.reverse ( string requires ) ) ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ) )
what is recipe for a meal	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( string meal ) ( string < ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.meal ) ( string ! type ) ) ) )
show recipes that requires at most the preparation time of rice pudding	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string preparation_time ) ) ( string <= ) ( call SW.ensureNumericEntity ( call SW.getProperty en.recipe.rice_pudding ( string cooking_time ) ) ) ) )
find recipe for two meals	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( string meal ) ( string <= ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.meal ) ( string ! type ) ) ) )
which recipes require the least amount of ingredients	( call SW.listValue ( call SW.countSuperlative ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( string min ) ( string requires ) ( call SW.getProperty ( call SW.singleton en.ingredient ) ( string ! type ) ) ) )
show me recipes with cooking time greater than preparation time for rice pudding	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string cooking_time ) ) ( string > ) ( call SW.ensureNumericEntity ( call SW.getProperty en.recipe.rice_pudding ( string preparation_time ) ) ) ) )
show recipes with the preparation time as the cooking time of rice pudding	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( string preparation_time ) ( string = ) ( call SW.getProperty en.recipe.rice_pudding ( string cooking_time ) ) ) )
what meal has at least two recipes for it	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.meal ) ( string ! type ) ) ( call SW.reverse ( string meal ) ) ( string >= ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ) )
what recipes ingredient does this lunch require	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.ingredient ) ( string ! type ) ) ( call SW.reverse ( string requires ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( string meal ) ( string = ) en.meal.lunch ) ) )
find the recipes for same cuisine as rice pudding	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( string cuisine ) ( string = ) ( call SW.getProperty en.recipe.rice_pudding ( string cuisine ) ) ) )
what is the average prep time for the recipe	( call SW.listValue ( call SW.aggregate ( string avg ) ( call SW.getProperty ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ( string preparation_time ) ) ) )
what ingrediant is used in the fewest recipes	( call SW.listValue ( call SW.countSuperlative ( call SW.getProperty ( call SW.singleton en.ingredient ) ( string ! type ) ) ( string min ) ( call SW.reverse ( string requires ) ) ( call SW.getProperty ( call SW.singleton en.recipe ) ( string ! type ) ) ) )
what is the total star rating of all restaurants	( call SW.listValue ( call SW.aggregate ( string sum ) ( call SW.getProperty ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string star_rating ) ) ) )
restaurant that does delivery and reservations	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string delivery ) ) ( string reserve ) ) )
restaurant whose star rating is smaller than 3 stars or 5 stars	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string star_rating ) ) ( string < ) ( call SW.ensureNumericEntity ( call SW.concat ( number 3 en.star ) ( number 5 en.star ) ) ) ) )
restaurant that has takeout and that is good for groups	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string takeout ) ) ( string groups ) ) )
restaurant that has waiter service and that is good for kids	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string waiter ) ) ( string kids ) ) )
moderately priced restaurants that have outdoor seating	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string price_rating ) ( string = ) ( number 2 en.dollar_sign ) ) ( string outdoor ) ) )
what 3 star restaurants accept reservations	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string star_rating ) ( string = ) ( number 3 en.star ) ) ( string reserve ) ) )
what is better a 3 or a 5 star rating	( call SW.listValue ( call SW.concat ( number 3 en.star ) ( number 5 en.star ) ) )
what cuisine is good for groups at a restaurant	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.cuisine ) ( string ! type ) ) ( call SW.reverse ( string cuisine ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string groups ) ) ) )
what restaurant takes reservations and is kid friendly	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string reserve ) ) ( string kids ) ) )
what is a good kids restaurant	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string kids ) ) )
what restaurants have a rating of 2 dollar signs	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.cuisine ) ( string ! type ) ) ( call SW.reverse ( string cuisine ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string price_rating ) ( string = ) ( number 2 en.dollar_sign ) ) ) )
a restaurant for lunch or dinner	( call SW.listValue ( call SW.concat en.food.lunch en.food.dinner ) )
which restaurants have waiters and offer takeout	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string takeout ) ) ( string waiter ) ) )
find a restaurant with more than 3 stars	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string star_rating ) ) ( string > ) ( call SW.ensureNumericEntity ( call SW.concat ( number 3 en.star ) ( number 5 en.star ) ) ) ) )
restaurants that offer takeout and accept reservations	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string reserve ) ) ( string takeout ) ) )
restaurant that has outdoor seating and that is good for groups	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string outdoor ) ) ( string groups ) ) )
list all 3 star restaurants	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string star_rating ) ( string = ) ( number 3 en.star ) ) ( string star_rating ) ( string = ) ( number 3 en.star ) ) )
hotel which has a price rating of 2 dollar signs or 3 dollar signs	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string price_rating ) ( string = ) ( call SW.concat ( number 2 en.dollar_sign ) ( number 3 en.dollar_sign ) ) ) )
restaurants with waiters that are good for groups	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string waiter ) ) ( string groups ) ) )
cuisine unlike thai cafe	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.cuisine ) ( string ! type ) ) ( call SW.reverse ( string cuisine ) ) ( string ! = ) en.restaurant.thai_cafe ) )
which resturants serve more than two meals	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string meals ) ( string > ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.food ) ( string ! type ) ) ) )
what restaurant offers outdoor seating and delivery	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string delivery ) ) ( string outdoor ) ) )
restaurants with the lowest star rating	( call SW.listValue ( call SW.superlative ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string min ) ( call SW.ensureNumericProperty ( string star_rating ) ) ) )
restaurant that has takeout and that serves lunch	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string takeout ) ) ( string meals ) ( string = ) en.food.lunch ) )
what meal does the waiter serve at the restaurant	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.food ) ( string ! type ) ) ( call SW.reverse ( string meals ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string waiter ) ) ) )
restaurants with 2 dollar sign rating	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string price_rating ) ( string = ) ( number 2 en.dollar_sign ) ) ( string price_rating ) ( string = ) ( number 2 en.dollar_sign ) ) )
restaurant that takes credit cards and whose star rating is 3 stars	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string credit ) ) ( string star_rating ) ( string = ) ( number 3 en.star ) ) )
neighborhood that is neighborhood of restaurant that has delivery	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.neighborhood ) ( string ! type ) ) ( call SW.reverse ( string neighborhood ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string delivery ) ) ) )
what good kids restaurants serve thai cuisine	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string kids ) ) ( string cuisine ) ( string = ) en.cuisine.thai ) )
what neighborhood has a restaurant that contains outdoor seating	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.neighborhood ) ( string ! type ) ) ( call SW.reverse ( string neighborhood ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string outdoor ) ) ) )
a group friendly restaurant that is medium priced	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string price_rating ) ( string = ) ( number 2 en.dollar_sign ) ) ( string groups ) ) )
a restaurant that has at least a two star rating and does takeout	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string takeout ) ) ( string price_rating ) ( string = ) ( number 2 en.dollar_sign ) ) )
what is a meal served by the thai cafe	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.food ) ( string ! type ) ) ( call SW.reverse ( string meals ) ) ( string = ) en.restaurant.thai_cafe ) )
restaurants that accept credit cards and reservations	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string credit ) ) ( string reserve ) ) )
restaurant in midtown west  which is good for groups	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string neighborhood ) ( string = ) en.neighborhood.midtown_west ) ( string groups ) ) )
meal that more than two restaurant serves	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.food ) ( string ! type ) ) ( call SW.reverse ( string meals ) ) ( string > ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ) )
restaurants that deliver and have waiter service	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string delivery ) ) ( string waiter ) ) )
restaurant that is open for lunch and dinner	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string meals ) ( string = ) ( call SW.concat en.food.lunch en.food.dinner ) ) )
what is the star rating of the thai cafe	( call SW.listValue ( call SW.getProperty en.restaurant.thai_cafe ( string star_rating ) ) )
what neighborhood is thai cafe located in	( call SW.listValue ( call SW.getProperty en.restaurant.thai_cafe ( string neighborhood ) ) )
what restaurants have more than two kinds of cuisine	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string cuisine ) ( string > ) ( number 2 ) ) )
family friendly restaurants that have waiters	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string waiter ) ) ( string kids ) ) )
what 2 dollar signs restaurant is good for kids	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string price_rating ) ( string = ) ( number 2 en.dollar_sign ) ) ( string kids ) ) )
restaurants that have takeout and are good for groups	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string takeout ) ) ( string groups ) ) )
price rating of thai cafe	( call SW.listValue ( call SW.getProperty en.restaurant.thai_cafe ( string price_rating ) ) )
what restaurants are good for groups and accept reservations	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string groups ) ) ( string reserve ) ) )
which thai restaurant takes credit cards	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string credit ) ) ( string cuisine ) ( string = ) en.cuisine.thai ) )
restaurant whose price rating is 2 dollar signs and that takes credit cards	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string price_rating ) ( string = ) ( number 2 en.dollar_sign ) ) ( string credit ) ) )
what neighborhood is thai cafe or pizzeria juno in	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.neighborhood ) ( string ! type ) ) ( call SW.reverse ( string neighborhood ) ) ( string = ) ( call SW.concat en.restaurant.thai_cafe en.restaurant.pizzeria_juno ) ) )
great place for groups and takes reservations	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string reserve ) ) ( string groups ) ) )
restaurants that have outdoor seating and are good for large parties	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string outdoor ) ) ( string groups ) ) )
what restaurants take credit cards and deliver	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string credit ) ) ( string delivery ) ) )
restaurant whose neighborhood is midtown west and that has outdoor seating	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string neighborhood ) ( string = ) en.neighborhood.midtown_west ) ( string outdoor ) ) )
restaurants with the same price rating as thai cafe	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string price_rating ) ( string = ) ( call SW.getProperty en.restaurant.thai_cafe ( string price_rating ) ) ) )
which restaurants have takeout and delivery	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string takeout ) ) ( string delivery ) ) )
what restaurant has takeout and a 2 dollar price rating	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string price_rating ) ( string = ) ( number 2 en.dollar_sign ) ) ( string takeout ) ) )
which restaurants are rated the same or below thai cafe	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string star_rating ) ) ( string <= ) ( call SW.ensureNumericEntity ( call SW.getProperty en.restaurant.thai_cafe ( string star_rating ) ) ) ) )
what neighborhood contains the most restaurants that offer reservations	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.neighborhood ) ( string ! type ) ) ( call SW.reverse ( string neighborhood ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string reserve ) ) ) )
what restaurant is good for lunch or dinner	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string meals ) ( string = ) ( call SW.concat en.food.lunch en.food.dinner ) ) )
list all restaurants that are either thai or italian	( call SW.listValue ( call SW.concat en.cuisine.thai en.cuisine.italian ) )
restaurant whose star rating is 3 stars or 5 stars	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string star_rating ) ( string = ) ( call SW.concat ( number 3 en.star ) ( number 5 en.star ) ) ) )
restaurants with takeout and takes credit cards	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string takeout ) ) ( string credit ) ) )
groupfriendly restaurants that are rated 3 stars	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string star_rating ) ( string = ) ( number 3 en.star ) ) ( string groups ) ) )
restaurants with a price rating larger than thai cafe	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string price_rating ) ) ( string > ) ( call SW.ensureNumericEntity ( call SW.getProperty en.restaurant.thai_cafe ( string price_rating ) ) ) ) )
restaurants rated 3 stars that take credit cards	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string credit ) ) ( string star_rating ) ( string = ) ( number 3 en.star ) ) )
what restaurant is amenable to children and has delivery	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string kids ) ) ( string delivery ) ) )
restaurants accepting reservations	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string reserve ) ) )
restaurants that have the same meal	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.cuisine ) ( string ! type ) ) ( call SW.reverse ( string cuisine ) ) ( string <= ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ) )
list all restaurants that areworse than 3 or 5 star rated restaurants	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string star_rating ) ) ( string < ) ( call SW.ensureNumericEntity ( call SW.concat ( number 3 en.star ) ( number 5 en.star ) ) ) ) )
at least 3 star restaurants	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string star_rating ) ) ( string >= ) ( call SW.ensureNumericEntity ( number 3 en.star ) ) ) )
what are some 2 dollar rated restaurants good for groups	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string price_rating ) ( string = ) ( number 2 en.dollar_sign ) ) ( string groups ) ) )
what restaurant serves lunch and offers takeout	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string meals ) ( string = ) en.food.lunch ) ( string takeout ) ) )
neighborhood that is neighborhood of more than two restaurant	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.neighborhood ) ( string ! type ) ) ( call SW.reverse ( string neighborhood ) ) ( string > ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ) )
what kind of meals are served in the restaurants in midtown west	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.food ) ( string ! type ) ) ( call SW.reverse ( string meals ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string neighborhood ) ( string = ) en.neighborhood.midtown_west ) ) )
what is the type of cuisine of thai cafe	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string cuisine ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.cuisine ) ( string ! type ) ) ( call SW.reverse ( string cuisine ) ) ( string = ) en.restaurant.thai_cafe ) ) )
restaurant whose price rating is at most 2 dollar signs	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string price_rating ) ) ( string <= ) ( call SW.ensureNumericEntity ( number 2 en.dollar_sign ) ) ) )
what resturant is not in midtown west	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string neighborhood ) ( string ! = ) en.neighborhood.midtown_west ) )
what restaurant is good for groups and kids	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string groups ) ) ( string kids ) ) )
what restaurant is good for kids and groups	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string kids ) ) ( string groups ) ) )
what entrees does thai cafe offer	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.food ) ( string ! type ) ) ( call SW.reverse ( string meals ) ) ( string = ) en.restaurant.thai_cafe ) )
what 2 dollar price rating restaurant takes credit cards	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string credit ) ) ( string price_rating ) ( string = ) ( number 2 en.dollar_sign ) ) )
restaurants that have outdoor seating	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.food ) ( string ! type ) ) ( call SW.reverse ( string meals ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string outdoor ) ) ) )
a lunch serving restaurant with take out	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string takeout ) ) ( string meals ) ( string = ) en.food.lunch ) )
a good thai resturant with room for groups	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string cuisine ) ( string = ) en.cuisine.thai ) ( string groups ) ) )
list all restaurants in the neighborhood of midtown west	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string neighborhood ) ( string = ) en.neighborhood.midtown_west ) )
which cuisines match that of the thai cafe	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.cuisine ) ( string ! type ) ) ( call SW.reverse ( string cuisine ) ) ( string = ) en.restaurant.thai_cafe ) ( call SW.reverse ( string cuisine ) ) ( string = ) en.restaurant.thai_cafe ) )
what restaurant takes reservations and is good for kids	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string reserve ) ) ( string kids ) ) )
what restaurant can i get lunch at that has waiter service	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string meals ) ( string = ) en.food.lunch ) ( string waiter ) ) )
restaurants that have takeout that are good for large parties	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string takeout ) ) ( string groups ) ) )
restaurant that has takeout and that takes credit cards	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string takeout ) ) ( string credit ) ) )
list all restaurants similar to the cuisine of thai cafe	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string cuisine ) ( string = ) ( call SW.getProperty en.restaurant.thai_cafe ( string cuisine ) ) ) )
restaurant that is good for groups and that takes reservations	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string groups ) ) ( string reserve ) ) )
hotel that has a price rating of 2 dollar signs and a 3 star rating	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string price_rating ) ( string = ) ( number 2 en.dollar_sign ) ) ( string star_rating ) ( string = ) ( number 3 en.star ) ) )
restaurants that serve lunch that are good for large parties	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string groups ) ) ( string meals ) ( string = ) en.food.lunch ) )
hotel that has a price rating or more than 2 dollars	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string price_rating ) ) ( string > ) ( call SW.ensureNumericEntity ( number 2 en.dollar_sign ) ) ) )
restaurants with waiters and outdoor dining areas	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string waiter ) ) ( string outdoor ) ) )
three star restaurants that take credit cards	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string credit ) ) ( string star_rating ) ( string = ) ( number 3 en.star ) ) )
a restaurant in midtown west that takes credit cards	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string neighborhood ) ( string = ) en.neighborhood.midtown_west ) ( string credit ) ) )
restaurant that is good for groups	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string groups ) ) )
restaurants called thai cafe or pizzeria juno	( call SW.listValue ( call SW.concat en.restaurant.thai_cafe en.restaurant.pizzeria_juno ) )
what is the cuisine of the restaurants with three star ratings	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.cuisine ) ( string ! type ) ) ( call SW.reverse ( string cuisine ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string star_rating ) ( string = ) ( number 3 en.star ) ) ) )
restaurants with price rating of 2 in midtown west	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string price_rating ) ( string = ) ( number 2 en.dollar_sign ) ) ( string neighborhood ) ( string = ) en.neighborhood.midtown_west ) )
restaurant that does not have a three star rating	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string star_rating ) ( string ! = ) ( number 3 en.star ) ) )
what restaurants have a price rating of two dollar signs and also accept credit cards	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string price_rating ) ( string = ) ( number 2 en.dollar_sign ) ) ( string credit ) ) )
restaurant has seating outside	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string outdoor ) ) ( string outdoor ) ) )
restaurant that takes credit cards and that has delivery	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string credit ) ) ( string delivery ) ) )
restaurant that takes reservations and that is good for kids	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string reserve ) ) ( string kids ) ) )
which restaurant both has outdoor seating and takes reservations	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string outdoor ) ) ( string reserve ) ) )
which neighborhood resturants have takeout	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.neighborhood ) ( string ! type ) ) ( call SW.reverse ( string neighborhood ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string takeout ) ) ) )
a three star restaurant that serves lunch	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string meals ) ( string = ) en.food.lunch ) ( string star_rating ) ( string = ) ( number 3 en.star ) ) )
what is the star rating of the restaurant	( call SW.listValue ( call SW.aggregate ( string sum ) ( call SW.getProperty ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string star_rating ) ) ) )
what restaurant has less than a 2 dollar price rating	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string price_rating ) ) ( string < ) ( call SW.ensureNumericEntity ( number 2 en.dollar_sign ) ) ) )
what restaurants accept credit cards and reservations	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string reserve ) ) ( string credit ) ) )
what restaurant has a star rating the same as thai cafe	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string star_rating ) ) ( string >= ) ( call SW.ensureNumericEntity ( call SW.getProperty en.restaurant.thai_cafe ( string star_rating ) ) ) ) )
which resturants have a star rating smaller than 3 or 5 stars	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string star_rating ) ) ( string < ) ( call SW.ensureNumericEntity ( call SW.concat ( number 3 en.star ) ( number 5 en.star ) ) ) ) )
what restaurant has two different cuisines	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string cuisine ) ( string <= ) ( number 2 ) ) )
which thai resturants serve lunch	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string meals ) ( string = ) en.food.lunch ) ( string cuisine ) ( string = ) en.cuisine.thai ) )
italian or thai	( call SW.listValue ( call SW.concat en.cuisine.thai en.cuisine.italian ) )
what is a meal served by a restaurant in midtown west	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.food ) ( string ! type ) ) ( call SW.reverse ( string meals ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string neighborhood ) ( string = ) en.neighborhood.midtown_west ) ) )
restaurants that can be booked in advance ant which de	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string kids ) ) ( string reserve ) ) )
what places serve food that is not thai	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.cuisine ) ( string ! type ) ) ( call SW.reverse ( string cuisine ) ) ( string ! = ) en.restaurant.thai_cafe ) )
list all restaurants in the neighborhood of midtown west or chelsea	( call SW.listValue ( call SW.concat en.neighborhood.midtown_west en.neighborhood.chelsea ) )
what neighborhood are the restaurants that are in midtown west	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.neighborhood ) ( string ! type ) ) ( call SW.reverse ( string neighborhood ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string neighborhood ) ( string = ) en.neighborhood.midtown_west ) ) )
what restaurant in midtown west contains outdoor seating	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string outdoor ) ) ( string neighborhood ) ( string = ) en.neighborhood.midtown_west ) )
restaurants that accept credit cards	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string credit ) ) )
restaurant in the midtown west neighborhood	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string neighborhood ) ( string = ) en.neighborhood.midtown_west ) ( string neighborhood ) ( string = ) en.neighborhood.midtown_west ) )
find a restaurant in a neighborhood	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string neighborhood ) ( string < ) ( number 2 ) ) )
what restaurant serves less than two meals	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string meals ) ( string < ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.food ) ( string ! type ) ) ) )
a 3 star resturnt that has room for groups	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string star_rating ) ( string = ) ( number 3 en.star ) ) ( string groups ) ) )
meal served by a restaurant that delivers	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.food ) ( string ! type ) ) ( call SW.reverse ( string meals ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string delivery ) ) ) )
restaurant that serves lunch in midtown west	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string meals ) ( string = ) en.food.lunch ) ( string neighborhood ) ( string = ) en.neighborhood.midtown_west ) )
what restaurant offers reservations	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string reserve ) ) )
restaurants rated 2 dollar signs that take reservations	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string reserve ) ) ( string price_rating ) ( string = ) ( number 2 en.dollar_sign ) ) )
what 3 star restaurant offers delivery	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string delivery ) ) ( string star_rating ) ( string = ) ( number 3 en.star ) ) )
3star restaurants that deliver	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string delivery ) ) ( string star_rating ) ( string = ) ( number 3 en.star ) ) )
what restaurant serves two cuisines	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string cuisine ) ( string = ) ( number 2 ) ) )
what is a meal served by no more than two restaurants	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.food ) ( string ! type ) ) ( call SW.reverse ( string meals ) ) ( string <= ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ) )
what 2 dollar sign restaurant contains takeout	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string takeout ) ) ( string price_rating ) ( string = ) ( number 2 en.dollar_sign ) ) )
what restaurants have both outdoor seating and takeout	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string takeout ) ) ( string outdoor ) ) )
what 3 star restaurant is good for kids	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string star_rating ) ( string = ) ( number 3 en.star ) ) ( string kids ) ) )
restaurants with the same or lower price rating as thai cafe	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string price_rating ) ) ( string <= ) ( call SW.ensureNumericEntity ( call SW.getProperty en.restaurant.thai_cafe ( string price_rating ) ) ) ) )
what resturants take credit cards and have outdoor seating	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string credit ) ) ( string outdoor ) ) )
what cuisine takes credit cards	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.cuisine ) ( string ! type ) ) ( call SW.reverse ( string cuisine ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string credit ) ) ) )
what restaurant has less than 5 stars	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string star_rating ) ) ( string < ) ( call SW.ensureNumericEntity ( call SW.concat ( number 3 en.star ) ( number 5 en.star ) ) ) ) )
which resturant is good for kids	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string kids ) ) ( string kids ) ) )
hotel that offers delivery services and has a price rating of 2 dollar signs	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string delivery ) ) ( string price_rating ) ( string = ) ( number 2 en.dollar_sign ) ) )
what resturant is good for kids and groups	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string kids ) ) ( string groups ) ) )
thai restaurant cuisine	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.food ) ( string ! type ) ) ( call SW.reverse ( string meals ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string cuisine ) ( string = ) en.cuisine.thai ) ) )
a three star restaurant thats mid priced	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string star_rating ) ( string = ) ( number 3 en.star ) ) ( string price_rating ) ( string = ) ( number 2 en.dollar_sign ) ) )
what are some restaurants that are rated between 3 and 5 stars	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string star_rating ) ) ( string > ) ( call SW.ensureNumericEntity ( call SW.concat ( number 3 en.star ) ( number 5 en.star ) ) ) ) )
what meal is served at a restaurant with outdoor seating	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.food ) ( string ! type ) ) ( call SW.reverse ( string meals ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string outdoor ) ) ) )
restaurants which take reservations and are rated 2 dollar signs	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string price_rating ) ( string = ) ( number 2 en.dollar_sign ) ) ( string reserve ) ) )
what kind of cuisine offers lunch	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.cuisine ) ( string ! type ) ) ( call SW.reverse ( string cuisine ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string meals ) ( string = ) en.food.lunch ) ) )
a neighborhood similar to thai cafes	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.neighborhood ) ( string ! type ) ) ( call SW.reverse ( string neighborhood ) ) ( string = ) en.restaurant.thai_cafe ) )
restaurants that deliver and offer takeout	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string delivery ) ) ( string takeout ) ) )
restaurant whose neighborhood is midtown west and that has waiter service	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string neighborhood ) ( string = ) en.neighborhood.midtown_west ) ( string waiter ) ) )
what is the price rating	( call SW.listValue ( call SW.aggregate ( string sum ) ( call SW.getProperty ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string price_rating ) ) ) )
restaurants that serve lunch and have a price rating of 2	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string price_rating ) ( string = ) ( number 2 en.dollar_sign ) ) ( string meals ) ( string = ) en.food.lunch ) )
what is the average price rating of a restaurant	( call SW.listValue ( call SW.aggregate ( string avg ) ( call SW.getProperty ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string price_rating ) ) ) )
what cuisine is shown in only two restaurants	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.cuisine ) ( string ! type ) ) ( call SW.reverse ( string cuisine ) ) ( string <= ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ) )
restaurant whose star rating is 3 stars and whose cuisine is thai	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string star_rating ) ( string = ) ( number 3 en.star ) ) ( string cuisine ) ( string = ) en.cuisine.thai ) )
find a restaurant i can get reservations at that has a 2 dollar price rating	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string reserve ) ) ( string price_rating ) ( string = ) ( number 2 en.dollar_sign ) ) )
restaurants rated 3 stars that accept reservations	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string reserve ) ) ( string star_rating ) ( string = ) ( number 3 en.star ) ) )
what restaurant takes reservations	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string reserve ) ) )
what meals do the thai cafe serve	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.food ) ( string ! type ) ) ( call SW.reverse ( string meals ) ) ( string = ) en.restaurant.thai_cafe ) ( call SW.reverse ( string meals ) ) ( string = ) en.restaurant.thai_cafe ) )
restaurant that is good for kids and that has takeout	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string kids ) ) ( string takeout ) ) )
open for two meals	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string meals ) ( string >= ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.food ) ( string ! type ) ) ) )
what restaurant delivers and has waiter service	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string delivery ) ) ( string waiter ) ) )
restaurants that can be booked in advance and accepts credit cards	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string reserve ) ) ( string credit ) ) )
thai restaurant which provides outdoor seating facilities	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string outdoor ) ) ( string cuisine ) ( string = ) en.cuisine.thai ) )
restaurants that can be booked in advance and good for group dining	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string reserve ) ) ( string groups ) ) )
what restaurant offers delivery and takes reservations	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string delivery ) ) ( string reserve ) ) )
most expensive restaurants	( call SW.listValue ( call SW.superlative ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string max ) ( call SW.ensureNumericProperty ( string price_rating ) ) ) )
what is a meal served at a restaurant that has waiters	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.food ) ( string ! type ) ) ( call SW.reverse ( string meals ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string waiter ) ) ) )
restaurants whose price rating is similar to that of thai cafe	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string price_rating ) ) ( string >= ) ( call SW.ensureNumericEntity ( call SW.getProperty en.restaurant.thai_cafe ( string price_rating ) ) ) ) )
what are some cuisines offered by more than two restaurants	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.cuisine ) ( string ! type ) ) ( call SW.reverse ( string cuisine ) ) ( string > ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ) )
restaurant whose cuisine is thai and that has delivery	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string cuisine ) ( string = ) en.cuisine.thai ) ( string delivery ) ) )
what thai restaurant offers waiter service	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string cuisine ) ( string = ) en.cuisine.thai ) ( string waiter ) ) )
list all thai restaurants offering lunch	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string cuisine ) ( string = ) en.cuisine.thai ) ( string meals ) ( string = ) en.food.lunch ) )
restaurants in the neighborhoods that contain thai cafe	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string neighborhood ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.neighborhood ) ( string ! type ) ) ( call SW.reverse ( string neighborhood ) ) ( string = ) en.restaurant.thai_cafe ) ) )
which restaurant accepts credit cards	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string credit ) ) ( string credit ) ) )
list the types of cuisine for restaurants that offer takeout	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.cuisine ) ( string ! type ) ) ( call SW.reverse ( string cuisine ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string takeout ) ) ) )
what restaurant has a higher price rating than the thai cafe	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string price_rating ) ) ( string > ) ( call SW.ensureNumericEntity ( call SW.getProperty en.restaurant.thai_cafe ( string price_rating ) ) ) ) )
what restaurants have outdoor dining and are childfriendly	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string kids ) ) ( string outdoor ) ) )
what restaurant is in multiple neighborhoods	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string neighborhood ) ( string >= ) ( number 2 ) ) )
which neighborhood resturant has a 3 star rating	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.neighborhood ) ( string ! type ) ) ( call SW.reverse ( string neighborhood ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string star_rating ) ( string = ) ( number 3 en.star ) ) ) )
what meals are served by more than two restaurants	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.food ) ( string ! type ) ) ( call SW.reverse ( string meals ) ) ( string > ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ) )
restaurants with at least 3 stars rating	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string star_rating ) ) ( string <= ) ( call SW.ensureNumericEntity ( number 3 en.star ) ) ) )
name a restaurant that does not offer  thai food	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string cuisine ) ( string ! = ) en.cuisine.thai ) )
restaurant that has delivery and that takes credit cards	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string delivery ) ) ( string credit ) ) )
restaurants similar to restaurants in midtown west	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.cuisine ) ( string ! type ) ) ( call SW.reverse ( string cuisine ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string neighborhood ) ( string = ) en.neighborhood.midtown_west ) ) )
what takeout restaurant has outdoor seating	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string outdoor ) ) ( string takeout ) ) )
restaurant that takes reservations and that is good for groups	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string reserve ) ) ( string groups ) ) )
what restaurant has the lower price rating	( call SW.listValue ( call SW.superlative ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string min ) ( call SW.ensureNumericProperty ( string price_rating ) ) ) )
restaurants with the most options	( call SW.listValue ( call SW.countSuperlative ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string max ) ( string meals ) ( call SW.getProperty ( call SW.singleton en.food ) ( string ! type ) ) ) )
what is the cuisine of thai cafe	( call SW.listValue ( call SW.getProperty en.restaurant.thai_cafe ( string cuisine ) ) )
no lunch restaurant	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string meals ) ( string ! = ) en.food.lunch ) )
restaurants with 3star ratings that have waiters	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string star_rating ) ( string = ) ( number 3 en.star ) ) ( string waiter ) ) )
restaurants with waiter service and takeout	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string waiter ) ) ( string takeout ) ) )
what good kids restaurant serves lunch	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string kids ) ) ( string meals ) ( string = ) en.food.lunch ) )
which restaurants accept reservation and have outdoor seating	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string reserve ) ) ( string outdoor ) ) )
which meal does a thai cafe not serve	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.food ) ( string ! type ) ) ( call SW.reverse ( string meals ) ) ( string ! = ) en.restaurant.thai_cafe ) )
what restaurant with a price rating of two dollar signs is a good place for a group	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string groups ) ) ( string price_rating ) ( string = ) ( number 2 en.dollar_sign ) ) )
restaurants with no more than 2 locations	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string neighborhood ) ( string <= ) ( number 2 ) ) )
list all restaurants that serves less than two meals	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string meals ) ( string < ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.food ) ( string ! type ) ) ) )
offers take out and delievers	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string takeout ) ) ( string delivery ) ) )
a restaurant with waiter service	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string waiter ) ) ( string waiter ) ) )
what 3 star rated restaurant has a price rating of 2 dollar signs	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string star_rating ) ( string = ) ( number 3 en.star ) ) ( string price_rating ) ( string = ) ( number 2 en.dollar_sign ) ) )
a neighborhood with two restaurants	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.neighborhood ) ( string ! type ) ) ( call SW.reverse ( string neighborhood ) ) ( string >= ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ) )
find a restaurant with outdoor seating that takes credit cards	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string credit ) ) ( string outdoor ) ) )
which restaurant is the most highly rated	( call SW.listValue ( call SW.superlative ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string max ) ( call SW.ensureNumericProperty ( string star_rating ) ) ) )
what restaurant takes reservations and has outdoor seating	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string outdoor ) ) ( string reserve ) ) )
which restaurant in midtown west has outdoor seating available	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string outdoor ) ) ( string neighborhood ) ( string = ) en.neighborhood.midtown_west ) )
restaurants with outdoor seating and a  price rating	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string outdoor ) ) ( string price_rating ) ( string = ) ( number 2 en.dollar_sign ) ) )
family friendly restaurants with price rating of two	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string price_rating ) ( string = ) ( number 2 en.dollar_sign ) ) ( string kids ) ) )
what restaurant is in over two neighborhoods	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string neighborhood ) ( string > ) ( number 2 ) ) )
restaurants that deliver and are open for lunch	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string meals ) ( string = ) en.food.lunch ) ( string delivery ) ) )
thai restaurants that accept reservations	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string reserve ) ) ( string cuisine ) ( string = ) en.cuisine.thai ) )
what restaurant does not have a 3 star rating	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string star_rating ) ( string ! = ) ( number 3 en.star ) ) )
what restaurant has waiter service and serves lunch	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string waiter ) ) ( string meals ) ( string = ) en.food.lunch ) )
restaurants with delivery for kids	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string kids ) ) ( string delivery ) ) )
what restaurants use waiters	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string waiter ) ) ( string waiter ) ) )
list all restaurants that are at least 3 stars	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string star_rating ) ) ( string <= ) ( call SW.ensureNumericEntity ( number 3 en.star ) ) ) )
hotel which has a 3 star rating	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string star_rating ) ( string = ) ( number 3 en.star ) ) )
what neighborhood is home to the most restaurants	( call SW.listValue ( call SW.countSuperlative ( call SW.getProperty ( call SW.singleton en.neighborhood ) ( string ! type ) ) ( string max ) ( call SW.reverse ( string neighborhood ) ) ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ) )
what is the phone number of the restaurant	( call SW.listValue ( call .size ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ) )
which restaurant serves this cuisine	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.cuisine ) ( string ! type ) ) ( call SW.reverse ( string cuisine ) ) ( string = ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ) )
restaurant whose price rating is price rating of thai cafe	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string price_rating ) ( string = ) ( call SW.getProperty en.restaurant.thai_cafe ( string price_rating ) ) ) )
the thai restaurant takes credit cards	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string cuisine ) ( string = ) en.cuisine.thai ) ( string credit ) ) )
which restaurant appeals to kids and is good for group dining	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string groups ) ) ( string kids ) ) )
find a restaurant with a price rating equal or less than the thai cafe	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string price_rating ) ) ( string <= ) ( call SW.ensureNumericEntity ( call SW.getProperty en.restaurant.thai_cafe ( string price_rating ) ) ) ) )
what is the number of restaurants	( call SW.listValue ( call .size ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ) )
what midtown west west restaurant is good for groups	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string groups ) ) ( string neighborhood ) ( string = ) en.neighborhood.midtown_west ) )
which neighborhoods have thai restaurants	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.neighborhood ) ( string ! type ) ) ( call SW.reverse ( string neighborhood ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string cuisine ) ( string = ) en.cuisine.thai ) ) )
what restaurants have takeout	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string takeout ) ) )
hotel that has a price rating of 2 dollar signs	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string price_rating ) ( string = ) ( number 2 en.dollar_sign ) ) ( string price_rating ) ( string = ) ( number 2 en.dollar_sign ) ) )
neighborhoods with more than 2 restauraunts	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.neighborhood ) ( string ! type ) ) ( call SW.reverse ( string neighborhood ) ) ( string > ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ) )
what restaurant offers outdoor seating	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string outdoor ) ) ( string outdoor ) ) )
what restaurant has 2 menu items and takes credit cards	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string price_rating ) ( string = ) ( number 2 en.dollar_sign ) ) ( string credit ) ) )
restaurants that have outdoor seating and that offer takeout	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string takeout ) ) ( string outdoor ) ) )
restaurant with two locations	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string neighborhood ) ( string <= ) ( number 2 ) ) )
what restaurant has thai cuisine	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string cuisine ) ( string = ) en.cuisine.thai ) ( string cuisine ) ( string = ) en.cuisine.thai ) )
which restaurants with 3 stars takes reservations	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string star_rating ) ( string = ) ( number 3 en.star ) ) ( string reserve ) ) )
find restaurant with waiter service that takes credit cards	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string credit ) ) ( string waiter ) ) )
which thai resturants have takeout	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string takeout ) ) ( string cuisine ) ( string = ) en.cuisine.thai ) )
restaurants rated 3 stars with outdoor seating	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string star_rating ) ( string = ) ( number 3 en.star ) ) ( string outdoor ) ) )
a three star kid friendly restaurant	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string star_rating ) ( string = ) ( number 3 en.star ) ) ( string kids ) ) )
what cuisine options are there among group friendly restaurants	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.cuisine ) ( string ! type ) ) ( call SW.reverse ( string cuisine ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string groups ) ) ) )
a thai restaurant with medium pricing	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.cuisine ) ( string ! type ) ) ( call SW.reverse ( string cuisine ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string price_rating ) ( string = ) ( number 2 en.dollar_sign ) ) ) )
restaurants that has a larger price rating than thai cafe	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string price_rating ) ) ( string > ) ( call SW.ensureNumericEntity ( call SW.getProperty en.restaurant.thai_cafe ( string price_rating ) ) ) ) )
which restaurant in midtown west has a 3star rating	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string star_rating ) ( string = ) ( number 3 en.star ) ) ( string neighborhood ) ( string = ) en.neighborhood.midtown_west ) )
which restaurant is good for a group of people and also serves lunch	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string groups ) ) ( string meals ) ( string = ) en.food.lunch ) )
name a restaurant found in at least two neighborhoods	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string neighborhood ) ( string >= ) ( number 2 ) ) )
what restaurant has two neighborhoods	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string neighborhood ) ( string = ) ( number 2 ) ) )
restaurant which has waiters	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string waiter ) ) )
restaurants with waiter service	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.cuisine ) ( string ! type ) ) ( call SW.reverse ( string cuisine ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string waiter ) ) ) )
restaurants with 5 star and lower price ratings	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string star_rating ) ) ( string <= ) ( call SW.ensureNumericEntity ( call SW.concat ( number 3 en.star ) ( number 5 en.star ) ) ) ) )
midtown west restaurant that is open for lunch	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string neighborhood ) ( string = ) en.neighborhood.midtown_west ) ( string meals ) ( string = ) en.food.lunch ) )
restaurants in midtown west with outdoor seating	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string neighborhood ) ( string = ) en.neighborhood.midtown_west ) ( string outdoor ) ) )
what restaurant serves two meals	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.food ) ( string ! type ) ) ( call SW.reverse ( string meals ) ) ( string = ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ) )
restaurants that offer takeout	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.food ) ( string ! type ) ) ( call SW.reverse ( string meals ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string takeout ) ) ) )
restaurant that has delivery and that takes reservations	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string delivery ) ) ( string reserve ) ) )
which restaurants serve lunch and have an outdoor dining area	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.restaurant ) ( string ! type ) ) ( string outdoor ) ) ( string meals ) ( string = ) en.food.lunch ) )
students who finish with or after alice	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_end_date ) ) ( string >= ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string student ) ) ) ( string education_end_date ) ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )
males born in 2004	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string birthdate ) ( string = ) ( date 2004 -1 -1 ) ) ( string gender ) ( string = ) en.gender.male ) )
students whose start date is no later than alices	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_start_date ) ) ( string <= ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string student ) ) ) ( string education_start_date ) ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )
what is the relationship status of a person born in 2004	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.relationship_status ) ( string ! type ) ) ( call SW.reverse ( string relationship_status ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string birthdate ) ( string = ) ( date 2004 -1 -1 ) ) ) )
find me all employees who will have starte by alices birthday	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_start_date ) ) ( string <= ) ( call SW.ensureNumericEntity ( call SW.getProperty en.person.alice ( string birthdate ) ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )
people who are friends with somebody who did not start in 2004	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string friend ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string employment_start_date ) ( string ! = ) ( date 2004 -1 -1 ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) ) )
what gender are the two people	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.gender ) ( string ! type ) ) ( call SW.reverse ( string gender ) ) ( string = ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ) )
people who have friends who did not begin working in 2004	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string friend ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string employment_start_date ) ( string ! = ) ( date 2004 -1 -1 ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) ) )
people who are friends with alice and born in new york	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string birthplace ) ( string = ) en.city.new_york ) ( string friend ) ( string = ) en.person.alice ) )
find me friends of the student that is is leaving before 2004	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string friend ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_end_date ) ) ( string < ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) ) )
which employee started after alice started	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_start_date ) ) ( string > ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string student ) ) ) ( string education_start_date ) ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )
what students have a start date that is anything but 2004	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string education_start_date ) ( string ! = ) ( date 2004 -1 -1 ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )
birthplaces of employees starting before 2004	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.city ) ( string ! type ) ) ( call SW.reverse ( string birthplace ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_start_date ) ) ( string < ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) ) )
whats the relationship status of people who are male	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.relationship_status ) ( string ! type ) ) ( call SW.reverse ( string relationship_status ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string gender ) ( string = ) en.gender.male ) ) )
what employee has a start date that is the same as alice	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string employment_start_date ) ( string = ) ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string student ) ) ) ( string education_start_date ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )
who is not single	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string relationship_status ) ( string ! = ) en.relationship_status.single ) )
employees who finish before alice	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_end_date ) ) ( string < ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string employee ) ) ) ( string employment_end_date ) ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )
a friend of someone 180 cm tall	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string friend ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string height ) ( string = ) ( number 180 en.cm ) ) ) )
which employee started no greater than alices	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_start_date ) ) ( string <= ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string employee ) ) ) ( string employment_start_date ) ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )
which men are 180 cm tall	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string height ) ( string = ) ( number 180 en.cm ) ) ( string gender ) ( string = ) en.gender.male ) )
student whose end date is so later than alices	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_end_date ) ) ( string <= ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string employee ) ) ) ( string employment_end_date ) ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )
the relationship statues of a student ending in 2004	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.relationship_status ) ( string ! type ) ) ( call SW.reverse ( string relationship_status ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_end_date ) ) ( string >= ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) ) )
employees who quit in 2003 or earlier	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_end_date ) ) ( string <= ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )
what is the gender of employees sho started before 2004	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.gender ) ( string ! type ) ) ( call SW.reverse ( string gender ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_start_date ) ) ( string >= ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) ) )
people born in new york that are single	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string relationship_status ) ( string = ) en.relationship_status.single ) ( string birthplace ) ( string = ) en.city.new_york ) )
which university did people who are 180 cm tall attend	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.university ) ( string ! type ) ) ( call SW.reverse ( string university ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string height ) ( string = ) ( number 180 en.cm ) ) ) )
find employees whose last day is after student alices first day	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_end_date ) ) ( string > ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string student ) ) ) ( string education_start_date ) ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )
people that stopped school when alice stopped working or after	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_end_date ) ) ( string >= ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string employee ) ) ) ( string employment_end_date ) ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )
alices birthplace	( call SW.listValue ( call SW.getProperty en.person.alice ( string birthplace ) ) )
student whose start date is not before 2004	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_start_date ) ) ( string >= ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )
who are the students studying computer science or history	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string field_of_study ) ( string = ) ( call SW.concat en.field.computer_science en.field.history ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )
find students with last day before alices	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_end_date ) ) ( string < ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string student ) ) ) ( string education_end_date ) ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )
relationship status of student that left school before or on 2004	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.relationship_status ) ( string ! type ) ) ( call SW.reverse ( string relationship_status ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_end_date ) ) ( string <= ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) ) )
find employees with last day on or after alices first day	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_end_date ) ) ( string >= ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string employee ) ) ) ( string employment_start_date ) ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )
who quit at the same time or after alice did	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_end_date ) ) ( string >= ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string employee ) ) ) ( string employment_end_date ) ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )
find employees friends not employed at mckinsey	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string friend ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string employer ) ( string ! = ) en.company.mckinsey ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) ) )
employees with one job title	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.countSuperlative ( var s ) ( string min ) ( string job_title ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )
name an employee who started in 2004 but before 2011	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_start_date ) ) ( string <= ) ( call SW.ensureNumericEntity ( call SW.concat ( date 2004 -1 -1 ) ( date 2010 -1 -1 ) ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )
what student has an end date no earlier than alices end date	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_end_date ) ) ( string < ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string student ) ) ) ( string education_end_date ) ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )
what is the birthdate of people who are 180 cm tall	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string birthdate ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string height ) ( string = ) ( number 180 en.cm ) ) ) )
which employee started before alice	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_start_date ) ) ( string < ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string employee ) ) ) ( string employment_start_date ) ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )
what student began before student alice did	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_start_date ) ) ( string < ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string student ) ) ) ( string education_start_date ) ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )
who is the employee with the most job titles	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.countSuperlative ( var s ) ( string max ) ( string job_title ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )
which student started after alice	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_start_date ) ) ( string > ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string student ) ) ) ( string education_start_date ) ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )
people that are friends with someone that started school after 2004	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string friend ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_start_date ) ) ( string > ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) ) )
find people who have the same birthplace as alice	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string birthplace ) ( string = ) ( call SW.getProperty en.person.alice ( string birthplace ) ) ) )
what is the average height of a person	( call SW.listValue ( call SW.aggregate ( string avg ) ( call SW.getProperty ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string height ) ) ) )
what is the relationship status of employees who strated before 2004	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.relationship_status ) ( string ! type ) ) ( call SW.reverse ( string relationship_status ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_start_date ) ) ( string < ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) ) )
gender of students who are not studying computer science	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.gender ) ( string ! type ) ) ( call SW.reverse ( string gender ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string field_of_study ) ( string ! = ) en.field.computer_science ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) ) )
friends of students starting after 2004	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string friend ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_start_date ) ) ( string > ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) ) )
what relationship statuses are claimed by alices friends	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.relationship_status ) ( string ! type ) ) ( call SW.reverse ( string relationship_status ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string friend ) ( string = ) en.person.alice ) ) )
person born after alice	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string birthdate ) ) ( string > ) ( call SW.ensureNumericEntity ( call SW.getProperty en.person.alice ( string birthdate ) ) ) ) )
which person is friends with the employee whos end date isnt 2004	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string friend ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string employment_end_date ) ( string ! = ) ( date 2004 -1 -1 ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) ) )
how many gender options are there	( call SW.listValue ( call .size ( call SW.getProperty ( call SW.singleton en.gender ) ( string ! type ) ) ) )
friends of students starting in or after 2004	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string friend ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_start_date ) ) ( string >= ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) ) )
connection to someone who will have graduated before 2004	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.reverse ( string friend ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_end_date ) ) ( string <= ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) ) )
what is number of a person	( call SW.listValue ( call .size ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ) )
an employee starting before alice was born	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_start_date ) ) ( string < ) ( call SW.ensureNumericEntity ( call SW.getProperty en.person.alice ( string birthdate ) ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )
singles who were born in 2004	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string birthdate ) ( string = ) ( date 2004 -1 -1 ) ) ( string relationship_status ) ( string = ) en.relationship_status.single ) )
student whose end date is not before start date of student alice	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_end_date ) ) ( string >= ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string student ) ) ) ( string education_start_date ) ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )
what city has the least births	( call SW.listValue ( call SW.countSuperlative ( call SW.getProperty ( call SW.singleton en.city ) ( string ! type ) ) ( string min ) ( call SW.reverse ( string birthplace ) ) ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ) )
people born on or before alices birthday	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string birthdate ) ) ( string <= ) ( call SW.ensureNumericEntity ( call SW.getProperty en.person.alice ( string birthdate ) ) ) ) )
what employee had a start date as early as or later than alice	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_start_date ) ) ( string >= ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string student ) ) ) ( string education_start_date ) ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )
what did alice study in 2004	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.person.alice ( call SW.reverse ( string student ) ) ) ( string education_end_date ) ( string = ) ( date 2004 -1 -1 ) ) ( string field_of_study ) ) )
what is the birthplace of employee who ended after 2004	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.city ) ( string ! type ) ) ( call SW.reverse ( string birthplace ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_end_date ) ) ( string > ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) ) )
find males born in 2004	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string birthdate ) ( string = ) ( date 2004 -1 -1 ) ) ( string gender ) ( string = ) en.gender.male ) )
what employee has less than two previous job titles	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.countComparative ( var s ) ( string job_title ) ( string < ) ( number 2 ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )
find me all people that are friends with the employee starting after 2004	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string friend ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_start_date ) ) ( string > ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) ) )
friends of alice	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.reverse ( string friend ) ) ( string = ) en.person.alice ) ( call SW.reverse ( string friend ) ) ( string = ) en.person.alice ) )
people who are male and born in 2004	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string gender ) ( string = ) en.gender.male ) ( string birthdate ) ( string = ) ( date 2004 -1 -1 ) ) )
2004 graduates friends	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.reverse ( string friend ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_end_date ) ) ( string <= ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) ) )
what city is the bithplace of an employee who did not start in 2004	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.city ) ( string ! type ) ) ( call SW.reverse ( string birthplace ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string employment_start_date ) ( string ! = ) ( date 2004 -1 -1 ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) ) )
students that didnt finish in 2004	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string education_end_date ) ( string ! = ) ( date 2004 -1 -1 ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )
what city has a birthplace of a person who is at least 180 cm	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.city ) ( string ! type ) ) ( call SW.reverse ( string birthplace ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string height ) ( string = ) ( number 180 en.cm ) ) ) )
what is the relationship status of people that started work in or before 2004	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.relationship_status ) ( string ! type ) ) ( call SW.reverse ( string relationship_status ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_start_date ) ) ( string <= ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) ) )
find people with a height of 180 cm and their relationship status	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string relationship_status ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string height ) ( string = ) ( number 180 en.cm ) ) ) )
birthplace of students born before 2004	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.city ) ( string ! type ) ) ( call SW.reverse ( string birthplace ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_start_date ) ) ( string < ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) ) )
a student with two or fewer majors	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.countComparative ( var s ) ( string field_of_study ) ( string <= ) ( number 2 ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )
when did alice start being an employee	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.person.alice ( call SW.reverse ( string employee ) ) ) ( string employment_start_date ) ( string = ) ( date 2004 -1 -1 ) ) ( string employment_start_date ) ) )
find employees starting other than in 2004	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string employment_start_date ) ( string ! = ) ( date 2004 -1 -1 ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )
find males who are 180cm tall	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string gender ) ( string = ) en.gender.male ) ( string height ) ( string = ) ( number 180 en.cm ) ) )
which employees started on or before alices birthdate	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_start_date ) ) ( string <= ) ( call SW.ensureNumericEntity ( call SW.getProperty en.person.alice ( string birthdate ) ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )
which city were alices friends born in	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.city ) ( string ! type ) ) ( call SW.reverse ( string birthplace ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.reverse ( string friend ) ) ( string = ) en.person.alice ) ) )
name a person who is 180 cm tall and who quit in 2004	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string height ) ( string = ) ( number 180 en.cm ) ) ( string education_end_date ) ( string = ) ( date 2004 -1 -1 ) ) )
what is the relationship status of an employee who is not a software engineer	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.relationship_status ) ( string ! type ) ) ( call SW.reverse ( string relationship_status ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string job_title ) ( string ! = ) en.job_title.software_engineer ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) ) )
friend of student whose start date is after 2004	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string friend ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_start_date ) ) ( string > ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) ) )
any male who is logged in	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string gender ) ( string = ) en.gender.male ) ( string logged_in ) ) )
people that are shorter than 180 cm	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string height ) ) ( string < ) ( call SW.ensureNumericEntity ( call SW.concat ( number 180 en.cm ) ( number 200 en.cm ) ) ) ) )
sex of students that started school in 2004 or earlier	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.gender ) ( string ! type ) ) ( call SW.reverse ( string gender ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_start_date ) ) ( string <= ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) ) )
friends of employees who dont finish in 2004	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string friend ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string employment_end_date ) ( string ! = ) ( date 2004 -1 -1 ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) ) )
people who were born after alice started school	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string birthdate ) ) ( string > ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string student ) ) ) ( string education_start_date ) ) ) ) )
find students with an end date the same as employee alices start date	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string education_end_date ) ( string = ) ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string employee ) ) ) ( string employment_start_date ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )
student who was a smaller start date than alice	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_start_date ) ) ( string < ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string employee ) ) ) ( string employment_start_date ) ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )
find relationship status of students not studying computer science field	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.relationship_status ) ( string ! type ) ) ( call SW.reverse ( string relationship_status ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string field_of_study ) ( string ! = ) en.field.computer_science ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) ) )
alices male friends	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string gender ) ( string = ) en.gender.male ) ( string friend ) ( string = ) en.person.alice ) )
find all single people	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.relationship_status ) ( string ! type ) ) ( call SW.reverse ( string relationship_status ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string relationship_status ) ( string = ) en.relationship_status.single ) ) )
which employee start after alice leaves	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_start_date ) ) ( string >= ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string employee ) ) ) ( string employment_end_date ) ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )
people whose end date is not in 2004	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string employment_end_date ) ( string ! = ) ( date 2004 -1 -1 ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )
an employee with the longest start date	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.superlative ( var s ) ( string max ) ( call SW.ensureNumericProperty ( string employment_start_date ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )
when did alice graduate after studying computer science	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.person.alice ( call SW.reverse ( string student ) ) ) ( string field_of_study ) ( string = ) en.field.computer_science ) ( string education_end_date ) ) )
who is studying less than two things	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.countComparative ( var s ) ( string field_of_study ) ( string < ) ( number 2 ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )
students who did not graduate before alice enrolled	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_end_date ) ) ( string >= ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string student ) ) ) ( string education_start_date ) ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )
name the friend of an employee who did not quit in 2004	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.reverse ( string friend ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string employment_end_date ) ( string ! = ) ( date 2004 -1 -1 ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) ) )
a person whose employee friend didnt leave in 2004	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string friend ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string employment_end_date ) ( string ! = ) ( date 2004 -1 -1 ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) ) )
employees whose last day is before alice	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_end_date ) ) ( string < ) ( call SW.ensureNumericEntity ( call SW.getProperty en.person.alice ( string birthdate ) ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )
what people with a birthdate of 2004 are also friends with alice	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string birthdate ) ( string = ) ( date 2004 -1 -1 ) ) ( string friend ) ( string = ) en.person.alice ) )
who is the 180 cm tall	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string height ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string height ) ( string = ) ( number 180 en.cm ) ) ) )
employees starting before alices birthday	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_start_date ) ) ( string < ) ( call SW.ensureNumericEntity ( call SW.getProperty en.person.alice ( string birthdate ) ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )
find the field of study of all persons with a height of 180 cm	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.field ) ( string ! type ) ) ( call SW.reverse ( string field_of_study ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string height ) ( string = ) ( number 180 en.cm ) ) ) )
people who are friends with an employee who does not have the job title of software engineer	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string friend ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string job_title ) ( string ! = ) en.job_title.software_engineer ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) ) )
what employee has an end date that is 2004 or later	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_end_date ) ) ( string >= ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )
what city were less than two people born in	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.city ) ( string ! type ) ) ( call SW.reverse ( string birthplace ) ) ( string < ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ) )
who is friends with the student who is not studying computer science	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.reverse ( string friend ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string field_of_study ) ( string ! = ) en.field.computer_science ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) ) )
what gender is the employee who started in 2004	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.gender ) ( string ! type ) ) ( call SW.reverse ( string gender ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_end_date ) ) ( string >= ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) ) )
people that stopped working before alice started school	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_end_date ) ) ( string < ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string student ) ) ) ( string education_start_date ) ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )
what students go to the same university as student alice	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string university ) ( string = ) ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string student ) ) ) ( string university ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )
birthplaces of students that started school after 2004	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.city ) ( string ! type ) ) ( call SW.reverse ( string birthplace ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_start_date ) ) ( string > ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) ) )
what person has the same gender as alice	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string gender ) ( string = ) ( call SW.getProperty en.person.alice ( string gender ) ) ) )
what city was the student born in that has 2004 as end date	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.city ) ( string ! type ) ) ( call SW.reverse ( string birthplace ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_end_date ) ) ( string > ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) ) )
which students graduate no later than alices first day of work	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_end_date ) ) ( string <= ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string employee ) ) ) ( string employment_start_date ) ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )
what is the gender of most	( call SW.listValue ( call SW.countSuperlative ( call SW.getProperty ( call SW.singleton en.gender ) ( string ! type ) ) ( string max ) ( call SW.reverse ( string gender ) ) ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ) )
is alice going to brown university	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.person.alice ( call SW.reverse ( string student ) ) ) ( string university ) ( string = ) en.university.brown ) ( string university ) ) )
birth city of student whose end date is at least 2004	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.city ) ( string ! type ) ) ( call SW.reverse ( string birthplace ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_end_date ) ) ( string >= ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) ) )
find the friends of students whose end date is later than 2004	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.reverse ( string friend ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_end_date ) ) ( string > ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) ) )
who has at least two friends	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.reverse ( string friend ) ) ( string >= ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ) )
what student has a start date before the birthdate of alice	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_start_date ) ) ( string < ) ( call SW.ensureNumericEntity ( call SW.getProperty en.person.alice ( string birthdate ) ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )
find friends of student who started later than 2004	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.reverse ( string friend ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_start_date ) ) ( string > ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) ) )
who are all of alices guy friends	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string friend ) ( string = ) en.person.alice ) ( string gender ) ( string = ) en.gender.male ) )
presently logged in persons whose relationship status is single	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string logged_in ) ) ( string relationship_status ) ( string = ) en.relationship_status.single ) )
what cities are the birthplaces of people who have a height of 180 cm	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.city ) ( string ! type ) ) ( call SW.reverse ( string birthplace ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string height ) ( string = ) ( number 180 en.cm ) ) ) )
what is the students relationship status who ended greater than 2004	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.relationship_status ) ( string ! type ) ) ( call SW.reverse ( string relationship_status ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_end_date ) ) ( string > ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) ) )
who is shorter than 181cm	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string height ) ) ( string <= ) ( call SW.ensureNumericEntity ( number 180 en.cm ) ) ) )
find me all students that will start at the same time or after alice starts	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_start_date ) ) ( string <= ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string student ) ) ) ( string education_start_date ) ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )
a friend of a student ending in 2004 or before	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string friend ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_end_date ) ) ( string <= ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) ) )
find employees whose start date is 2004 or later	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_start_date ) ) ( string >= ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )
people who are friends with a student whose start date is 2004 or later	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string friend ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_start_date ) ) ( string >= ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) ) )
what person is friends with a student that has an end date of 2004 or later	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string friend ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_end_date ) ) ( string >= ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) ) )
which employees last day is no later than alices birthdate	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_end_date ) ) ( string <= ) ( call SW.ensureNumericEntity ( call SW.getProperty en.person.alice ( string birthdate ) ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )
find people that have two friends	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string friend ) ( string = ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ) )
friends of male people	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.reverse ( string friend ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string gender ) ( string = ) en.gender.male ) ) )
people with friends who graduated school after 2004	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.reverse ( string friend ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_end_date ) ) ( string > ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) ) )
employees with the latest start date	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.superlative ( var s ) ( string max ) ( call SW.ensureNumericProperty ( string employment_start_date ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )
what genders are people that started school in any year but 2004	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.gender ) ( string ! type ) ) ( call SW.reverse ( string gender ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string education_start_date ) ( string ! = ) ( date 2004 -1 -1 ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) ) )
a student ending before alice starts	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string education_end_date ) ( string = ) ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string employee ) ) ) ( string employment_start_date ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )
which people have less than two relationship statuses	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string relationship_status ) ( string < ) ( number 2 ) ) )
people that started working before alices birthdate	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_start_date ) ) ( string < ) ( call SW.ensureNumericEntity ( call SW.getProperty en.person.alice ( string birthdate ) ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )
what are genders of students starting after 2004	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.gender ) ( string ! type ) ) ( call SW.reverse ( string gender ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_start_date ) ) ( string > ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) ) )
which students graduated no later than alices last day of work	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_end_date ) ) ( string <= ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string employee ) ) ) ( string employment_end_date ) ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )
find people with a relationship status that more than two people have	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.relationship_status ) ( string ! type ) ) ( call SW.reverse ( string relationship_status ) ) ( string > ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ) )
student who started the same day as alices birthday	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string education_start_date ) ( string = ) ( call SW.getProperty en.person.alice ( string birthdate ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )
people who have friends that are currently online	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string friend ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string logged_in ) ) ) )
find birth cities for students who have a start date no later than 2004	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.city ) ( string ! type ) ) ( call SW.reverse ( string birthplace ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_start_date ) ) ( string <= ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) ) )
students finishing on alices birthday	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string education_end_date ) ( string = ) ( call SW.getProperty en.person.alice ( string birthdate ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )
employees leaving the company no earlier than alices start date	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_end_date ) ) ( string >= ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string student ) ) ) ( string education_start_date ) ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )
people who arent alices friend	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.reverse ( string friend ) ) ( string ! = ) en.person.alice ) )
which relationship statuses are claimed by the males in my network	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.relationship_status ) ( string ! type ) ) ( call SW.reverse ( string relationship_status ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string gender ) ( string = ) en.gender.male ) ) )
which employees has the least recent start date	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.superlative ( var s ) ( string min ) ( call SW.ensureNumericProperty ( string employment_start_date ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )
who was born on the day alice left	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string birthdate ) ( string = ) ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string employee ) ) ) ( string employment_end_date ) ) ) )
find the birth cities of students who have a start date in 2004 or greater	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.city ) ( string ! type ) ) ( call SW.reverse ( string birthplace ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_start_date ) ) ( string >= ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) ) )
find friends of people who were born in new york	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.reverse ( string friend ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string birthplace ) ( string = ) en.city.new_york ) ) )
people who completed study before alice joined the job	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_end_date ) ) ( string > ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string employee ) ) ) ( string employment_start_date ) ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )
what is the gender of working people that did not start in 2004	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.gender ) ( string ! type ) ) ( call SW.reverse ( string gender ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string employment_start_date ) ( string ! = ) ( date 2004 -1 -1 ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) ) )
relationship status of 180 cm tall person	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.relationship_status ) ( string ! type ) ) ( call SW.reverse ( string relationship_status ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string height ) ( string = ) ( number 180 en.cm ) ) ) )
what is the relationship status of the employee that did not start in 2004	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.relationship_status ) ( string ! type ) ) ( call SW.reverse ( string relationship_status ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string employment_start_date ) ( string ! = ) ( date 2004 -1 -1 ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) ) )
what is alices job title at mckinsey	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.person.alice ( call SW.reverse ( string employee ) ) ) ( string employer ) ( string = ) en.company.mckinsey ) ( string job_title ) ) )
who is friends with a person that is friends with alice	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string friend ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.reverse ( string friend ) ) ( string = ) en.person.alice ) ) )
who is the employer of the person whose height is 180 cm	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.company ) ( string ! type ) ) ( call SW.reverse ( string employer ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string height ) ( string = ) ( number 180 en.cm ) ) ) )
what did alice stop studying in 2004	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.person.alice ( call SW.reverse ( string student ) ) ) ( string education_end_date ) ( string = ) ( date 2004 -1 -1 ) ) ( string field_of_study ) ) )
what is the relationship status of alice and bob	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.relationship_status ) ( string ! type ) ) ( call SW.reverse ( string relationship_status ) ) ( string = ) ( call SW.concat en.person.alice en.person.bob ) ) )
what city is the birthplace of the student who ended school before 2004	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.city ) ( string ! type ) ) ( call SW.reverse ( string birthplace ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_end_date ) ) ( string < ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) ) )
find company employing those who are 180 cm tall	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.company ) ( string ! type ) ) ( call SW.reverse ( string employer ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string height ) ( string = ) ( number 180 en.cm ) ) ) )
what employees have a start date that is either 2004 or 2010	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string employment_start_date ) ( string = ) ( call SW.concat ( date 2004 -1 -1 ) ( date 2010 -1 -1 ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )
what is the relationship status of employee whose start date is not 2004	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.relationship_status ) ( string ! type ) ) ( call SW.reverse ( string relationship_status ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string employment_start_date ) ( string ! = ) ( date 2004 -1 -1 ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) ) )
name a person of the same gender as alice who is 180 cm tall	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string height ) ( string = ) ( number 180 en.cm ) ) ( call SW.reverse ( string gender ) ) ( string = ) en.person.alice ) )
what is the gender of people that stopped school in or after 2004	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.gender ) ( string ! type ) ) ( call SW.reverse ( string gender ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_end_date ) ) ( string >= ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) ) )
which student left most recently	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.superlative ( var s ) ( string max ) ( call SW.ensureNumericProperty ( string education_end_date ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )
find students whose last day was 2004 or later	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_end_date ) ) ( string >= ) ( call SW.ensureNumericEntity ( call SW.concat ( date 2004 -1 -1 ) ( date 2010 -1 -1 ) ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )
which 180 cm tall people have a start date of 2004	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string height ) ( string = ) ( number 180 en.cm ) ) ( string education_start_date ) ( string = ) ( date 2004 -1 -1 ) ) )
find students that have the latest start date	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.superlative ( var s ) ( string max ) ( call SW.ensureNumericProperty ( string education_start_date ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )
find all the employees that had no more than two jobs	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.countComparative ( var s ) ( string employer ) ( string <= ) ( number 2 ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )
find people whose height is 180 cm that are also friends with alice	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string height ) ( string = ) ( number 180 en.cm ) ) ( call SW.reverse ( string friend ) ) ( string = ) en.person.alice ) )
name all students who quit before alice	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_end_date ) ) ( string < ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string student ) ) ) ( string education_end_date ) ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )
find people who are logged in with a height of 180 cm	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string logged_in ) ) ( string height ) ( string = ) ( number 180 en.cm ) ) )
which student studied computer science or history	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string field_of_study ) ( string = ) ( call SW.concat en.field.computer_science en.field.history ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )
who has a relationship that started after 2004	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.relationship_status ) ( string ! type ) ) ( call SW.reverse ( string relationship_status ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_start_date ) ) ( string > ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) ) )
birth places of employees who quit in 2004 or before	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.city ) ( string ! type ) ) ( call SW.reverse ( string birthplace ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_end_date ) ) ( string <= ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) ) )
alices 2004 employment start date	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.person.alice ( call SW.reverse ( string employee ) ) ) ( string employment_start_date ) ( string = ) ( date 2004 -1 -1 ) ) ( string employment_start_date ) ) )
students who have the same end date as the start date of student alice	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string education_end_date ) ( string = ) ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string student ) ) ) ( string education_start_date ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )
find people who are students with a field of study that is not computer science and their friends	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.reverse ( string friend ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string field_of_study ) ( string ! = ) en.field.computer_science ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) ) )
people that stopped school when alice started	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string education_end_date ) ( string = ) ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string student ) ) ) ( string education_start_date ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )
what students completed school the same year alice began	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string education_end_date ) ( string = ) ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string student ) ) ) ( string education_start_date ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )
gender of student whose end date is not after 2004	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.gender ) ( string ! type ) ) ( call SW.reverse ( string gender ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_end_date ) ) ( string <= ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) ) )
people who are friends with the employee that does not start in 2004	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string friend ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string employment_start_date ) ( string ! = ) ( date 2004 -1 -1 ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) ) )
what employees have a start date that is the same as student alice or greater	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_start_date ) ) ( string >= ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string student ) ) ) ( string education_end_date ) ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )
which student does not attend brown university	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string university ) ( string ! = ) en.university.brown ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )
a friend of an employee that ends after 2004	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string friend ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_end_date ) ) ( string > ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) ) )
find everyone who is either single or married	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string relationship_status ) ( string = ) ( call SW.concat en.relationship_status.single en.relationship_status.married ) ) )
find those that are friends with students who have start dates earlier than 2004	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string friend ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_start_date ) ) ( string < ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) ) )
persons born in new york in 2004	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string birthplace ) ( string = ) en.city.new_york ) ( string birthdate ) ( string = ) ( date 2004 -1 -1 ) ) )
what student has an end date before 2004	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_end_date ) ) ( string < ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )
employees who finish on or after alice starts	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_end_date ) ) ( string >= ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string employee ) ) ) ( string employment_start_date ) ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )
which employees have the fewest job titles	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.countSuperlative ( var s ) ( string min ) ( string job_title ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )
find the genders of employees who have an end date no later than 2004	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.gender ) ( string ! type ) ) ( call SW.reverse ( string gender ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_end_date ) ) ( string <= ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) ) )
which relationship status is of at most two person	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.relationship_status ) ( string ! type ) ) ( call SW.reverse ( string relationship_status ) ) ( string <= ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ) )
find students who have fewer than two field of study	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.countComparative ( var s ) ( string field_of_study ) ( string < ) ( number 2 ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )
what cities were students born in who started after 2004	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.city ) ( string ! type ) ) ( call SW.reverse ( string birthplace ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_end_date ) ) ( string > ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) ) )
what employee has end date equal to employee alice	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string employment_end_date ) ( string = ) ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string employee ) ) ) ( string employment_end_date ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )
people that stopped working after alice did	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_end_date ) ) ( string > ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string employee ) ) ) ( string employment_end_date ) ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )
whose hight is at least 180cm	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string height ) ) ( string >= ) ( call SW.ensureNumericEntity ( call SW.concat ( number 180 en.cm ) ( number 200 en.cm ) ) ) ) )
who is friends with someone who didnt stop working in 2004	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.reverse ( string friend ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string employment_end_date ) ( string ! = ) ( date 2004 -1 -1 ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) ) )
which student started the day alice left her job	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_start_date ) ) ( string >= ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string employee ) ) ) ( string employment_end_date ) ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )
the job title of a 180 cm tall person	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.job_title ) ( string ! type ) ) ( call SW.reverse ( string job_title ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string height ) ( string = ) ( number 180 en.cm ) ) ) )
name the friend of a person not employed by mckinsey	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.reverse ( string friend ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string employer ) ( string ! = ) en.company.mckinsey ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) ) )
who started school before alice	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_start_date ) ) ( string < ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string student ) ) ) ( string education_start_date ) ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )
people who joined work after alice	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_end_date ) ) ( string < ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string employee ) ) ) ( string employment_start_date ) ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )
what student stopped before alice was born	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_end_date ) ) ( string < ) ( call SW.ensureNumericEntity ( call SW.getProperty en.person.alice ( string birthdate ) ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )
relationship status of employees whose end date is no earlier than 2004	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.relationship_status ) ( string ! type ) ) ( call SW.reverse ( string relationship_status ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_end_date ) ) ( string <= ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) ) )
which students left after 2004	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_end_date ) ) ( string >= ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )
which employees started no sooner than 2004 or 2010	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_start_date ) ) ( string >= ) ( call SW.ensureNumericEntity ( call SW.concat ( date 2004 -1 -1 ) ( date 2010 -1 -1 ) ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )
one student who started in or after 2004	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_start_date ) ) ( string >= ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )
employee who joined before alice quit the job	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_start_date ) ) ( string <= ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string student ) ) ) ( string education_end_date ) ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )
what employee has no more than two employers	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.countComparative ( var s ) ( string employer ) ( string <= ) ( number 2 ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )
people who have student friends who did not graduate in 2004	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string friend ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string education_end_date ) ( string ! = ) ( date 2004 -1 -1 ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) ) )
people that are friends with someone that started working before 2004	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string friend ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_start_date ) ) ( string < ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) ) )
students who graduated no later than the day alice did	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_end_date ) ) ( string <= ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string student ) ) ) ( string education_end_date ) ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )
what employees have a start date no later than that of student alice	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_start_date ) ) ( string <= ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string student ) ) ) ( string education_end_date ) ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )
what is the relationship status of a student whose end date is no later than 2004	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.relationship_status ) ( string ! type ) ) ( call SW.reverse ( string relationship_status ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_end_date ) ) ( string <= ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) ) )
alices friends who are logged in	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string logged_in ) ) ( call SW.reverse ( string friend ) ) ( string = ) en.person.alice ) )
people that are currently online that are single	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string relationship_status ) ( string = ) en.relationship_status.single ) ( string logged_in ) ) )
who are the friends of the new students that are starting by 2004	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string friend ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_start_date ) ) ( string >= ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) ) )
what is the relationship status of students who stated before 2004	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.relationship_status ) ( string ! type ) ) ( call SW.reverse ( string relationship_status ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_start_date ) ) ( string <= ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) ) )
ulca or brown univercity	( call SW.listValue ( call SW.concat en.university.brown en.university.ucla ) )
employees starting the latest	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.superlative ( var s ) ( string max ) ( call SW.ensureNumericProperty ( string employment_start_date ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )
find people that are friends with employees whose start date is later than 2004	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string friend ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_start_date ) ) ( string > ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) ) )
who measures 180 cm and quit in 2004	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string height ) ( string = ) ( number 180 en.cm ) ) ( string education_end_date ) ( string = ) ( date 2004 -1 -1 ) ) )
what is the relationship status of a student studying something other than computer science	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.relationship_status ) ( string ! type ) ) ( call SW.reverse ( string relationship_status ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string field_of_study ) ( string ! = ) en.field.computer_science ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) ) )
which people are friends of alices friends	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.reverse ( string friend ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.reverse ( string friend ) ) ( string = ) en.person.alice ) ) )
people with only one relationship status	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string relationship_status ) ( string < ) ( number 2 ) ) )
students who left by the time alice left	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_end_date ) ) ( string <= ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string employee ) ) ) ( string employment_end_date ) ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )
find alices friends who were born in new york	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string birthplace ) ( string = ) en.city.new_york ) ( call SW.reverse ( string friend ) ) ( string = ) en.person.alice ) )
student who started on birthdate of alice	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string education_start_date ) ( string = ) ( call SW.getProperty en.person.alice ( string birthdate ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )
find all of alices friends that are currently online	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.reverse ( string friend ) ) ( string = ) en.person.alice ) ( string logged_in ) ) )
find me all people who has a friend born in new york	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string friend ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string birthplace ) ( string = ) en.city.new_york ) ) )
people that stopped working when alice stopped school or before	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_end_date ) ) ( string <= ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string student ) ) ) ( string education_end_date ) ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )
find the relationship statuses of people whom alice is friends with	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.relationship_status ) ( string ! type ) ) ( call SW.reverse ( string relationship_status ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.reverse ( string friend ) ) ( string = ) en.person.alice ) ) )
people who joined study on the day alice completed	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string education_start_date ) ( string = ) ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string student ) ) ) ( string education_end_date ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )
who is that employee who isnt a software engineer friends with	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.reverse ( string friend ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string job_title ) ( string ! = ) en.job_title.software_engineer ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) ) )
friends of employees finishing in or after 2004	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string friend ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_end_date ) ) ( string >= ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) ) )
who is a person whose friends with alice that is single	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.reverse ( string friend ) ) ( string = ) en.person.alice ) ( string relationship_status ) ( string = ) en.relationship_status.single ) )
who has the least number of relationship statuses	( call SW.listValue ( call SW.countSuperlative ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string min ) ( string relationship_status ) ) )
a student who started after student alice	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_start_date ) ) ( string > ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string student ) ) ) ( string education_start_date ) ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )
birthplace of people who completed their study in an year other than 2004	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.city ) ( string ! type ) ) ( call SW.reverse ( string birthplace ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string education_end_date ) ( string ! = ) ( date 2004 -1 -1 ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) ) )
find people who were born in 2004 or later	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string birthdate ) ) ( string >= ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) )
genders of people that are currently online	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.gender ) ( string ! type ) ) ( call SW.reverse ( string gender ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string logged_in ) ) ) )
student whose end date is same as that of employee alice	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string education_end_date ) ( string = ) ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string employee ) ) ) ( string employment_end_date ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )
find employees with one or two job titles	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.countComparative ( var s ) ( string job_title ) ( string <= ) ( number 2 ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )
student whose field of study is not computer science	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string field_of_study ) ( string ! = ) en.field.computer_science ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )
what students have a start date that is no greater than employee alice	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_start_date ) ) ( string <= ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string employee ) ) ) ( string employment_start_date ) ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )
people who started in 2004 and are 180 cm tall	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string height ) ( string = ) ( number 180 en.cm ) ) ( string education_start_date ) ( string = ) ( date 2004 -1 -1 ) ) )
people who joined the institution after 2004	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_start_date ) ) ( string > ) ( call SW.ensureNumericEntity ( call SW.concat ( date 2004 -1 -1 ) ( date 2010 -1 -1 ) ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )
which employees started before alices last day	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_start_date ) ) ( string < ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string employee ) ) ) ( string employment_end_date ) ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )
relationship status of employees not finishing in 2004	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.relationship_status ) ( string ! type ) ) ( call SW.reverse ( string relationship_status ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string employment_end_date ) ( string ! = ) ( date 2004 -1 -1 ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) ) )
student whose start date  is before alices	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_start_date ) ) ( string < ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string student ) ) ) ( string education_start_date ) ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )
find employee with start date on or before alices	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_start_date ) ) ( string <= ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string student ) ) ) ( string education_start_date ) ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )
employees who started when alice quit her job	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string employment_start_date ) ( string = ) ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string employee ) ) ) ( string employment_end_date ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )
which employee has a start date on alices birthdate	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string employment_start_date ) ( string = ) ( call SW.getProperty en.person.alice ( string birthdate ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )
which employee has the largest end date	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.superlative ( var s ) ( string max ) ( call SW.ensureNumericProperty ( string employment_end_date ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )
what is the relationship status of students who are not at brown	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.relationship_status ) ( string ! type ) ) ( call SW.reverse ( string relationship_status ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string university ) ( string ! = ) en.university.brown ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) ) )
student who graduated before alice started her job	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_end_date ) ) ( string >= ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string employee ) ) ) ( string employment_start_date ) ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )
what is the birthplace of the employee who didnt start in 2004	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.city ) ( string ! type ) ) ( call SW.reverse ( string birthplace ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string employment_end_date ) ( string ! = ) ( date 2004 -1 -1 ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) ) )
which employer of alices ended in 2004	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.person.alice ( call SW.reverse ( string employee ) ) ) ( string employment_end_date ) ( string = ) ( date 2004 -1 -1 ) ) ( string employer ) ) )
name the employee who quit the job on the same date as employee alice	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_end_date ) ) ( string >= ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string employee ) ) ) ( string employment_end_date ) ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )
an employee starting after alice ends	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_start_date ) ) ( string > ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string student ) ) ) ( string education_end_date ) ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )
show me the students starting at the same time or after alice	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_start_date ) ) ( string <= ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string employee ) ) ) ( string employment_start_date ) ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )
when is the end date of alice	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string education_end_date ) ( string = ) ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string student ) ) ) ( string education_end_date ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )
find student whose last day is after alices birthday	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_end_date ) ) ( string > ) ( call SW.ensureNumericEntity ( call SW.getProperty en.person.alice ( string birthdate ) ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )
which employees have an eend date that is earlier than that of student alice	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_end_date ) ) ( string < ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string student ) ) ) ( string education_end_date ) ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )
people who were born the same day as or after alice	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string birthdate ) ) ( string >= ) ( call SW.ensureNumericEntity ( call SW.getProperty en.person.alice ( string birthdate ) ) ) ) )
who is born in new york or beijing	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string birthplace ) ( string = ) ( call SW.concat en.city.new_york en.city.bejing ) ) )
what people are friends with alice and have a height of 180 cm	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string friend ) ( string = ) en.person.alice ) ( string height ) ( string = ) ( number 180 en.cm ) ) )
students who started before or on alices last day	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_start_date ) ) ( string <= ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string student ) ) ) ( string education_end_date ) ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )
what gender is more than two people	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.gender ) ( string ! type ) ) ( call SW.reverse ( string gender ) ) ( string > ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ) )
who works for the same employer as ailce	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string employer ) ( string = ) ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string employee ) ) ) ( string employer ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )
who is friends with an employee who started in a year other than 2004	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string friend ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string employment_start_date ) ( string ! = ) ( date 2004 -1 -1 ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) ) )
what is the birthplace of the student who started in 2004	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.city ) ( string ! type ) ) ( call SW.reverse ( string birthplace ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_start_date ) ) ( string >= ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) ) )
who has two friends	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string friend ) ( string = ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ) )
what is the job title of alice who started in 2004	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.person.alice ( call SW.reverse ( string employee ) ) ) ( string employment_start_date ) ( string = ) ( date 2004 -1 -1 ) ) ( string job_title ) ) )
person whos birthday is before alice graduates	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string birthdate ) ) ( string <= ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string student ) ) ) ( string education_end_date ) ) ) ) )
who started working after the student alice did	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_start_date ) ) ( string > ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string student ) ) ) ( string education_start_date ) ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )
find me the relationship status of students who graduated since 2004	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.relationship_status ) ( string ! type ) ) ( call SW.reverse ( string relationship_status ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_end_date ) ) ( string >= ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) ) )
person who is friends with student that did not graduate in 2004	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.reverse ( string friend ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string education_end_date ) ( string ! = ) ( date 2004 -1 -1 ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) ) )
find someone born in the same city as alice	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string birthplace ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.city ) ( string ! type ) ) ( call SW.reverse ( string birthplace ) ) ( string = ) en.person.alice ) ) )
find employees who started in 2004 or before	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_start_date ) ) ( string <= ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )
the birthplace of an employee not ending in 2004	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.city ) ( string ! type ) ) ( call SW.reverse ( string birthplace ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string employment_end_date ) ( string ! = ) ( date 2004 -1 -1 ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) ) )
find employees friend with a last day in 2004 or before	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string friend ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_end_date ) ) ( string <= ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) ) )
where was alice born	( call SW.listValue ( call SW.getProperty en.person.alice ( string birthplace ) ) )
what is a person who has two genders called	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string gender ) ( string = ) ( number 2 ) ) )
employee whose start date is not after the end date of employee alice	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_start_date ) ) ( string <= ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string employee ) ) ) ( string employment_end_date ) ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )
who is friends with the person who didnt graduate in 2004	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.reverse ( string friend ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string education_end_date ) ( string ! = ) ( date 2004 -1 -1 ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) ) )
who is the friend of the employee whose start date is at least 2005	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string friend ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string employment_start_date ) ( string ! = ) ( date 2004 -1 -1 ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) ) )
friends of people who studied the fields other than computer science	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.reverse ( string friend ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string field_of_study ) ( string ! = ) en.field.computer_science ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) ) )
find people who do not have more than two friends	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string friend ) ( string <= ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ) )
employees who started on the day that alice graduated	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string employment_start_date ) ( string = ) ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string student ) ) ) ( string education_end_date ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )
students who finish after 2004	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_end_date ) ) ( string > ) ( call SW.ensureNumericEntity ( call SW.concat ( date 2004 -1 -1 ) ( date 2010 -1 -1 ) ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )
whats the gender of the students who are not studying computer science	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.gender ) ( string ! type ) ) ( call SW.reverse ( string gender ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string field_of_study ) ( string ! = ) en.field.computer_science ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) ) )
an employee that ends before alice	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_end_date ) ) ( string < ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string student ) ) ) ( string education_end_date ) ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )
people who are friends with alice and born in 2004	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string birthdate ) ( string = ) ( date 2004 -1 -1 ) ) ( string friend ) ( string = ) en.person.alice ) )
find employees starting on or before alices last day	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_start_date ) ) ( string <= ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string employee ) ) ) ( string employment_end_date ) ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )
gender of people who started their study before 2005	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.gender ) ( string ! type ) ) ( call SW.reverse ( string gender ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_start_date ) ) ( string <= ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) ) )
what employee started the earliest	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.superlative ( var s ) ( string min ) ( call SW.ensureNumericProperty ( string employment_start_date ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )
who is either shorter than alice or same	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string height ) ) ( string <= ) ( call SW.ensureNumericEntity ( call SW.getProperty en.person.alice ( string height ) ) ) ) )
birthplace of students whose end date is before 2004	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.city ) ( string ! type ) ) ( call SW.reverse ( string birthplace ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_end_date ) ) ( string < ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) ) )
what employees started at the same time as alice	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_start_date ) ) ( string >= ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string student ) ) ) ( string education_end_date ) ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )
what person is friends with an employee who does not work for mckinsey	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string friend ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string employer ) ( string ! = ) en.company.mckinsey ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) ) )
people who were born in 2004 and are single	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string birthdate ) ( string = ) ( date 2004 -1 -1 ) ) ( string relationship_status ) ( string = ) en.relationship_status.single ) )
find employee whose last day at work is before alices start date	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_end_date ) ) ( string < ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string student ) ) ) ( string education_start_date ) ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )
employees that are not employed by mckinsey	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string employer ) ( string ! = ) en.company.mckinsey ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )
find people born after the employment of alice	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string birthdate ) ) ( string >= ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string employee ) ) ) ( string employment_start_date ) ) ) ) )
find people of the same gender as alices friends	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.gender ) ( string ! type ) ) ( call SW.reverse ( string gender ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.reverse ( string friend ) ) ( string = ) en.person.alice ) ) )
when did alice start school	( call SW.listValue ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string student ) ) ) ( string education_start_date ) ) )
birthplace of students not starting in 2004	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.city ) ( string ! type ) ) ( call SW.reverse ( string birthplace ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string education_start_date ) ( string ! = ) ( date 2004 -1 -1 ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) ) )
what people have more than two relationship status	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string relationship_status ) ( string > ) ( number 2 ) ) )
relationship status of student whose field of study is not computer science	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.relationship_status ) ( string ! type ) ) ( call SW.reverse ( string relationship_status ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string field_of_study ) ( string ! = ) en.field.computer_science ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) ) )
relationship status of students whose end date is before 2004	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.relationship_status ) ( string ! type ) ) ( call SW.reverse ( string relationship_status ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_end_date ) ) ( string < ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) ) )
find students friends who started in a year other than 2004	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string friend ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string education_start_date ) ( string ! = ) ( date 2004 -1 -1 ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) ) )
find students starting after alices last day	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_start_date ) ) ( string > ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string student ) ) ) ( string education_end_date ) ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )
which student started school after alice was born	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_start_date ) ) ( string > ) ( call SW.ensureNumericEntity ( call SW.getProperty en.person.alice ( string birthdate ) ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )
find me all employees who quit before 2004	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_end_date ) ) ( string < ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )
people born on or before the day alice started school	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string birthdate ) ) ( string <= ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string student ) ) ) ( string education_start_date ) ) ) ) )
people that started working when alice stopped working	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string employment_start_date ) ( string = ) ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string employee ) ) ) ( string employment_end_date ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )
people that stopped working before alice started working	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_end_date ) ) ( string < ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string employee ) ) ) ( string employment_start_date ) ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )
find people that are friends with employees who have an end date no later than 2004	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string friend ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_end_date ) ) ( string <= ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) ) )
an employee ending in 2004 or 2010	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_end_date ) ) ( string <= ) ( call SW.ensureNumericEntity ( call SW.concat ( date 2004 -1 -1 ) ( date 2010 -1 -1 ) ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )
employee who has maximum 2 job titles	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.countComparative ( var s ) ( string job_title ) ( string <= ) ( number 2 ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )
which students ended school in 2004 and 2010	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_end_date ) ) ( string >= ) ( call SW.ensureNumericEntity ( call SW.concat ( date 2004 -1 -1 ) ( date 2010 -1 -1 ) ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )
people that started work before alice started school	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_start_date ) ) ( string < ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string student ) ) ) ( string education_start_date ) ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )
what is the gender of students who did not graduate before 2004	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.gender ) ( string ! type ) ) ( call SW.reverse ( string gender ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_end_date ) ) ( string >= ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) ) )
what students have a start date that is either 2004 or 2010	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_start_date ) ) ( string >= ) ( call SW.ensureNumericEntity ( call SW.concat ( date 2004 -1 -1 ) ( date 2010 -1 -1 ) ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )
what employee has the same end date as alice	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string employment_end_date ) ( string = ) ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string student ) ) ) ( string education_end_date ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )
employees who started on alices start date or later	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_start_date ) ) ( string >= ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string employee ) ) ) ( string employment_start_date ) ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )
what employees started on alices birthday	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string employment_start_date ) ( string = ) ( call SW.getProperty en.person.alice ( string birthdate ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )
which employees last day was not n 2004	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string employment_end_date ) ( string ! = ) ( date 2004 -1 -1 ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )
what employee is leaving the company on the same date that alice starts her job	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string employment_end_date ) ( string = ) ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string student ) ) ) ( string education_start_date ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )
what is the gender of an employee with an end date later than 2004	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.gender ) ( string ! type ) ) ( call SW.reverse ( string gender ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_end_date ) ) ( string > ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) ) )
an employee who left before alice was born	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_end_date ) ) ( string < ) ( call SW.ensureNumericEntity ( call SW.getProperty en.person.alice ( string birthdate ) ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )
when did alice start her job	( call SW.listValue ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string employee ) ) ) ( string employment_start_date ) ) )
what date in 2004 did alice stop working	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.person.alice ( call SW.reverse ( string employee ) ) ) ( string employment_end_date ) ( string = ) ( date 2004 -1 -1 ) ) ( string employment_end_date ) ) )
people with friends who have jobs but not software engineers	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.reverse ( string friend ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string job_title ) ( string ! = ) en.job_title.software_engineer ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) ) )
what relationship status is listed by the least number of people	( call SW.listValue ( call SW.countSuperlative ( call SW.getProperty ( call SW.singleton en.relationship_status ) ( string ! type ) ) ( string min ) ( call SW.reverse ( string relationship_status ) ) ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ) )
which employee has an end date earlier than alice	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_end_date ) ) ( string < ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string employee ) ) ) ( string employment_end_date ) ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )
people with friends who are single	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.reverse ( string friend ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string relationship_status ) ( string = ) en.relationship_status.single ) ) )
people who completed their study before alice was born	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_end_date ) ) ( string < ) ( call SW.ensureNumericEntity ( call SW.getProperty en.person.alice ( string birthdate ) ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )
which persons are friends with employees that started before 2004	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string friend ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_start_date ) ) ( string < ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) ) )
who was born in the same place as alice	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string birthplace ) ( string = ) ( call SW.getProperty en.person.alice ( string birthplace ) ) ) )
name people whose height is greater than 180 cm	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string height ) ) ( string > ) ( call SW.ensureNumericEntity ( number 180 en.cm ) ) ) )
employees who quit their job on the same day alice started her job	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string employment_end_date ) ( string = ) ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string employee ) ) ) ( string employment_start_date ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )
what is the relationship status of a person whose height is 180 cm	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.relationship_status ) ( string ! type ) ) ( call SW.reverse ( string relationship_status ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string height ) ( string = ) ( number 180 en.cm ) ) ) )
who is 180 cm tall and has the same birthdate as alice	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string height ) ( string = ) ( number 180 en.cm ) ) ( call SW.reverse ( string birthdate ) ) ( string = ) en.person.alice ) )
which student was the last to finish	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.superlative ( var s ) ( string max ) ( call SW.ensureNumericProperty ( string education_end_date ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )
who is friends with students who start date is 2004	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.reverse ( string friend ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_start_date ) ) ( string >= ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) ) )
find me people who have the same relationship status of people who are 180 cm tall	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string relationship_status ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string height ) ( string = ) ( number 180 en.cm ) ) ) )
find all alices friends that are male	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.reverse ( string friend ) ) ( string = ) en.person.alice ) ( string gender ) ( string = ) en.gender.male ) )
which friends stopped working in 2004	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.reverse ( string friend ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_end_date ) ) ( string <= ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) ) )
who is alice friends with that is logged in	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.reverse ( string friend ) ) ( string = ) en.person.alice ) ( string logged_in ) ) )
a student not taking computer science	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string field_of_study ) ( string ! = ) en.field.computer_science ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )
gender employee whose end date is not 2004	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.gender ) ( string ! type ) ) ( call SW.reverse ( string gender ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string employment_end_date ) ( string ! = ) ( date 2004 -1 -1 ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) ) )
what is the gender of the employee who started after 2004	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.gender ) ( string ! type ) ) ( call SW.reverse ( string gender ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_start_date ) ) ( string > ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) ) )
who is from new york and logged in	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string logged_in ) ) ( string birthplace ) ( string = ) en.city.new_york ) )
whose friend is logged in	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string friend ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string logged_in ) ) ) )
what students started between 2004 and 2010	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_start_date ) ) ( string >= ) ( call SW.ensureNumericEntity ( call SW.concat ( date 2004 -1 -1 ) ( date 2010 -1 -1 ) ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )
who has two or more relationship statuses at once	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string relationship_status ) ( string >= ) ( number 2 ) ) )
what is the relationship status of the student whose start date is before 204	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.relationship_status ) ( string ! type ) ) ( call SW.reverse ( string relationship_status ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_start_date ) ) ( string > ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) ) )
what person has a birthdate no later than 2004	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string birthdate ) ) ( string <= ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) )
people that started school in or after 2004	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_start_date ) ) ( string >= ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )
what is alices job title from company she left in 2004	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.person.alice ( call SW.reverse ( string employee ) ) ) ( string employment_end_date ) ( string = ) ( date 2004 -1 -1 ) ) ( string job_title ) ) )
what is the relationship status of students who have an end date that is from 2004 or greater	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.relationship_status ) ( string ! type ) ) ( call SW.reverse ( string relationship_status ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_end_date ) ) ( string >= ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) ) )
which working people have less than two job titles	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.countComparative ( var s ) ( string job_title ) ( string < ) ( number 2 ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )
180 cm tall people worked at mckinsey	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string height ) ( string = ) ( number 180 en.cm ) ) ( string employer ) ( string = ) en.company.mckinsey ) )
which students started no later than alices birthdate	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_start_date ) ) ( string <= ) ( call SW.ensureNumericEntity ( call SW.getProperty en.person.alice ( string birthdate ) ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )
who is friends with an employee who does not work for mckinsey	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string friend ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string employer ) ( string ! = ) en.company.mckinsey ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) ) )
friends of students who began earlier than 2004	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.reverse ( string friend ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_start_date ) ) ( string < ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) ) )
find the birthplace of people who are 6 feet tall	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string birthplace ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string height ) ( string = ) ( number 180 en.cm ) ) ) )
when did student of computer science alice finish	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.person.alice ( call SW.reverse ( string student ) ) ) ( string field_of_study ) ( string = ) en.field.computer_science ) ( string education_end_date ) ) )
people who are born the same day alice started her job	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string birthdate ) ( string = ) ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string employee ) ) ) ( string employment_start_date ) ) ) )
what employer has the least amount of employees	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.countSuperlative ( var s ) ( string min ) ( string employer ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )
what is relationship status of students starting in 2003 or before	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.relationship_status ) ( string ! type ) ) ( call SW.reverse ( string relationship_status ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_start_date ) ) ( string < ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) ) )
what person was born in new york and single	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string birthplace ) ( string = ) en.city.new_york ) ( string relationship_status ) ( string = ) en.relationship_status.single ) )
employee with the largest number of employers	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.countSuperlative ( var s ) ( string max ) ( string employer ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )
find employees called software engineers who are 180 cm tall	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string height ) ( string = ) ( number 180 en.cm ) ) ( string job_title ) ( string = ) en.job_title.software_engineer ) )
what gender has the fewest people	( call SW.listValue ( call SW.countSuperlative ( call SW.getProperty ( call SW.singleton en.gender ) ( string ! type ) ) ( string min ) ( call SW.reverse ( string gender ) ) ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ) )
who graduated after alice	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_end_date ) ) ( string > ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string student ) ) ) ( string education_end_date ) ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )
person born before 2004	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string birthdate ) ) ( string <= ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) )
what employees have a start date that is the same as student alice or later	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_start_date ) ) ( string >= ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string student ) ) ) ( string education_start_date ) ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )
people that are friends with alice or bob	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string friend ) ( string = ) ( call SW.concat en.person.alice en.person.bob ) ) )
what is schooling start date of alice	( call SW.listValue ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string student ) ) ) ( string education_start_date ) ) )
what is the gender of working people that dont work for mckinsey	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.gender ) ( string ! type ) ) ( call SW.reverse ( string gender ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string employer ) ( string ! = ) en.company.mckinsey ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) ) )
who is friends with alice and has a birthdate on 2004	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string friend ) ( string = ) en.person.alice ) ( string birthdate ) ( string = ) ( date 2004 -1 -1 ) ) )
what is the last date of alice who is a student of brown university	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.person.alice ( call SW.reverse ( string student ) ) ) ( string university ) ( string = ) en.university.brown ) ( string education_end_date ) ) )
people that started work in or before 2004 or in or before 2010	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_start_date ) ) ( string <= ) ( call SW.ensureNumericEntity ( call SW.concat ( date 2004 -1 -1 ) ( date 2010 -1 -1 ) ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )
friends of people who completed their studies in an year other than 2004	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.reverse ( string friend ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string education_end_date ) ( string ! = ) ( date 2004 -1 -1 ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) ) )
which employee started earlier than alices birthdate	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_start_date ) ) ( string < ) ( call SW.ensureNumericEntity ( call SW.getProperty en.person.alice ( string birthdate ) ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )
what is the status of alices relationship	( call SW.listValue ( call SW.getProperty en.person.alice ( string relationship_status ) ) )
employee whose start date is minimum 2004	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_start_date ) ) ( string >= ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )
find people having a relationship with people who are 180 cm tall	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string relationship_status ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string height ) ( string = ) ( number 180 en.cm ) ) ) )
who does mckinsey employ who is 180 cm tall	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string height ) ( string = ) ( number 180 en.cm ) ) ( string employer ) ( string = ) en.company.mckinsey ) )
which students started after 2004	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_start_date ) ) ( string > ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )
what employee quit their job on the day alice started	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string employment_end_date ) ( string = ) ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string student ) ) ) ( string education_start_date ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )
who has two different relationship statuses	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string relationship_status ) ( string = ) ( number 2 ) ) )
relationship status of nonsoftware engineers	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.relationship_status ) ( string ! type ) ) ( call SW.reverse ( string relationship_status ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string job_title ) ( string ! = ) en.job_title.software_engineer ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) ) )
where were the people that started working in any year but 2004 born	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.city ) ( string ! type ) ) ( call SW.reverse ( string birthplace ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string employment_start_date ) ( string ! = ) ( date 2004 -1 -1 ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) ) )
what relationship statuses are claimed by people born in 2004	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.relationship_status ) ( string ! type ) ) ( call SW.reverse ( string relationship_status ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string birthdate ) ( string = ) ( date 2004 -1 -1 ) ) ) )
who is friends with employees who have an end date that is not 2004	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.reverse ( string friend ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string employment_end_date ) ( string ! = ) ( date 2004 -1 -1 ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) ) )
180 cm tall persons studied in brown university	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string height ) ( string = ) ( number 180 en.cm ) ) ( string university ) ( string = ) en.university.brown ) )
find friends of employees who quit the job after 2004	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string friend ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_end_date ) ) ( string > ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) ) )
who is the friend of alice	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string friend ) ( string = ) en.person.alice ) ( string friend ) ( string = ) en.person.alice ) )
find all of alices friends who are currently online	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string logged_in ) ) ( string friend ) ( string = ) en.person.alice ) )
what is the gender of people attending any university but brown	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.gender ) ( string ! type ) ) ( call SW.reverse ( string gender ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string university ) ( string ! = ) en.university.brown ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) ) )
what employee has an end date that is at least the end date for the employee alice	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_end_date ) ) ( string >= ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string employee ) ) ) ( string employment_end_date ) ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )
people that started school when alice was born	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string education_start_date ) ( string = ) ( call SW.getProperty en.person.alice ( string birthdate ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )
what students have an end date that is lower than the start date of alice	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_end_date ) ) ( string < ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string student ) ) ) ( string education_start_date ) ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )
what student has the most majors	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.countSuperlative ( var s ) ( string max ) ( string field_of_study ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )
students who started school after alice quit her job	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_start_date ) ) ( string > ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string employee ) ) ) ( string employment_end_date ) ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )
what employees have mickinsey as their employer	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string employer ) ( string = ) ( call SW.concat en.company.mckinsey en.company.google ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )
what student has fewer than two fields of study	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.countComparative ( var s ) ( string field_of_study ) ( string < ) ( number 2 ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )
where was alices friend born in	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.city ) ( string ! type ) ) ( call SW.reverse ( string birthplace ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string friend ) ( string = ) en.person.alice ) ) )
people who are friends with an employee whose end date is no later than 2004	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string friend ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_end_date ) ) ( string <= ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) ) )
who is friends with students who started before 2004	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string friend ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_start_date ) ) ( string <= ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) ) )
what person is friends with males	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string friend ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string gender ) ( string = ) en.gender.male ) ) )
working person with the least job titles	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.countSuperlative ( var s ) ( string min ) ( string job_title ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )
who is born after student alice started	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string birthdate ) ) ( string > ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string student ) ) ) ( string education_start_date ) ) ) ) )
which is the university alice studied	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string university ) ( string = ) ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string student ) ) ) ( string university ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )
gender of a student who was enrolled after 2004	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.gender ) ( string ! type ) ) ( call SW.reverse ( string gender ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_start_date ) ) ( string > ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) ) )
who is born in 2004 at new york	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string birthdate ) ( string = ) ( date 2004 -1 -1 ) ) ( string birthplace ) ( string = ) en.city.new_york ) )
employees who started on the same date as alice	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string employment_start_date ) ( string = ) ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string student ) ) ) ( string education_start_date ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )
find students starting before 2010	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_start_date ) ) ( string < ) ( call SW.ensureNumericEntity ( call SW.concat ( date 2004 -1 -1 ) ( date 2010 -1 -1 ) ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )
people who have friends and started working after 2004	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.reverse ( string friend ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_start_date ) ) ( string > ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) ) )
who was born on a date before alices start date	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string birthdate ) ) ( string < ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string student ) ) ) ( string education_start_date ) ) ) ) )
find a student who left on alices birthday	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string education_end_date ) ( string = ) ( call SW.getProperty en.person.alice ( string birthdate ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )
anyone who is alices friend	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.reverse ( string friend ) ) ( string = ) en.person.alice ) )
who graduated before 2004	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_end_date ) ) ( string < ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )
people with relationship status as alice	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string relationship_status ) ( string = ) ( call SW.getProperty en.person.alice ( string relationship_status ) ) ) )
what is the universitys number	( call SW.listValue ( call .size ( call SW.getProperty ( call SW.singleton en.university ) ( string ! type ) ) ) )
find people with two relationship statuses	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string relationship_status ) ( string = ) ( number 2 ) ) )
find student with earliest last day	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.superlative ( var s ) ( string min ) ( call SW.ensureNumericProperty ( string education_end_date ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )
students who started in or before 2004 or 2010	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_start_date ) ) ( string <= ) ( call SW.ensureNumericEntity ( call SW.concat ( date 2004 -1 -1 ) ( date 2010 -1 -1 ) ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )
find all friends that are not software engineers	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.reverse ( string friend ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string job_title ) ( string ! = ) en.job_title.software_engineer ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) ) )
what is the birthplace of students who graduated no later than 2004	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.city ) ( string ! type ) ) ( call SW.reverse ( string birthplace ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_end_date ) ) ( string <= ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) ) )
employees who were hired either in 2004 or 2010	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string employment_start_date ) ( string = ) ( call SW.concat ( date 2004 -1 -1 ) ( date 2010 -1 -1 ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )
what people have two relationship statuses	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string relationship_status ) ( string = ) ( number 2 ) ) )
name an employee who started before alice quit	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_start_date ) ) ( string <= ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string student ) ) ) ( string education_end_date ) ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )
what sex are the employees who did not start in 2004	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.gender ) ( string ! type ) ) ( call SW.reverse ( string gender ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string employment_start_date ) ( string ! = ) ( date 2004 -1 -1 ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) ) )
people that started school on or before the day alice stopped working	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_start_date ) ) ( string <= ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string employee ) ) ) ( string employment_end_date ) ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )
name a person born in 2004 who is 180 cm tall	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string birthdate ) ( string = ) ( date 2004 -1 -1 ) ) ( string height ) ( string = ) ( number 180 en.cm ) ) )
what is the gender of the single people	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.gender ) ( string ! type ) ) ( call SW.reverse ( string gender ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string relationship_status ) ( string = ) en.relationship_status.single ) ) )
find relationship statuses for students who have an end date that is not 2004	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.relationship_status ) ( string ! type ) ) ( call SW.reverse ( string relationship_status ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string education_end_date ) ( string ! = ) ( date 2004 -1 -1 ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) ) )
people who are friends with employees who started work before 2004	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string friend ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_end_date ) ) ( string <= ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) ) )
what is the city that is the birthplace of at least two people	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.city ) ( string ! type ) ) ( call SW.reverse ( string birthplace ) ) ( string < ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ) )
find employees working for the most employers	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.countSuperlative ( var s ) ( string max ) ( string employer ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )
180 cm tall person with same relationship status as that of alice	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string height ) ( string = ) ( number 180 en.cm ) ) ( call SW.reverse ( string relationship_status ) ) ( string = ) en.person.alice ) )
student whose fields of study are smallest	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.countSuperlative ( var s ) ( string min ) ( string field_of_study ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )
what students have a start date that is equal to alices birthday or later	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_start_date ) ) ( string >= ) ( call SW.ensureNumericEntity ( call SW.getProperty en.person.alice ( string birthdate ) ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )
whats the gender of the student that leaves before 2004	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.gender ) ( string ! type ) ) ( call SW.reverse ( string gender ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_end_date ) ) ( string < ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) ) )
name a friend of the person who is 180 cm tall	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.reverse ( string friend ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string height ) ( string = ) ( number 180 en.cm ) ) ) )
what employees have a end date that is no greater than the start date of student alice	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_end_date ) ) ( string <= ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string student ) ) ) ( string education_start_date ) ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )
people 180 cm tall who are single	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string relationship_status ) ( string = ) en.relationship_status.single ) ( string height ) ( string = ) ( number 180 en.cm ) ) )
someone with two relationship status	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string relationship_status ) ( string = ) ( number 2 ) ) )
when did alice start working for mckinsey	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.person.alice ( call SW.reverse ( string employee ) ) ) ( string employer ) ( string = ) en.company.mckinsey ) ( string employment_start_date ) ) )
what employee has a start date that is the same as the end date of alice	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string employment_start_date ) ( string = ) ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string student ) ) ) ( string education_end_date ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )
who is the employee	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_start_date ) ) ( string <= ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string employee ) ) ) ( string employment_end_date ) ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )
relationship status of student whose end date is before 2004	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.relationship_status ) ( string ! type ) ) ( call SW.reverse ( string relationship_status ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_end_date ) ) ( string < ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) ) )
what was the graduation date of alice in 2004	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.person.alice ( call SW.reverse ( string student ) ) ) ( string education_end_date ) ( string = ) ( date 2004 -1 -1 ) ) ( string education_end_date ) ) )
what is the relationship status of employees starting in 2004 or later	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.relationship_status ) ( string ! type ) ) ( call SW.reverse ( string relationship_status ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_start_date ) ) ( string >= ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) ) )
what is the relationship status of employees whose last day was no earlier than 2004	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.relationship_status ) ( string ! type ) ) ( call SW.reverse ( string relationship_status ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_end_date ) ) ( string >= ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) ) )
people with at most two friends	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.reverse ( string friend ) ) ( string <= ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ) )
people who have friends that were born in new york	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string friend ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string birthplace ) ( string = ) en.city.new_york ) ) )
people that started school before alice did	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_start_date ) ) ( string < ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string student ) ) ) ( string education_start_date ) ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )
students who left before alice started	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_end_date ) ) ( string < ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string student ) ) ) ( string education_start_date ) ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )
which people are friends with employees how started after 2004	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string friend ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_start_date ) ) ( string > ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) ) )
friends of people with 180 cm height	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.reverse ( string friend ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string height ) ( string = ) ( number 180 en.cm ) ) ) )
who is alices friend	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string friend ) ( string = ) en.person.alice ) )
whats the gender of the student that did not attend brown university	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.gender ) ( string ! type ) ) ( call SW.reverse ( string gender ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string university ) ( string ! = ) en.university.brown ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) ) )
birth city of employees whose end date is after 2004	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.city ) ( string ! type ) ) ( call SW.reverse ( string birthplace ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_end_date ) ) ( string > ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) ) )
who has maximum two friends	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string friend ) ( string <= ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ) )
people who were born between 2004 and 2010	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string birthdate ) ) ( string > ) ( call SW.ensureNumericEntity ( call SW.concat ( date 2004 -1 -1 ) ( date 2010 -1 -1 ) ) ) ) )
what person who ended in 2004 is 180 cm tall	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string height ) ( string = ) ( number 180 en.cm ) ) ( string education_end_date ) ( string = ) ( date 2004 -1 -1 ) ) )
who has friends that are students whos start date before 2004	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.reverse ( string friend ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string education_start_date ) ( string ! = ) ( date 2004 -1 -1 ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) ) )
people that started working in or before 2004	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_start_date ) ) ( string <= ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )
what students have an end date that is the same of later than student alice	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_end_date ) ) ( string >= ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string student ) ) ) ( string education_end_date ) ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )
find people with a start date of 2004 and height of 180 cm	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string height ) ( string = ) ( number 180 en.cm ) ) ( string education_start_date ) ( string = ) ( date 2004 -1 -1 ) ) )
who is 180 cm tall working at mckinsey	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string height ) ( string = ) ( number 180 en.cm ) ) ( string employer ) ( string = ) en.company.mckinsey ) )
people who are friends with an employee that started before 2004	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string friend ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_start_date ) ) ( string < ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) ) )
which person has two friends	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string friend ) ( string = ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ) )
birthplace of employees finishing in or after 2004	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.city ) ( string ! type ) ) ( call SW.reverse ( string birthplace ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_end_date ) ) ( string >= ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) ) )
find people with same birth date as alice or later	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string birthdate ) ) ( string >= ) ( call SW.ensureNumericEntity ( call SW.getProperty en.person.alice ( string birthdate ) ) ) ) )
which people have more than genders	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string gender ) ( string > ) ( number 2 ) ) )
what is the gender of people that started working after 2004	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.gender ) ( string ! type ) ) ( call SW.reverse ( string gender ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_start_date ) ) ( string > ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) ) )
which students have the earliest start date	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.superlative ( var s ) ( string min ) ( call SW.ensureNumericProperty ( string education_start_date ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )
which employee started after the student named alice	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_start_date ) ) ( string > ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string student ) ) ) ( string education_start_date ) ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )
find employees with last day not in 2004	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string employment_end_date ) ( string ! = ) ( date 2004 -1 -1 ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )
friend of alice	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.reverse ( string friend ) ) ( string = ) en.person.alice ) ( string friend ) ( string = ) en.person.alice ) )
who is software engineer or program manager	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string job_title ) ( string = ) ( call SW.concat en.job_title.software_engineer en.job_title.program_manager ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )
find alice a student at university	( call SW.listValue ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string student ) ) ) ( string university ) ) )
employee who quit before alice started	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string employment_end_date ) ( string = ) ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string student ) ) ) ( string education_start_date ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )
what is the gender of students with an end date ealier than 2004	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.gender ) ( string ! type ) ) ( call SW.reverse ( string gender ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_end_date ) ) ( string < ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) ) )
employee who joined before 2004 or in 2010	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_start_date ) ) ( string < ) ( call SW.ensureNumericEntity ( call SW.concat ( date 2004 -1 -1 ) ( date 2010 -1 -1 ) ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )
employees with the same job title as alice	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string job_title ) ( string = ) ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string employee ) ) ) ( string job_title ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )
students studying either computer science or history	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string field_of_study ) ( string = ) ( call SW.concat en.field.computer_science en.field.history ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )
find all people who have alices as a mutual friend	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string friend ) ( string = ) en.person.alice ) ( call SW.reverse ( string friend ) ) ( string = ) en.person.alice ) )
employees who finish when alice starts	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string employment_end_date ) ( string = ) ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string student ) ) ) ( string education_start_date ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )
people who are in a relationship	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string relationship_status ) ( string ! = ) en.relationship_status.single ) )
what person was born in new york	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string birthplace ) ( string = ) en.city.new_york ) )
least common relationship status	( call SW.listValue ( call SW.countSuperlative ( call SW.getProperty ( call SW.singleton en.relationship_status ) ( string ! type ) ) ( string min ) ( call SW.reverse ( string relationship_status ) ) ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ) )
birthplaces of alices friends	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.city ) ( string ! type ) ) ( call SW.reverse ( string birthplace ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.reverse ( string friend ) ) ( string = ) en.person.alice ) ) )
what is job title of alice who is employed since 2004	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.person.alice ( call SW.reverse ( string employee ) ) ) ( string employment_start_date ) ( string = ) ( date 2004 -1 -1 ) ) ( string job_title ) ) )
relationship status of students not finishing in 2004	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.relationship_status ) ( string ! type ) ) ( call SW.reverse ( string relationship_status ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string education_end_date ) ( string ! = ) ( date 2004 -1 -1 ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) ) )
where was alice not born	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.city ) ( string ! type ) ) ( call SW.reverse ( string birthplace ) ) ( string ! = ) en.person.alice ) )
what employee ended at least on alices birthdate	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_end_date ) ) ( string >= ) ( call SW.ensureNumericEntity ( call SW.getProperty en.person.alice ( string birthdate ) ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )
students who ended school the same day that alice ended school	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string education_end_date ) ( string = ) ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string student ) ) ) ( string education_end_date ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )
employee who left before 2004 or in 2010	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_end_date ) ) ( string <= ) ( call SW.ensureNumericEntity ( call SW.concat ( date 2004 -1 -1 ) ( date 2010 -1 -1 ) ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )
employees starting in or after 2004	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_start_date ) ) ( string >= ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )
whats the gender of students who started school after 2004	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.gender ) ( string ! type ) ) ( call SW.reverse ( string gender ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_start_date ) ) ( string >= ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) ) )
when did alice start the job she left in 2004	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.person.alice ( call SW.reverse ( string employee ) ) ) ( string employment_end_date ) ( string = ) ( date 2004 -1 -1 ) ) ( string employment_start_date ) ) )
how many relationship statuses are there	( call SW.listValue ( call .size ( call SW.getProperty ( call SW.singleton en.relationship_status ) ( string ! type ) ) ) )
who has over two genders	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string gender ) ( string > ) ( number 2 ) ) )
an employee who left on or before the day student alice started	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_end_date ) ) ( string <= ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string student ) ) ) ( string education_start_date ) ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )
friends of students before 2004	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.reverse ( string friend ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_start_date ) ) ( string < ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) ) )
what students had a start date of 2004 or 2010	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_start_date ) ) ( string <= ) ( call SW.ensureNumericEntity ( call SW.concat ( date 2004 -1 -1 ) ( date 2010 -1 -1 ) ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )
what is the gender of employees whose start date is earlier than 2004	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.gender ) ( string ! type ) ) ( call SW.reverse ( string gender ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_start_date ) ) ( string < ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) ) )
which students started no earlier than the day alice started school	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_start_date ) ) ( string >= ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string student ) ) ) ( string education_start_date ) ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )
find friends of alice or bob	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.reverse ( string friend ) ) ( string = ) ( call SW.concat en.person.alice en.person.bob ) ) )
find people who are friends with employees who have a start date of no later than 2004	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string friend ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_start_date ) ) ( string <= ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) ) )
employee whose end date is not after birth date of alice	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_start_date ) ) ( string <= ) ( call SW.ensureNumericEntity ( call SW.getProperty en.person.alice ( string birthdate ) ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )
two or more gendered people	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string gender ) ( string >= ) ( number 2 ) ) )
find people who are friends with alice or bob	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.reverse ( string friend ) ) ( string = ) ( call SW.concat en.person.alice en.person.bob ) ) )
what is the status of the two peoples relationship	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.relationship_status ) ( string ! type ) ) ( call SW.reverse ( string relationship_status ) ) ( string = ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ) )
people who are not studying computer science	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string field_of_study ) ( string ! = ) en.field.computer_science ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )
student whose start date is not before birth date of alice	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_start_date ) ) ( string >= ) ( call SW.ensureNumericEntity ( call SW.getProperty en.person.alice ( string birthdate ) ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )
find the gender that more than two people share	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.gender ) ( string ! type ) ) ( call SW.reverse ( string gender ) ) ( string > ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ) )
who is friends with the single person	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.reverse ( string friend ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string relationship_status ) ( string = ) en.relationship_status.single ) ) )
employee whose start date is same as that of student alice	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string employment_start_date ) ( string = ) ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string student ) ) ) ( string education_start_date ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )
find alices friends who are 180 cm tall	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.reverse ( string friend ) ) ( string = ) en.person.alice ) ( string height ) ( string = ) ( number 180 en.cm ) ) )
name an employee who quit before alice was born	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_end_date ) ) ( string <= ) ( call SW.ensureNumericEntity ( call SW.getProperty en.person.alice ( string birthdate ) ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )
a friend of someone born in 2004	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.reverse ( string friend ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string birthdate ) ( string = ) ( date 2004 -1 -1 ) ) ) )
people not born in new york	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string birthplace ) ( string ! = ) en.city.new_york ) )
what students have an end date no earlier than 2004	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_end_date ) ) ( string >= ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )
find students whose end date is either greater than 2004 or 2010	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_end_date ) ) ( string > ) ( call SW.ensureNumericEntity ( call SW.concat ( date 2004 -1 -1 ) ( date 2010 -1 -1 ) ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )
what is relationship status of employee whose last day was after 2004	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.relationship_status ) ( string ! type ) ) ( call SW.reverse ( string relationship_status ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_end_date ) ) ( string > ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) ) )
which students starte school the same day alice graduated	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string education_start_date ) ( string = ) ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string student ) ) ) ( string education_end_date ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )
people who were born on or after the day alice quit her job	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string birthdate ) ) ( string >= ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string employee ) ) ) ( string employment_end_date ) ) ) ) )
which employee started after the employee alice	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_start_date ) ) ( string > ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string employee ) ) ) ( string employment_start_date ) ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )
friends of alice born in 2004	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string friend ) ( string = ) en.person.alice ) ( string birthdate ) ( string = ) ( date 2004 -1 -1 ) ) )
who was born after 2003	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string birthdate ) ) ( string >= ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) )
find me employees that have worked for no more than two employers	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.countComparative ( var s ) ( string employer ) ( string <= ) ( number 2 ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )
find me the oldest person	( call SW.listValue ( call SW.superlative ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string min ) ( call SW.ensureNumericProperty ( string birthdate ) ) ) )
students friend whose university is not brown university	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.reverse ( string friend ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string university ) ( string ! = ) en.university.brown ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) ) )
find me the birth city of all students whoes end date is 2004 or later	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.city ) ( string ! type ) ) ( call SW.reverse ( string birthplace ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_end_date ) ) ( string >= ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) ) )
which employee started earlier than 2004	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_start_date ) ) ( string < ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )
find me all males that are currently online	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string logged_in ) ) ( string gender ) ( string = ) en.gender.male ) )
how many employees share alices job title	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string job_title ) ( string = ) ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string employee ) ) ) ( string job_title ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )
alice is a student at which university	( call SW.listValue ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string student ) ) ) ( string university ) ) )
the university of someone 180 cm tall	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.university ) ( string ! type ) ) ( call SW.reverse ( string university ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string height ) ( string = ) ( number 180 en.cm ) ) ) )
employee whose end date is before 2004	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_end_date ) ) ( string < ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )
what city were more than two people in my social network born in	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.city ) ( string ! type ) ) ( call SW.reverse ( string birthplace ) ) ( string > ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ) )
show me all employees leaving before alices last day	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_end_date ) ) ( string < ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string student ) ) ) ( string education_end_date ) ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )
what people are friends with students that have a start date of 2004 or later	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string friend ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_start_date ) ) ( string >= ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) ) )
people those who are friends of friends of alice	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.reverse ( string friend ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.reverse ( string friend ) ) ( string = ) en.person.alice ) ) )
people that started working when alice stopped school or before	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_start_date ) ) ( string <= ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string student ) ) ) ( string education_end_date ) ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )
birthplace of only one person	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.city ) ( string ! type ) ) ( call SW.reverse ( string birthplace ) ) ( string < ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ) )
people who is not friend with alice	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string friend ) ( string ! = ) en.person.alice ) )
what is the job title of the person that is 180 cm	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.job_title ) ( string ! type ) ) ( call SW.reverse ( string job_title ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string height ) ( string = ) ( number 180 en.cm ) ) ) )
person alices height or taller	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string height ) ) ( string >= ) ( call SW.ensureNumericEntity ( call SW.getProperty en.person.alice ( string height ) ) ) ) )
what sex are the students who ended from 2004 on	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.gender ) ( string ! type ) ) ( call SW.reverse ( string gender ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_end_date ) ) ( string >= ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) ) )
people with two relationship statuses or less	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string relationship_status ) ( string <= ) ( number 2 ) ) )
what students have a start date that is the same as the end date of alice	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string education_start_date ) ( string = ) ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string employee ) ) ) ( string employment_end_date ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )
what is the relationship status of two people with the same status	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.relationship_status ) ( string ! type ) ) ( call SW.reverse ( string relationship_status ) ) ( string = ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ) )
students who start after alice	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_start_date ) ) ( string > ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string employee ) ) ) ( string employment_start_date ) ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )
alices field of study is computer science	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.person.alice ( call SW.reverse ( string student ) ) ) ( string field_of_study ) ( string = ) en.field.computer_science ) ( string field_of_study ) ) )
find employees with the latest end dates	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.superlative ( var s ) ( string max ) ( call SW.ensureNumericProperty ( string employment_end_date ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )
the birthplace of someone not employed by mckinsey	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.city ) ( string ! type ) ) ( call SW.reverse ( string birthplace ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string employer ) ( string ! = ) en.company.mckinsey ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) ) )
what is the relationship status of employees who are not employed by mckinsey	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.relationship_status ) ( string ! type ) ) ( call SW.reverse ( string relationship_status ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string employer ) ( string ! = ) en.company.mckinsey ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) ) )
gender of employees starting before 2004	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.gender ) ( string ! type ) ) ( call SW.reverse ( string gender ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_start_date ) ) ( string < ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) ) )
employees with the most job titles	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.countSuperlative ( var s ) ( string max ) ( string job_title ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )
find people with only one or two friends	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.reverse ( string friend ) ) ( string <= ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ) )
find the relation status of people who are 180 cm tall	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.relationship_status ) ( string ! type ) ) ( call SW.reverse ( string relationship_status ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string height ) ( string = ) ( number 180 en.cm ) ) ) )
people who are friends with employees whose last day was in or before 2004	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string friend ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_end_date ) ) ( string <= ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) ) )
person who hasnt been in 3 relationships	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string relationship_status ) ( string < ) ( number 2 ) ) )
find people who are 180 cm tall and logged in	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string height ) ( string = ) ( number 180 en.cm ) ) ( string logged_in ) ) )
birth city of employee whose end date is before 2004	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.city ) ( string ! type ) ) ( call SW.reverse ( string birthplace ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_end_date ) ) ( string < ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) ) )
what student has only one field of study	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.countComparative ( var s ) ( string field_of_study ) ( string < ) ( number 2 ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )
an employee who left after alice was born	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_end_date ) ) ( string > ) ( call SW.ensureNumericEntity ( call SW.getProperty en.person.alice ( string birthdate ) ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )
students who start before alice finishes	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_start_date ) ) ( string < ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string student ) ) ) ( string education_end_date ) ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )
students who start with alice	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string education_start_date ) ( string = ) ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string employee ) ) ) ( string employment_start_date ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )
find me a list of students whose start date was in 2004 or 2010	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string education_start_date ) ( string = ) ( call SW.concat ( date 2004 -1 -1 ) ( date 2010 -1 -1 ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )
find everyone born in new york who is 180 cm	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string birthplace ) ( string = ) en.city.new_york ) ( string height ) ( string = ) ( number 180 en.cm ) ) )
what is height of alice	( call SW.listValue ( call SW.getProperty en.person.alice ( string height ) ) )
what person has a birthdate with at most that of alices	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string birthdate ) ) ( string <= ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string student ) ) ) ( string education_end_date ) ) ) ) )
students who started on the same date as alice	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string education_start_date ) ( string = ) ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string student ) ) ) ( string education_start_date ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )
who is friends with an employee from at least 2004	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string friend ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_end_date ) ) ( string >= ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) ) )
when did alice start at mckinsey	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.person.alice ( call SW.reverse ( string employee ) ) ) ( string employer ) ( string = ) en.company.mckinsey ) ( string employment_start_date ) ) )
which employees had a quit date that was not in 2004	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string employment_end_date ) ( string ! = ) ( date 2004 -1 -1 ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )
what status is the relationship status of less than two people	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.relationship_status ) ( string ! type ) ) ( call SW.reverse ( string relationship_status ) ) ( string < ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ) )
who are men friends with	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.reverse ( string friend ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string gender ) ( string = ) en.gender.male ) ) )
relationship status of students who joined before 2005	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.relationship_status ) ( string ! type ) ) ( call SW.reverse ( string relationship_status ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_start_date ) ) ( string <= ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) ) )
friends of people whose job title is not software engineers	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.reverse ( string friend ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string job_title ) ( string ! = ) en.job_title.software_engineer ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) ) )
what does alice study at brown university	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.person.alice ( call SW.reverse ( string student ) ) ) ( string university ) ( string = ) en.university.brown ) ( string field_of_study ) ) )
what is the the relationship status of the employee who started in 2004	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.relationship_status ) ( string ! type ) ) ( call SW.reverse ( string relationship_status ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_start_date ) ) ( string >= ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) ) )
people born in 2004 and who are 180 cm tall	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string height ) ( string = ) ( number 180 en.cm ) ) ( string birthdate ) ( string = ) ( date 2004 -1 -1 ) ) )
name the relationships status of an employee who started no later than 2004	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.relationship_status ) ( string ! type ) ) ( call SW.reverse ( string relationship_status ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_start_date ) ) ( string <= ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) ) )
find students studying fields other than computer science	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string field_of_study ) ( string ! = ) en.field.computer_science ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )
birth city of employee whose end date is not 2004	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.city ) ( string ! type ) ) ( call SW.reverse ( string birthplace ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string employment_end_date ) ( string ! = ) ( date 2004 -1 -1 ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) ) )
who are friends with connection who started school before 2004	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.reverse ( string friend ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_start_date ) ) ( string < ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) ) )
what person has a birthdate between 2004 and 2010	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string birthdate ) ) ( string < ) ( call SW.ensureNumericEntity ( call SW.concat ( date 2004 -1 -1 ) ( date 2010 -1 -1 ) ) ) ) )
find males who are single	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string relationship_status ) ( string = ) en.relationship_status.single ) ( string gender ) ( string = ) en.gender.male ) )
what is the field of study for people who are 180 cm tall	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.field ) ( string ! type ) ) ( call SW.reverse ( string field_of_study ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string height ) ( string = ) ( number 180 en.cm ) ) ) )
students who will have their last day before alice quits her job	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_end_date ) ) ( string < ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string employee ) ) ) ( string employment_end_date ) ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )
a worker who began in 2004 or 2010	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string employment_start_date ) ( string = ) ( call SW.concat ( date 2004 -1 -1 ) ( date 2010 -1 -1 ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )
alices friends born in 2004	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string friend ) ( string = ) en.person.alice ) ( string birthdate ) ( string = ) ( date 2004 -1 -1 ) ) )
find relationship statuses for employees with a start date later than 2004	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.relationship_status ) ( string ! type ) ) ( call SW.reverse ( string relationship_status ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_start_date ) ) ( string > ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) ) )
person who has male friends	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string friend ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string gender ) ( string = ) en.gender.male ) ) )
find relationship statuses of students with a start date that is 2004 or later	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.relationship_status ) ( string ! type ) ) ( call SW.reverse ( string relationship_status ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_start_date ) ) ( string >= ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) ) )
what is the gender of no more than two people	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.gender ) ( string ! type ) ) ( call SW.reverse ( string gender ) ) ( string <= ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ) )
what gender is the gender of two people	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.gender ) ( string ! type ) ) ( call SW.reverse ( string gender ) ) ( string = ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ) )
find who alice worked for in 2004	( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty en.person.alice ( call SW.reverse ( string employee ) ) ) ( string employment_end_date ) ( string = ) ( date 2004 -1 -1 ) ) ( string employer ) ) )
name a person that alice is friends with	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string friend ) ( string = ) en.person.alice ) ( call SW.reverse ( string friend ) ) ( string = ) en.person.alice ) )
where were people that started work before 2004 born	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.city ) ( string ! type ) ) ( call SW.reverse ( string birthplace ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_start_date ) ) ( string < ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) ) )
find students with an end date earlier than that of employee alice	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_end_date ) ) ( string < ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string employee ) ) ) ( string employment_end_date ) ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )
find employees with a start date earlier than the end date of student alice	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_start_date ) ) ( string < ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string student ) ) ) ( string education_end_date ) ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )
what is the gender of students not attending brown university	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.gender ) ( string ! type ) ) ( call SW.reverse ( string gender ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string university ) ( string ! = ) en.university.brown ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) ) )
find students that have the fewest universities	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.countSuperlative ( var s ) ( string min ) ( string university ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )
places of birth of employees who quit their job in 2004 or later	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.city ) ( string ! type ) ) ( call SW.reverse ( string birthplace ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_end_date ) ) ( string >= ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) ) )
whats the relationship status of the new student starting before 2004	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.relationship_status ) ( string ! type ) ) ( call SW.reverse ( string relationship_status ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_start_date ) ) ( string < ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) ) )
people that were born before alice started school	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string birthdate ) ) ( string < ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string student ) ) ) ( string education_start_date ) ) ) ) )
which employees last day was the same day alice started school	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string employment_end_date ) ( string = ) ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string student ) ) ) ( string education_start_date ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )
find alices friends who are single	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.reverse ( string friend ) ) ( string = ) en.person.alice ) ( string relationship_status ) ( string = ) en.relationship_status.single ) )
who is the student whose start date is at least 2004 friends with	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.reverse ( string friend ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_start_date ) ) ( string >= ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) ) )
gender of alices friends	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.gender ) ( string ! type ) ) ( call SW.reverse ( string gender ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.reverse ( string friend ) ) ( string = ) en.person.alice ) ) )
name an employee who started before the student named alice	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_start_date ) ) ( string < ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string student ) ) ) ( string education_start_date ) ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )
place of birth for the fewest people	( call SW.listValue ( call SW.countSuperlative ( call SW.getProperty ( call SW.singleton en.city ) ( string ! type ) ) ( string min ) ( call SW.reverse ( string birthplace ) ) ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ) )
which student has at least 2 university to go to	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.countComparative ( var s ) ( string university ) ( string <= ) ( number 2 ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )
find single friends of alice	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string friend ) ( string = ) en.person.alice ) ( string relationship_status ) ( string = ) en.relationship_status.single ) )
a student starting after alice	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_start_date ) ) ( string > ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string employee ) ) ) ( string employment_start_date ) ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )
name a student who started in 2004 or 2010	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string education_start_date ) ( string = ) ( call SW.concat ( date 2004 -1 -1 ) ( date 2010 -1 -1 ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )
find all  friends with student with end date other than 2004	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string friend ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string education_end_date ) ( string ! = ) ( date 2004 -1 -1 ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) ) )
where were employees who finish on or before 2004 born	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.city ) ( string ! type ) ) ( call SW.reverse ( string birthplace ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_end_date ) ) ( string <= ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) ) )
birthplace of students not at brown	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.city ) ( string ! type ) ) ( call SW.reverse ( string birthplace ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string university ) ( string ! = ) en.university.brown ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) ) )
birth city of employee whose end date is not after 2004	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.city ) ( string ! type ) ) ( call SW.reverse ( string birthplace ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_end_date ) ) ( string <= ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) ) )
find the people who quit their job before alice joined her study	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_end_date ) ) ( string < ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string student ) ) ) ( string education_start_date ) ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )
people who are friends with students who do not graudate in 2004	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string friend ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string education_end_date ) ( string ! = ) ( date 2004 -1 -1 ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) ) )
which is the field of study of alice	( call SW.listValue ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string student ) ) ) ( string field_of_study ) ) )
who is alices friend that is from new york	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.reverse ( string friend ) ) ( string = ) en.person.alice ) ( string birthplace ) ( string = ) en.city.new_york ) )
people with relationship status of at least two people	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.relationship_status ) ( string ! type ) ) ( call SW.reverse ( string relationship_status ) ) ( string >= ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ) )
relationship status of employee whose end date is before 2004	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.relationship_status ) ( string ! type ) ) ( call SW.reverse ( string relationship_status ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_end_date ) ) ( string < ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) ) )
person that stopped school most recently	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.superlative ( var s ) ( string max ) ( call SW.ensureNumericProperty ( string education_end_date ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )
what genders are the people whom alice is friends with	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.gender ) ( string ! type ) ) ( call SW.reverse ( string gender ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.reverse ( string friend ) ) ( string = ) en.person.alice ) ) )
find students whose last day was before 2010	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_end_date ) ) ( string < ) ( call SW.ensureNumericEntity ( call SW.concat ( date 2004 -1 -1 ) ( date 2010 -1 -1 ) ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )
whats the relationship status of all students except those from brown university	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.relationship_status ) ( string ! type ) ) ( call SW.reverse ( string relationship_status ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string university ) ( string ! = ) en.university.brown ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) ) )
which employees started before 2004 or 2010	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_start_date ) ) ( string < ) ( call SW.ensureNumericEntity ( call SW.concat ( date 2004 -1 -1 ) ( date 2010 -1 -1 ) ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )
who is friends with an employee who start date is not 2004	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.reverse ( string friend ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string employment_start_date ) ( string ! = ) ( date 2004 -1 -1 ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) ) )
find birthplaces of students whose last day was in 2004 or later	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.city ) ( string ! type ) ) ( call SW.reverse ( string birthplace ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_end_date ) ) ( string >= ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) ) )
people who are friends with employees who started working before or after 2004	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string friend ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string employment_start_date ) ( string ! = ) ( date 2004 -1 -1 ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) ) )
an employee ending before 2004	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_end_date ) ) ( string < ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )
people who are male and born in new york	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string gender ) ( string = ) en.gender.male ) ( string birthplace ) ( string = ) en.city.new_york ) )
what student has a start date close to the start date of alice	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_start_date ) ) ( string >= ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string student ) ) ) ( string education_start_date ) ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )
find students with last days on or before alices first day	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_end_date ) ) ( string <= ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string student ) ) ) ( string education_start_date ) ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )
what person is the shortest	( call SW.listValue ( call SW.superlative ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string min ) ( call SW.ensureNumericProperty ( string height ) ) ) )
employees with two job titles at most	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.countComparative ( var s ) ( string job_title ) ( string <= ) ( number 2 ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )
what employees have a start date no later than 2004	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_start_date ) ) ( string <= ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )
student with start date not after end date of student alice	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_start_date ) ) ( string <= ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string student ) ) ) ( string education_end_date ) ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )
student whose start date is not before start date of employee alice	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_start_date ) ) ( string >= ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string employee ) ) ) ( string employment_start_date ) ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )
find people who has the same birthplace as alice	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string birthplace ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.city ) ( string ! type ) ) ( call SW.reverse ( string birthplace ) ) ( string = ) en.person.alice ) ) )
people who are friends who employees who didnt quit in 2004	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string friend ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string employment_end_date ) ( string ! = ) ( date 2004 -1 -1 ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) ) )
people that are friends with someone that started school before 2004	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string friend ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_start_date ) ) ( string < ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) ) )
find the relationship statuses of students whom do not study computer science	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.relationship_status ) ( string ! type ) ) ( call SW.reverse ( string relationship_status ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string field_of_study ) ( string ! = ) en.field.computer_science ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) ) )
find the relationship status of students whose university is not that of brown	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.relationship_status ) ( string ! type ) ) ( call SW.reverse ( string relationship_status ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string university ) ( string ! = ) en.university.brown ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) ) )
friends of people who quit their jobs after 2003	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.reverse ( string friend ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_end_date ) ) ( string >= ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) ) )
students who finish after alice	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_end_date ) ) ( string > ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string employee ) ) ) ( string employment_end_date ) ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )
who was born in 2004 or 2010	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string birthdate ) ) ( string <= ) ( call SW.ensureNumericEntity ( call SW.concat ( date 2004 -1 -1 ) ( date 2010 -1 -1 ) ) ) ) )
employee who left after alice started	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_end_date ) ) ( string > ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string employee ) ) ) ( string employment_start_date ) ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )
find the birth city of employees with an end date later than 2004	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.city ) ( string ! type ) ) ( call SW.reverse ( string birthplace ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_end_date ) ) ( string > ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) ) )
birth place of people who completed education after 2004	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.city ) ( string ! type ) ) ( call SW.reverse ( string birthplace ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_end_date ) ) ( string > ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) ) )
find friends of students not attending brown university	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.reverse ( string friend ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string university ) ( string ! = ) en.university.brown ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) ) )
where were the people that started school after 2004 born	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.city ) ( string ! type ) ) ( call SW.reverse ( string birthplace ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_start_date ) ) ( string > ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) ) )
what is the birth city of a student who didnt stop in 2004	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.city ) ( string ! type ) ) ( call SW.reverse ( string birthplace ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string education_end_date ) ( string ! = ) ( date 2004 -1 -1 ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) ) )
find employees with fewer than two job titles	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.countComparative ( var s ) ( string job_title ) ( string < ) ( number 2 ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )
find the gender of employees who have an end date that is 2004 or later	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.gender ) ( string ! type ) ) ( call SW.reverse ( string gender ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_end_date ) ) ( string >= ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) ) )
find people who are between 180 cm and 200 cm tall	( call SW.listValue ( call SW.concat ( number 180 en.cm ) ( number 200 en.cm ) ) )
one student who started on the same day as employee alice	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string education_start_date ) ( string = ) ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string employee ) ) ) ( string employment_start_date ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )
what is the birthdate of the person who is 180 cm	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string birthdate ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string height ) ( string = ) ( number 180 en.cm ) ) ) )
alices friend who is 180 cm tall	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.reverse ( string friend ) ) ( string = ) en.person.alice ) ( string height ) ( string = ) ( number 180 en.cm ) ) )
which students start date is on or before alices end date	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_start_date ) ) ( string <= ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string employee ) ) ) ( string employment_end_date ) ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )
people who are friends with people who got their current job before 2005	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.reverse ( string friend ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_start_date ) ) ( string <= ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) ) )
who is single and is friends with alice	( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string relationship_status ) ( string = ) en.relationship_status.single ) ( string friend ) ( string = ) en.person.alice ) )
what person doesnt have the height of 180 cm	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string height ) ( string ! = ) ( number 180 en.cm ) ) )
what birthplace has at least two people in it	( call SW.listValue ( call SW.countComparative ( call SW.getProperty ( call SW.singleton en.city ) ( string ! type ) ) ( call SW.reverse ( string birthplace ) ) ( string = ) ( number 2 ) ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ) )
which students graduate the day alice starts school	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string education_end_date ) ( string = ) ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string student ) ) ) ( string education_start_date ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )
what is the birth city of all employees who have an end date less than 2004	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.city ) ( string ! type ) ) ( call SW.reverse ( string birthplace ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_end_date ) ) ( string < ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) ) )
people that started school after alice stopped school	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_start_date ) ) ( string > ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string student ) ) ) ( string education_end_date ) ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )
relationship statuses of students that dont go to brown university	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.relationship_status ) ( string ! type ) ) ( call SW.reverse ( string relationship_status ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( string university ) ( string ! = ) en.university.brown ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) ) )
employee whose end date is before after end date of employee alice	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_end_date ) ) ( string > ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string employee ) ) ) ( string employment_end_date ) ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) )
find people with a height of 180 cm and their friends	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.reverse ( string friend ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string height ) ( string = ) ( number 180 en.cm ) ) ) )
a friend of someone who started before 2004	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.reverse ( string friend ) ) ( string = ) ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string employment_start_date ) ) ( string < ) ( call SW.ensureNumericEntity ( date 2004 -1 -1 ) ) ) ) ( call SW.domain ( string employee ) ) ) ( string employee ) ) ) )
people born after alices first day of school	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string birthdate ) ) ( string <= ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string student ) ) ) ( string education_start_date ) ) ) ) )
which student ended school right when alice started her job	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_end_date ) ) ( string <= ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string employee ) ) ) ( string employment_start_date ) ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )
students who started after alices end date	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_start_date ) ) ( string > ) ( call SW.ensureNumericEntity ( call SW.getProperty ( call SW.getProperty en.person.alice ( call SW.reverse ( string student ) ) ) ( string education_end_date ) ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )
people who are male or female	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( string gender ) ( string = ) ( call SW.concat en.gender.male en.gender.female ) ) )
which student ending date is earlier than 2004	( call SW.listValue ( call SW.getProperty ( ( lambda s ( call SW.filter ( var s ) ( call SW.ensureNumericProperty ( string education_end_date ) ) ( string < ) ( call SW.ensureNumericEntity ( call SW.concat ( date 2004 -1 -1 ) ( date 2010 -1 -1 ) ) ) ) ) ( call SW.domain ( string student ) ) ) ( string student ) ) )
people who are 180 cm or taller	( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton en.person ) ( string ! type ) ) ( call SW.ensureNumericProperty ( string height ) ) ( string >= ) ( call SW.ensureNumericEntity ( number 180 en.cm ) ) ) )
